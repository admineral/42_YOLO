{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/./node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","logLevelInternal","logLevel","value","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","reshape","InferenceSession","handler","async","feeds","fetches","options","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","static","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","_scriptDir","document","currentScript","src","n","k","C","G","F","t","P","r","I","a","U","u","Y","o","s","ready","Promise","f","c","l","p","m","d","h","assign","g","_","y","window","b","importScripts","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","O","T","locateFile","__dirname","normalize","readFileSync","readFile","argv","replace","slice","on","oe","Z","exitCode","x","exit","inspect","console","error","Worker","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","M","log","bind","S","warn","writeSync","A","R","print","printErr","thisProgram","quit","wasmBinary","E","noExitRuntime","WebAssembly","re","D","W","H","TextDecoder","N","decode","subarray","String","fromCharCode","j","L","charCodeAt","q","HEAP8","HEAP16","HEAP32","HEAPU8","HEAPU16","HEAPU32","HEAPF32","HEAPF64","z","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","B","K","Q","V","X","J","preRun","shift","unshift","$","ee","ne","te","postMessage","cmd","arg","onAbort","RuntimeError","ae","startsWith","ue","ie","message","se","pe","Ma","Xa","fe","mb","Sa","La","start_routine","qb","jb","pthread_ptr","Ra","time","now","vb","loaded","ce","je","Za","onExit","le","he","cn","me","fn","Ze","Je","Pa","ab","Va","nb","xb","receiveObjectTransfer","pb","threadInitTLS","$a","setExitStatus","Ya","values","terminate","hn","forEach","ob","onmessage","lb","targetThread","yb","transferList","Ie","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","ib","pop","de","yn","bn","PThread","establishStackSpace","_n","ge","_e","ye","be","Qa","hb","eb","fb","cb","gb","bb","ve","we","wb","Oe","Te","Me","Se","Ae","Re","xe","Ee","ke","De","Ce","Fe","Pe","Atomics","store","dn","compareExchange","Ue","Ye","We","He","sn","Ne","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","arguments","vn","mn","invokeEntryPoint","gn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Le","qe","Ge","ze","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Be","Ke","Qe","Ve","Xe","$e","en","nn","tn","rn","toString","getMonth","getDate","getDay","Na","Oa","getTime","setDate","setMonth","setFullYear","tb","sb","Ta","Wa","Ua","Ka","zb","rb","ub","RegExp","split","substring","floor","abs","includes","an","un","ln","setTimeout","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","kb","copyWithin","hardwareConcurrency","apply","grow","asm","wa","ya","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","_OrtCreateSessionOptions","_OrtAppendExecutionProvider","aa","_OrtAddSessionConfigEntry","ba","_OrtReleaseSessionOptions","ca","_OrtCreateSession","da","_OrtReleaseSession","ea","_OrtGetInputCount","fa","_OrtGetOutputCount","ga","_OrtGetInputName","ha","_OrtGetOutputName","ia","_OrtFree","ja","_OrtCreateTensor","ka","_OrtGetTensorData","la","_OrtReleaseTensor","ma","_OrtCreateRunOptions","na","_OrtAddRunConfigEntry","oa","_OrtReleaseRunOptions","pa","_OrtRun","qa","_OrtEndProfiling","ra","_pthread_self","sa","_malloc","ta","_free","ua","_fflush","va","__emscripten_tls_init","___funcs_on_exit","xa","__emscripten_thread_init","za","__emscripten_thread_crashed","Aa","pn","_emscripten_run_in_main_runtime_thread_js","Ba","__emscripten_proxy_execute_task_queue","Ca","__emscripten_thread_free_data","Da","__emscripten_thread_exit","Ea","_emscripten_stack_set_limits","Fa","stackSave","Ga","stackRestore","Ha","stackAlloc","Ia","wn","calledRun","onRuntimeInitialized","postRun","setStatus","___cxa_is_pointer_type","Ja","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","ctx","params","offset","index","pending","reject","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","promisify","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","_cacheKey","sort","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","OffscreenCanvas","createElement","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","Shape","getSizePrefixedRootAsShape","startShape","builder","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort.es5.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return k.buffer!=C&&G(k.buffer),F}function t(){return k.buffer!=C&&G(k.buffer),P}function r(){return k.buffer!=C&&G(k.buffer),I}function a(){return k.buffer!=C&&G(k.buffer),U}function u(){return k.buffer!=C&&G(k.buffer),Y}var i,o,s;e=e||{},i||(i=void 0!==e?e:{}),i.ready=new Promise((function(e,n){o=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},i),g=\"./this.program\",_=(e,n)=>{throw n},y=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=i.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return i.locateFile?i.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof oe))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),_=(e,n)=>{if(Z())throw process.exitCode=e,n;n instanceof oe||x(\"exiting due to exception: \"+n),process.exit(e)},i.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(y||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),S=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),S=e=>p.writeSync(2,e+\"\\n\"));var A,R=i.print||M,x=i.printErr||S;Object.assign(i,h),h=null,i.thisProgram&&(g=i.thisProgram),i.quit&&(_=i.quit),i.wasmBinary&&(A=i.wasmBinary);var E=i.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&re(\"no native wasm support detected\");var k,D,C,F,P,I,U,Y,W=!1,H=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function N(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&H)return H.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var u=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|u);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|u<<6|i:(7&a)<<18|u<<12|i<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(e,n){return(e>>>=0)?N(t(),e,n):\"\"}function L(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var u=0;u<e.length;++u){var i=e.charCodeAt(u);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++u)),127>=i){if(t>=r)break;n[t++>>>0]=i}else{if(2047>=i){if(t+1>=r)break;n[t++>>>0]=192|i>>6}else{if(65535>=i){if(t+2>=r)break;n[t++>>>0]=224|i>>12}else{if(t+3>=r)break;n[t++>>>0]=240|i>>18,n[t++>>>0]=128|i>>12&63}n[t++>>>0]=128|i>>6&63}n[t++>>>0]=128|63&i}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function G(e){C=e,i.HEAP8=F=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=I=new Int32Array(e),i.HEAPU8=P=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=U=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=Y=new Float64Array(e)}w&&(C=i.buffer);var z=i.INITIAL_MEMORY||16777216;if(w)k=i.wasmMemory,C=i.buffer;else if(i.wasmMemory)k=i.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:z/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");k&&(C=k.buffer),z=C.byteLength,G(C);var B,K=[],Q=[],V=[],X=[];function Z(){return E||!1}function J(){var e=i.preRun.shift();K.unshift(e)}var $,ee=0,ne=null,te=null;function re(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):i.onAbort&&i.onAbort(e),x(e=\"Aborted(\"+e+\")\"),W=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function ae(){return $.startsWith(\"data:application/octet-stream;base64,\")}function ue(){var e=$;try{if(e==$&&A)return new Uint8Array(A);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){re(e)}}$=\"ort-wasm-threaded.wasm\",ae()||($=T($));var ie={};function oe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){(e=pe.Ma[e])||re(),pe.Xa(e)}function fe(e){var n=pe.mb();if(!n)return 6;pe.Sa.push(n),pe.Ma[e.La]=n,n.La=e.La;var t={cmd:\"run\",start_routine:e.qb,arg:e.jb,pthread_ptr:e.La};return n.Ra=()=>{t.time=performance.now(),n.postMessage(t,e.vb)},n.loaded&&(n.Ra(),delete n.Ra),0}function ce(e){if(w)return je(1,1,e);Z()||(pe.Za(),i.onExit&&i.onExit(e),W=!0),_(e,new oe(e))}function le(e,n){if(!n&&w)throw he(e),\"unwind\";Z()||w||(cn(),me(V),fn(0),Ze[1].length&&Je(1,10),Ze[2].length&&Je(2,10),pe.Za()),ce(e)}var pe={Pa:[],Sa:[],ab:[],Ma:{},Va:function(){w&&pe.nb()},xb:function(){},nb:function(){pe.receiveObjectTransfer=pe.pb,pe.threadInitTLS=pe.$a,pe.setExitStatus=pe.Ya,E=!1},Ya:function(){},Za:function(){for(var e of Object.values(pe.Ma))pe.Xa(e);for(e of pe.Pa)e.terminate();pe.Pa=[]},Xa:function(e){var n=e.La;delete pe.Ma[n],pe.Pa.push(e),pe.Sa.splice(pe.Sa.indexOf(e),1),e.La=0,hn(n)},pb:function(){},$a:function(){pe.ab.forEach((e=>e()))},ob:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.La&&(pe.lb=e.La),t.targetThread&&t.targetThread!=on()){var a=pe.Ma[t.yb];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ie(t.queue):\"spawnThread\"===r?fe(t):\"cleanupThread\"===r?se(t.thread):\"killThread\"===r?(t=t.thread,r=pe.Ma[t],delete pe.Ma[t],r.terminate(),hn(t),pe.Sa.splice(pe.Sa.indexOf(r),1),r.La=0):\"cancelThread\"===r?pe.Ma[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.Ra&&(e.Ra(),delete e.Ra)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?i.onAbort&&i.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);pe.lb=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:D})},ib:function(){var e=T(\"ort-wasm-threaded.worker.js\");pe.Pa.push(new Worker(e))},mb:function(){return 0==pe.Pa.length&&(pe.ib(),pe.ob(pe.Pa[0])),pe.Pa.pop()}};function me(e){for(;0<e.length;)e.shift()(i)}function de(e){var n=yn();return e=e(),bn(n),e}function he(e){if(w)return je(2,0,e);try{le(e)}catch(e){e instanceof oe||\"unwind\"==e||_(1,e)}}i.PThread=pe,i.establishStackSpace=function(){var e=on(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],_n(n,n-e),bn(n)};var ge,_e,ye=[];function be(e){this.Qa=e-24,this.hb=function(e){a()[this.Qa+4>>2>>>0]=e},this.eb=function(e){a()[this.Qa+8>>2>>>0]=e},this.fb=function(){r()[this.Qa>>2>>>0]=0},this.cb=function(){n()[this.Qa+12>>0>>>0]=0},this.gb=function(){n()[this.Qa+13>>0>>>0]=0},this.Va=function(e,n){this.bb(),this.hb(e),this.eb(n),this.fb(),this.cb(),this.gb()},this.bb=function(){a()[this.Qa+16>>2>>>0]=0}}function ve(e,n,t,r){return w?je(3,1,e,n,t,r):we(e,n,t,r)}function we(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?ve(e,n,t,r):(e={qb:t,La:e,jb:r,vb:a},w?(e.wb=\"spawnThread\",postMessage(e,a),0):fe(e))}function Oe(e,n,t){return w?je(4,1,e,n,t):0}function Te(e,n){if(w)return je(5,1,e,n)}function Me(e,n){if(w)return je(6,1,e,n)}function Se(e,n,t){if(w)return je(7,1,e,n,t)}function Ae(e,n,t){return w?je(8,1,e,n,t):0}function Re(e,n){if(w)return je(9,1,e,n)}function xe(e,n,t){if(w)return je(10,1,e,n,t)}function Ee(e,n,t,r){if(w)return je(11,1,e,n,t,r)}function ke(e,n,t,r){if(w)return je(12,1,e,n,t,r)}function De(e,n,t,r){if(w)return je(13,1,e,n,t,r)}function Ce(e){if(w)return je(14,1,e)}function Fe(e,n){if(w)return je(15,1,e,n)}function Pe(e,n,t){if(w)return je(16,1,e,n,t)}function Ie(e){Atomics.store(r(),e>>2,1),on()&&dn(e),Atomics.compareExchange(r(),e>>2,1,0)}function Ue(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Ye(e,n,t,r,a,u){return w?je(17,1,e,n,t,r,a,u):-52}function We(e,n,t,r,a,u){if(w)return je(18,1,e,n,t,r,a,u)}function He(e){var t=q(e)+1,r=sn(t);return r&&L(e,n(),r,t),r}function Ne(e,n,t){function u(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return je(19,1,e,n,t);var i=(new Date).getFullYear(),o=new Date(i,0,1),s=new Date(i,6,1);i=o.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(i!=f),e=u(o),n=u(s),e=He(e),n=He(n),f<i?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function je(e,n){var t=arguments.length-2,r=arguments;return de((()=>{for(var a=vn(8*t),i=a>>3,o=0;o<t;o++){var s=r[2+o];u()[i+o>>>0]=s}return mn(e,t,a,n)}))}i.invokeEntryPoint=function(e,n){var t=ye[e];t||(e>=ye.length&&(ye.length=e+1),ye[e]=t=B.get(e)),e=t(n),Z()?pe.Ya(e):gn(e)},i.executeNotifiedProxyingQueue=Ie,_e=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var Le,qe=[],Ge={};function ze(){if(!Le){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Ge)void 0===Ge[e]?delete n[e]:n[e]=Ge[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Le=t}return Le}function Be(e,t){if(w)return je(20,1,e,t);var r=0;return ze().forEach((function(u,i){var o=t+r;for(i=a()[e+4*i>>2>>>0]=o,o=0;o<u.length;++o)n()[i++>>0>>>0]=u.charCodeAt(o);n()[i>>0>>>0]=0,r+=u.length+1})),0}function Ke(e,n){if(w)return je(21,1,e,n);var t=ze();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Qe(e){return w?je(22,1,e):52}function Ve(e,n,t,r){return w?je(23,1,e,n,t,r):52}function Xe(e,n,t,r,a){return w?je(24,1,e,n,t,r,a):70}var Ze=[null,[],[]];function Je(e,n){var t=Ze[e];0===n||10===n?((1===e?R:x)(N(t,0)),t.length=0):t.push(n)}function $e(e,n,r,u){if(w)return je(25,1,e,n,r,u);for(var i=0,o=0;o<r;o++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++)Je(e,t()[s+c>>>0]);i+=f}return a()[u>>2>>>0]=i,0}function en(e){return 0==e%4&&(0!=e%100||0==e%400)}var nn=[31,29,31,30,31,30,31,31,30,31,30,31],tn=[31,28,31,30,31,30,31,31,30,31,30,31];function rn(e,t,a,u){function i(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function o(e,n){return i(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(en(e.getFullYear())?nn:tn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[u+40>>2>>>0];for(var p in u={tb:r()[u>>2>>>0],sb:r()[u+4>>2>>>0],Ta:r()[u+8>>2>>>0],Wa:r()[u+12>>2>>>0],Ua:r()[u+16>>2>>>0],Oa:r()[u+20>>2>>>0],Ka:r()[u+24>>2>>>0],Na:r()[u+28>>2>>>0],zb:r()[u+32>>2>>>0],rb:r()[u+36>>2>>>0],ub:l?j(l):\"\"},a=j(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ka].substring(0,3)},\"%A\":function(e){return m[e.Ka]},\"%b\":function(e){return d[e.Ua].substring(0,3)},\"%B\":function(e){return d[e.Ua]},\"%C\":function(e){return o((e.Oa+1900)/100|0,2)},\"%d\":function(e){return o(e.Wa,2)},\"%e\":function(e){return i(e.Wa,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return o(e.Ta,2)},\"%I\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),o(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Ua-1;n+=(en(e.Oa+1900)?nn:tn)[t++]);return o(e.Wa+n,3)},\"%m\":function(e){return o(e.Ua+1,2)},\"%M\":function(e){return o(e.sb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Ta&&12>e.Ta?\"AM\":\"PM\"},\"%S\":function(e){return o(e.tb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ka||7},\"%U\":function(e){return o(Math.floor((e.Na+7-e.Ka)/7),2)},\"%V\":function(e){var n=Math.floor((e.Na+7-(e.Ka+6)%7)/7);if(2>=(e.Ka+371-e.Na-2)%7&&n++,n)53==n&&(4==(t=(e.Ka+371-e.Na)%7)||3==t&&en(e.Oa)||(n=1));else{n=52;var t=(e.Ka+7-e.Na-1)%7;(4==t||5==t&&en(e.Oa%400-1))&&n++}return o(n,2)},\"%w\":function(e){return e.Ka},\"%W\":function(e){return o(Math.floor((e.Na+7-(e.Ka+6)%7)/7),2)},\"%y\":function(e){return(e.Oa+1900).toString().substring(2)},\"%Y\":function(e){return e.Oa+1900},\"%z\":function(e){var n=0<=(e=e.rb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.ub},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](u)));return p=function(e){var n=Array(q(e)+1);return L(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}pe.Va();var an=[null,ce,he,ve,Oe,Te,Me,Se,Ae,Re,xe,Ee,ke,De,Ce,Fe,Pe,Ye,We,Ne,Be,Ke,Qe,Ve,Xe,$e],un={b:function(e){return sn(e+24)+24},c:function(e,n,t){throw new be(e).Va(n,t),e},L:function(e){ln(e,!b,1,!y),pe.$a()},m:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):se(e)},D:we,i:Oe,S:Te,y:Me,B:Se,t:Ae,Q:Re,I:xe,P:Ee,o:ke,z:De,w:Ce,R:Fe,x:Pe,q:function(){},j:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},r:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},p:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>Ie(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=pe.Ma[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},V:function(e,n){e=new Date(1e3*Ue(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},W:function(e,n){e=new Date(1e3*Ue(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},X:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),u=new Date(n.getFullYear(),0,1),i=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=u.getTimezoneOffset(),s=Math.min(o,i);return 0>t?r()[e+32>>2>>>0]=Number(i!=o&&s==a):0<t!=(s==a)&&(i=Math.max(o,i),n.setTime(n.getTime()+6e4*((0<t?s:i)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-u.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Ye,H:We,Y:function e(n,t,r){e.kb||(e.kb=!0,Ne(n,t,r))},d:function(){re(\"\")},n:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";ge||(ge={}),ge[e]||(ge[e]=1,v&&(e=\"warning: \"+e),x(e))}},v:function(){return 4294901760},f:_e,O:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},g:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){qe.length=n,t>>=3;for(var r=0;r<n;r++)qe[r]=u()[t+r>>>0];return(0>e?ie[-e-1]:an[e]).apply(null,qe)},u:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var u=Math;a=Math.max(e,a),u=u.min.call(u,4294901760,a+(65536-a%65536)%65536);e:{try{k.grow(u-C.byteLength+65535>>>16),G(k.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\"unwind\"},M:Be,N:Ke,C:le,h:Qe,l:Ve,s:Xe,k:$e,a:k||i.wasmMemory,A:rn,e:function(e,n,t,r){return rn(e,n,t,r)}};!function(){function e(e,n){i.asm=e.exports,pe.ab.push(i.asm.wa),B=i.asm.ya,Q.unshift(i.asm.Z),D=n,w||(ee--,i.monitorRunDependencies&&i.monitorRunDependencies(ee),0==ee&&(null!==ne&&(clearInterval(ne),ne=null),te&&(e=te,te=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!A&&(y||b)){if(\"function\"==typeof fetch&&!$.startsWith(\"file://\"))return fetch($,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+$+\"'\";return e.arrayBuffer()})).catch((function(){return ue()}));if(c)return new Promise((function(e,n){c($,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return ue()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),re(e)}))}var r={a:un};if(w||(ee++,i.monitorRunDependencies&&i.monitorRunDependencies(ee)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(A||\"function\"!=typeof WebAssembly.instantiateStreaming||ae()||$.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch($,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.Z).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm._).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.$).apply(null,arguments)},i._OrtAppendExecutionProvider=function(){return(i._OrtAppendExecutionProvider=i.asm.aa).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ba).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.ca).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.da).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.ea).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.fa).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ga).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ha).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ia).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ja).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.ka).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.la).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.ma).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.na).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.oa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.pa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.qa).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.ra).apply(null,arguments)};var on=i._pthread_self=function(){return(on=i._pthread_self=i.asm.sa).apply(null,arguments)},sn=i._malloc=function(){return(sn=i._malloc=i.asm.ta).apply(null,arguments)};i._free=function(){return(i._free=i.asm.ua).apply(null,arguments)};var fn=i._fflush=function(){return(fn=i._fflush=i.asm.va).apply(null,arguments)};i.__emscripten_tls_init=function(){return(i.__emscripten_tls_init=i.asm.wa).apply(null,arguments)};var cn=i.___funcs_on_exit=function(){return(cn=i.___funcs_on_exit=i.asm.xa).apply(null,arguments)},ln=i.__emscripten_thread_init=function(){return(ln=i.__emscripten_thread_init=i.asm.za).apply(null,arguments)};i.__emscripten_thread_crashed=function(){return(i.__emscripten_thread_crashed=i.asm.Aa).apply(null,arguments)};var pn,mn=i._emscripten_run_in_main_runtime_thread_js=function(){return(mn=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ba).apply(null,arguments)},dn=i.__emscripten_proxy_execute_task_queue=function(){return(dn=i.__emscripten_proxy_execute_task_queue=i.asm.Ca).apply(null,arguments)},hn=i.__emscripten_thread_free_data=function(){return(hn=i.__emscripten_thread_free_data=i.asm.Da).apply(null,arguments)},gn=i.__emscripten_thread_exit=function(){return(gn=i.__emscripten_thread_exit=i.asm.Ea).apply(null,arguments)},_n=i._emscripten_stack_set_limits=function(){return(_n=i._emscripten_stack_set_limits=i.asm.Fa).apply(null,arguments)},yn=i.stackSave=function(){return(yn=i.stackSave=i.asm.Ga).apply(null,arguments)},bn=i.stackRestore=function(){return(bn=i.stackRestore=i.asm.Ha).apply(null,arguments)},vn=i.stackAlloc=function(){return(vn=i.stackAlloc=i.asm.Ia).apply(null,arguments)};function wn(){function e(){if(!pn&&(pn=!0,i.calledRun=!0,!W)&&(w||me(Q),o(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!w)){if(i.postRun)for(\"function\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();X.unshift(e)}me(X)}}if(!(0<ee))if(w)o(i),w||me(Q),postMessage({cmd:\"loaded\"});else{if(i.preRun)for(\"function\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)J();me(K),0<ee||(i.setStatus?(i.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){i.setStatus(\"\")}),1),e()}),1)):e())}}if(i.___cxa_is_pointer_type=function(){return(i.___cxa_is_pointer_type=i.asm.Ja).apply(null,arguments)},i.UTF8ToString=j,i.stringToUTF8=function(e,n,r){return L(e,t(),n,r)},i.lengthBytesUTF8=q,i.keepRuntimeAlive=Z,i.wasmMemory=k,i.stackSave=yn,i.stackRestore=bn,i.stackAlloc=vn,i.ExitStatus=oe,i.PThread=pe,te=function e(){pn||wn(),pn||(te=e)},i.preInit)for(\"function\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return wn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,k;b.ready=new Promise(function(a,c){aa=a;k=c});var ba=Object.assign({},b),p=\"./this.program\",ca=\"object\"==typeof window,t=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,x=\"\",y,A,B,fs,C,D;\r\nif(u)x=t?require(\"path\").dirname(x)+\"/\":__dirname+\"/\",D=()=>{C||(fs=require(\"fs\"),C=require(\"path\"))},y=function(a,c){D();a=C.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},B=a=>{a=y(a,!0);a.buffer||(a=new Uint8Array(a));return a},A=(a,c,e)=>{D();a=C.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\r\n}),b.inspect=function(){return\"[Emscripten Module object]\"};else if(ca||t)t?x=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):x=\"\",y=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},t&&(B=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),\r\nA=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var da=b.print||console.log.bind(console),E=b.printErr||console.warn.bind(console);Object.assign(b,ba);ba=null;b.thisProgram&&(p=b.thisProgram);var F;b.wasmBinary&&(F=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");\r\nvar H,ea=!1,fa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ha(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&fa)return fa.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function I(a,c){return(a>>>=0)?ha(J,a,c):\"\"}\r\nfunction K(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var q=a.charCodeAt(++h);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\r\nfunction L(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ia,M,J,N,O;function ja(){var a=H.buffer;ia=a;b.HEAP8=M=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=N=new Int32Array(a);b.HEAPU8=J=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=O=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ka=[],la=[],ma=[];function na(){var a=b.preRun.shift();ka.unshift(a)}\r\nvar P=0,Q=null,R=null;function G(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);ea=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");k(a);throw a;}function oa(){return S.startsWith(\"data:application/octet-stream;base64,\")}var S;S=\"ort-wasm.wasm\";if(!oa()){var pa=S;S=b.locateFile?b.locateFile(pa,x):x+pa}function qa(){var a=S;try{if(a==S&&F)return new Uint8Array(F);if(B)return B(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){G(c)}}\r\nfunction ra(){if(!F&&(ca||t)){if(\"function\"==typeof fetch&&!S.startsWith(\"file://\"))return fetch(S,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+S+\"'\";return a.arrayBuffer()}).catch(function(){return qa()});if(A)return new Promise(function(a,c){A(S,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return qa()})}function T(a){for(;0<a.length;)a.shift()(b)}\r\nfunction sa(a){this.ra=a-24;this.Ga=function(c){O[this.ra+4>>2>>>0]=c};this.za=function(c){O[this.ra+8>>2>>>0]=c};this.Aa=function(){N[this.ra>>2>>>0]=0};this.ya=function(){M[this.ra+12>>0>>>0]=0};this.Fa=function(){M[this.ra+13>>0>>>0]=0};this.wa=function(c,e){this.xa();this.Ga(c);this.za(e);this.Aa();this.ya();this.Fa()};this.xa=function(){O[this.ra+16>>2>>>0]=0}}var ta=0;function xa(a){var c=L(a)+1,e=U(c);e&&K(a,M,e,c);return e}\r\nfunction ya(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var q=l.getTimezoneOffset();N[a>>2>>>0]=60*Math.max(g,q);N[c>>2>>>0]=Number(g!=q);a=f(h);c=f(l);a=xa(a);c=xa(c);q<g?(O[e>>2>>>0]=a,O[e+4>>2>>>0]=c):(O[e>>2>>>0]=c,O[e+4>>2>>>0]=a)}function V(a,c,e){V.va||(V.va=!0,ya(a,c,e))}var W={};\r\nfunction za(){if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:p||\"./this.program\"},c;for(c in W)void 0===W[c]?delete a[c]:a[c]=W[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);X=e}return X}var X,Aa=[null,[],[]];function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var Ba=[31,29,31,30,31,30,31,31,30,31,30,31],Ca=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Da(a){var c=Array(L(a)+1);K(a,c,0,c.length);return c}\r\nfunction Ea(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var z;0===(z=n(d.getFullYear()-m.getFullYear()))&&0===(z=n(d.getMonth()-m.getMonth()))&&(z=n(d.getDate()-m.getDate()));return z}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.pa;for(d=new Date((new Date(d.qa+1900,0,1)).getTime());0<m;){var n=d.getMonth(),z=(Y(d.getFullYear())?Ba:Ca)[n];if(m>z-d.getDate())m-=z-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=q(new Date(d.getFullYear(),\r\n0,4));n=q(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=N[f+40>>2>>>0];f={Da:N[f>>2>>>0],Ca:N[f+4>>2>>>0],sa:N[f+8>>2>>>0],ua:N[f+12>>2>>>0],ta:N[f+16>>2>>>0],qa:N[f+20>>2>>>0],ka:N[f+24>>2>>>0],pa:N[f+28>>2>>>0],Ha:N[f+32>>2>>>0],Ba:N[f+36>>2>>>0],Ea:v?I(v):\"\"};e=I(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in v)e=e.replace(new RegExp(r,\"g\"),v[r]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return va[d.ka].substring(0,3)},\"%A\":function(d){return va[d.ka]},\"%b\":function(d){return wa[d.ta].substring(0,\r\n3)},\"%B\":function(d){return wa[d.ta]},\"%C\":function(d){return h((d.qa+1900)/100|0,2)},\"%d\":function(d){return h(d.ua,2)},\"%e\":function(d){return g(d.ua,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.sa,2)},\"%I\":function(d){d=d.sa;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.ta-1;m+=(Y(d.qa+1900)?Ba:Ca)[n++]);return h(d.ua+m,3)},\"%m\":function(d){return h(d.ta+1,2)},\"%M\":function(d){return h(d.Ca,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.sa&&12>d.sa?\"AM\":\"PM\"},\"%S\":function(d){return h(d.Da,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ka||7},\"%U\":function(d){return h(Math.floor((d.pa+7-d.ka)/7),2)},\"%V\":function(d){var m=Math.floor((d.pa+7-(d.ka+6)%7)/7);2>=(d.ka+371-d.pa-2)%7&&m++;if(m)53==m&&(n=(d.ka+371-d.pa)%7,4==n||3==n&&Y(d.qa)||(m=1));else{m=52;var n=(d.ka+7-d.pa-1)%7;(4==n||5==n&&Y(d.qa%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.ka},\"%W\":function(d){return h(Math.floor((d.pa+\r\n7-(d.ka+6)%7)/7),2)},\"%y\":function(d){return(d.qa+1900).toString().substring(2)},\"%Y\":function(d){return d.qa+1900},\"%z\":function(d){d=d.Ba;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ea},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(r in v)e.includes(r)&&(e=e.replace(new RegExp(r,\"g\"),v[r](f)));e=e.replace(/\\0\\0/g,\"%\");r=Da(e);if(r.length>c)return 0;M.set(r,a>>>0);return r.length-1}\r\nvar Fa={a:function(a){return U(a+24)+24},b:function(a,c,e){(new sa(a)).wa(c,e);ta++;throw a;},g:function(){return 0},J:function(){},w:function(){},z:function(){},s:function(){return 0},H:function(){},C:function(){},G:function(){},k:function(){},y:function(){},u:function(){},I:function(){},v:function(){},o:function(){},q:function(){G(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},p:function(){G(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nl:function(){return Date.now()},K:function(){return!0},L:function(a,c){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[c>>2>>>0]=a.getUTCSeconds();N[c+4>>2>>>0]=a.getUTCMinutes();N[c+8>>2>>>0]=a.getUTCHours();N[c+12>>2>>>0]=a.getUTCDate();N[c+16>>2>>>0]=a.getUTCMonth();N[c+20>>2>>>0]=a.getUTCFullYear()-1900;N[c+24>>2>>>0]=a.getUTCDay();N[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},M:function(a,c){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[c>>2>>>0]=a.getSeconds();\r\nN[c+4>>2>>>0]=a.getMinutes();N[c+8>>2>>>0]=a.getHours();N[c+12>>2>>>0]=a.getDate();N[c+16>>2>>>0]=a.getMonth();N[c+20>>2>>>0]=a.getFullYear()-1900;N[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;N[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();N[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},m:function(a){var c=new Date(N[a+20>>2>>>0]+1900,N[a+16>>\r\n2>>>0],N[a+12>>2>>>0],N[a+8>>2>>>0],N[a+4>>2>>>0],N[a>>2>>>0],0),e=N[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),q=Math.min(l,h);0>e?N[a+32>>2>>>0]=Number(h!=l&&q==f):0<e!=(q==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?q:h)-f)));N[a+24>>2>>>0]=c.getDay();N[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;N[a>>2>>>0]=c.getSeconds();N[a+4>>2>>>0]=c.getMinutes();N[a+8>>2>>>0]=c.getHours();N[a+\r\n12>>2>>>0]=c.getDate();N[a+16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},A:function(){return-52},B:function(){},n:V,d:function(){G(\"\")},t:function(){return 4294901760},h:u?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),F:function(a,c,e){J.copyWithin(a>>>0,c>>>0,c+e>>>0)},f:function(a){var c=J.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%\r\n65536);a:{try{H.grow(g-ia.byteLength+65535>>>16);ja();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},D:function(a,c){var e=0;za().forEach(function(f,g){var h=c+e;g=O[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)M[g++>>0>>>0]=f.charCodeAt(h);M[g>>0>>>0]=0;e+=f.length+1});return 0},E:function(a,c){var e=za();O[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});O[c>>2>>>0]=f;return 0},e:function(){return 52},j:function(){return 52},r:function(){return 70},i:function(a,c,e,f){for(var g=\r\n0,h=0;h<e;h++){var l=O[c>>2>>>0],q=O[c+4>>2>>>0];c+=8;for(var w=0;w<q;w++){var v=J[l+w>>>0],r=Aa[a];0===v||10===v?((1===a?da:E)(ha(r,0)),r.length=0):r.push(v)}g+=q}O[f>>2>>>0]=g;return 0},x:Ea,c:function(a,c,e,f){return Ea(a,c,e,f)}};\r\n(function(){function a(g){b.asm=g.exports;H=b.asm.N;ja();la.unshift(b.asm.O);P--;b.monitorRunDependencies&&b.monitorRunDependencies(P);0==P&&(null!==Q&&(clearInterval(Q),Q=null),R&&(g=R,R=null,g()))}function c(g){a(g.instance)}function e(g){return ra().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){E(\"failed to asynchronously prepare wasm: \"+h);G(h)})}var f={a:Fa};P++;b.monitorRunDependencies&&b.monitorRunDependencies(P);if(b.instantiateWasm)try{return b.instantiateWasm(f,\r\na)}catch(g){return E(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return F||\"function\"!=typeof WebAssembly.instantiateStreaming||oa()||S.startsWith(\"file://\")||u||\"function\"!=typeof fetch?e(c):fetch(S,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){E(\"wasm streaming compile failed: \"+h);E(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(k);return{}})();\r\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.O).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.P).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.Q).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.R).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.S).apply(null,arguments)};\r\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.T).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.U).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.V).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.W).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.X).apply(null,arguments)};\r\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm.Y).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.Z).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm._).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.$).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm.aa).apply(null,arguments)};\r\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.ba).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.ca).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.da).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ea).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.fa).apply(null,arguments)};\r\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ga).apply(null,arguments)};var U=b._malloc=function(){return(U=b._malloc=b.asm.ha).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ia).apply(null,arguments)};b._fflush=function(){return(b._fflush=b.asm.ja).apply(null,arguments)};\r\nvar Ga=b.stackSave=function(){return(Ga=b.stackSave=b.asm.la).apply(null,arguments)},Ha=b.stackRestore=function(){return(Ha=b.stackRestore=b.asm.ma).apply(null,arguments)},Ia=b.stackAlloc=function(){return(Ia=b.stackAlloc=b.asm.na).apply(null,arguments)};b.___cxa_is_pointer_type=function(){return(b.___cxa_is_pointer_type=b.asm.oa).apply(null,arguments)};b.UTF8ToString=I;b.stringToUTF8=function(a,c,e){return K(a,J,c,e)};b.lengthBytesUTF8=L;b.stackSave=Ga;b.stackRestore=Ha;b.stackAlloc=Ia;var Z;\r\nR=function Ja(){Z||Ka();Z||(R=Ja)};\r\nfunction Ka(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!ea)){T(la);aa(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();ma.unshift(c)}T(ma)}}if(!(0<P)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)na();T(ka);0<P||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\r\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ka();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    roiInputIdx = 1;\n    scalesInputIdx = 2;\n    sizesInputIdx = 3;\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n      const modelDataOffset = wasm._malloc(model.byteLength);\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        wasm.HEAPU8.set(model, modelDataOffset);\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelDataOffset);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.13.1\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={474:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return C.buffer!=D&&G(C.buffer),F}function r(){return C.buffer!=D&&G(C.buffer),U}function a(){return C.buffer!=D&&G(C.buffer),I}function o(){return C.buffer!=D&&G(C.buffer),L}function i(){return C.buffer!=D&&G(C.buffer),W}var u,s,c;e=e||{},u||(u=void 0!==e?e:{}),u.ready=new Promise((function(e,t){s=e,c=t}));var l,f,p,d,h,m,g=Object.assign({},u),y=\\\"./this.program\\\",v=(e,t)=>{throw t},b=\\\"object\\\"==typeof window,_=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function A(e){return u.locateFile?u.locateFile(e,S):S+e}if(w){let t;S=_?n(908).dirname(S)+\\\"/\\\":\\\"//\\\",m=()=>{h||(d=n(384),h=n(908))},l=function(e,t){return m(),e=h.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{m(),e=h.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof se))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(J())throw process.exitCode=e,t;t instanceof se||R(\\\"exiting due to exception: \\\"+t),process.exit(e)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(b||_)&&(_?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},_&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);w&&(m(),T=e=>d.writeSync(1,e+\\\"\\\\n\\\"),E=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,x=u.print||T,R=u.printErr||E;Object.assign(u,g),g=null,u.thisProgram&&(y=u.thisProgram),u.quit&&(v=u.quit),u.wasmBinary&&(M=u.wasmBinary);var k=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&ae(\\\"no native wasm support detected\\\");var C,P,D,F,U,I,L,W,H=!1,j=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&j)return j.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\\\"\\\"}function N(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function B(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,u.HEAP8=F=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=I=new Int32Array(e),u.HEAPU8=U=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=L=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=W=new Float64Array(e)}O&&(D=u.buffer);var q=u.INITIAL_MEMORY||16777216;if(O)C=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)C=u.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");C&&(D=C.buffer),q=D.byteLength,G(D);var V,Q=[],X=[],K=[],Z=[];function J(){return k||!1}function $(){var e=u.preRun.shift();Q.unshift(e)}var ee,te=0,ne=null,re=null;function ae(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):u.onAbort&&u.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function oe(){return ee.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ie(){var e=ee;try{if(e==ee&&M)return new Uint8Array(M);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ae(e)}}ee=\\\"ort-wasm-threaded.wasm\\\",oe()||(ee=A(ee));var ue={};function se(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ce(e){(e=de.Ma[e])||ae(),de.Xa(e)}function le(e){var t=de.mb();if(!t)return 6;de.Sa.push(t),de.Ma[e.La]=t,t.La=e.La;var n={cmd:\\\"run\\\",start_routine:e.qb,arg:e.jb,pthread_ptr:e.La};return t.Ra=()=>{n.time=performance.now(),t.postMessage(n,e.vb)},t.loaded&&(t.Ra(),delete t.Ra),0}function fe(e){if(O)return ze(1,1,e);J()||(de.Za(),u.onExit&&u.onExit(e),H=!0),v(e,new se(e))}function pe(e,t){if(!t&&O)throw ge(e),\\\"unwind\\\";J()||O||(lt(),he(K),ct(0),Je[1].length&&$e(1,10),Je[2].length&&$e(2,10),de.Za()),fe(e)}var de={Pa:[],Sa:[],ab:[],Ma:{},Va:function(){O&&de.nb()},xb:function(){},nb:function(){de.receiveObjectTransfer=de.pb,de.threadInitTLS=de.$a,de.setExitStatus=de.Ya,k=!1},Ya:function(){},Za:function(){for(var e of Object.values(de.Ma))de.Xa(e);for(e of de.Pa)e.terminate();de.Pa=[]},Xa:function(e){var t=e.La;delete de.Ma[t],de.Pa.push(e),de.Sa.splice(de.Sa.indexOf(e),1),e.La=0,mt(t)},pb:function(){},$a:function(){de.ab.forEach((e=>e()))},ob:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.La&&(de.lb=e.La),n.targetThread&&n.targetThread!=ut()){var a=de.Ma[n.yb];a?a.postMessage(n,n.transferList):R('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?Ie(n.queue):\\\"spawnThread\\\"===r?le(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=de.Ma[n],delete de.Ma[n],r.terminate(),mt(n),de.Sa.splice(de.Sa.indexOf(r),1),r.La=0):\\\"cancelThread\\\"===r?de.Ma[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Ra&&(e.Ra(),delete e.Ra)):\\\"print\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?u.onAbort&&u.onAbort(n.arg):r&&R(\\\"worker sent an unknown command \\\"+r);de.lb=void 0},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:P})},ib:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");de.Pa.push(new Worker(e))},mb:function(){return 0==de.Pa.length&&(de.ib(),de.ob(de.Pa[0])),de.Pa.pop()}};function he(e){for(;0<e.length;)e.shift()(u)}function me(e){var t=vt();return e=e(),bt(t),e}function ge(e){if(O)return ze(2,0,e);try{pe(e)}catch(e){e instanceof se||\\\"unwind\\\"==e||v(1,e)}}u.PThread=de,u.establishStackSpace=function(){var e=ut(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],yt(t,t-e),bt(t)};var ye,ve,be=[];function _e(e){this.Qa=e-24,this.hb=function(e){o()[this.Qa+4>>2>>>0]=e},this.eb=function(e){o()[this.Qa+8>>2>>>0]=e},this.fb=function(){a()[this.Qa>>2>>>0]=0},this.cb=function(){t()[this.Qa+12>>0>>>0]=0},this.gb=function(){t()[this.Qa+13>>0>>>0]=0},this.Va=function(e,t){this.bb(),this.hb(e),this.eb(t),this.fb(),this.cb(),this.gb()},this.bb=function(){o()[this.Qa+16>>2>>>0]=0}}function we(e,t,n,r){return O?ze(3,1,e,t,n,r):Oe(e,t,n,r)}function Oe(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?we(e,t,n,r):(e={qb:n,La:e,jb:r,vb:a},O?(e.wb=\\\"spawnThread\\\",postMessage(e,a),0):le(e))}function Se(e,t,n){return O?ze(4,1,e,t,n):0}function Ae(e,t){if(O)return ze(5,1,e,t)}function Te(e,t){if(O)return ze(6,1,e,t)}function Ee(e,t,n){if(O)return ze(7,1,e,t,n)}function Me(e,t,n){return O?ze(8,1,e,t,n):0}function xe(e,t){if(O)return ze(9,1,e,t)}function Re(e,t,n){if(O)return ze(10,1,e,t,n)}function ke(e,t,n,r){if(O)return ze(11,1,e,t,n,r)}function Ce(e,t,n,r){if(O)return ze(12,1,e,t,n,r)}function Pe(e,t,n,r){if(O)return ze(13,1,e,t,n,r)}function De(e){if(O)return ze(14,1,e)}function Fe(e,t){if(O)return ze(15,1,e,t)}function Ue(e,t,n){if(O)return ze(16,1,e,t,n)}function Ie(e){Atomics.store(a(),e>>2,1),ut()&&ht(e),Atomics.compareExchange(a(),e>>2,1,0)}function Le(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function We(e,t,n,r,a,o){return O?ze(17,1,e,t,n,r,a,o):-52}function He(e,t,n,r,a,o){if(O)return ze(18,1,e,t,n,r,a,o)}function je(e){var n=B(e)+1,r=st(n);return r&&N(e,t(),r,n),r}function Ye(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return ze(19,1,e,t,n);var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var c=s.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(u),t=r(s),e=je(e),t=je(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function ze(e,t){var n=arguments.length-2,r=arguments;return me((()=>{for(var a=_t(8*n),o=a>>3,u=0;u<n;u++){var s=r[2+u];i()[o+u>>>0]=s}return dt(e,n,a,t)}))}u.invokeEntryPoint=function(e,t){var n=be[e];n||(e>=be.length&&(be.length=e+1),be[e]=n=V.get(e)),e=n(t),J()?de.Ya(e):gt(e)},u.executeNotifiedProxyingQueue=Ie,ve=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var Ne,Be=[],Ge={};function qe(){if(!Ne){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Ge)void 0===Ge[e]?delete t[e]:t[e]=Ge[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Ne=n}return Ne}function Ve(e,n){if(O)return ze(20,1,e,n);var r=0;return qe().forEach((function(a,i){var u=n+r;for(i=o()[e+4*i>>2>>>0]=u,u=0;u<a.length;++u)t()[i++>>0>>>0]=a.charCodeAt(u);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Qe(e,t){if(O)return ze(21,1,e,t);var n=qe();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function Xe(e){return O?ze(22,1,e):52}function Ke(e,t,n,r){return O?ze(23,1,e,t,n,r):52}function Ze(e,t,n,r,a){return O?ze(24,1,e,t,n,r,a):70}var Je=[null,[],[]];function $e(e,t){var n=Je[e];0===t||10===t?((1===e?x:R)(Y(n,0)),n.length=0):n.push(t)}function et(e,t,n,a){if(O)return ze(25,1,e,t,n,a);for(var i=0,u=0;u<n;u++){var s=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++)$e(e,r()[s+l>>>0]);i+=c}return o()[a>>2>>>0]=i,0}function tt(e){return 0==e%4&&(0!=e%100||0==e%400)}var nt=[31,29,31,30,31,30,31,31,30,31,30,31],rt=[31,28,31,30,31,30,31,31,30,31,30,31];function at(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function u(e,t){return i(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(tt(e.getFullYear())?nt:rt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={tb:a()[o>>2>>>0],sb:a()[o+4>>2>>>0],Ta:a()[o+8>>2>>>0],Wa:a()[o+12>>2>>>0],Ua:a()[o+16>>2>>>0],Oa:a()[o+20>>2>>>0],Ka:a()[o+24>>2>>>0],Na:a()[o+28>>2>>>0],zb:a()[o+32>>2>>>0],rb:a()[o+36>>2>>>0],ub:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),h=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ka].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ka]},\\\"%b\\\":function(e){return h[e.Ua].substring(0,3)},\\\"%B\\\":function(e){return h[e.Ua]},\\\"%C\\\":function(e){return u((e.Oa+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.Wa,2)},\\\"%e\\\":function(e){return i(e.Wa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return u(e.Ta,2)},\\\"%I\\\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Ua-1;t+=(tt(e.Oa+1900)?nt:rt)[n++]);return u(e.Wa+t,3)},\\\"%m\\\":function(e){return u(e.Ua+1,2)},\\\"%M\\\":function(e){return u(e.sb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ta&&12>e.Ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.tb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ka||7},\\\"%U\\\":function(e){return u(Math.floor((e.Na+7-e.Ka)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Na+7-(e.Ka+6)%7)/7);if(2>=(e.Ka+371-e.Na-2)%7&&t++,t)53==t&&(4==(n=(e.Ka+371-e.Na)%7)||3==n&&tt(e.Oa)||(t=1));else{t=52;var n=(e.Ka+7-e.Na-1)%7;(4==n||5==n&&tt(e.Oa%400-1))&&t++}return u(t,2)},\\\"%w\\\":function(e){return e.Ka},\\\"%W\\\":function(e){return u(Math.floor((e.Na+7-(e.Ka+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Oa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.rb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.ub},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(B(e)+1);return N(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}de.Va();var ot=[null,fe,ge,we,Se,Ae,Te,Ee,Me,xe,Re,ke,Ce,Pe,De,Fe,Ue,We,He,Ye,Ve,Qe,Xe,Ke,Ze,et],it={b:function(e){return st(e+24)+24},c:function(e,t,n){throw new _e(e).Va(t,n),e},L:function(e){ft(e,!_,1,!b),de.$a()},m:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},D:Oe,i:Se,S:Ae,y:Te,B:Ee,t:Me,Q:xe,I:Re,P:ke,o:Ce,z:Pe,w:De,R:Fe,x:Ue,q:function(){},j:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},r:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},p:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>Ie(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=de.Ma[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},V:function(e,t){e=new Date(1e3*Le(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},W:function(e,t){e=new Date(1e3*Le(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},X:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=u&&s==r):0<n!=(s==r)&&(i=Math.max(u,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:We,H:He,Y:function e(t,n,r){e.kb||(e.kb=!0,Ye(t,n,r))},d:function(){ae(\\\"\\\")},n:function(){if(!w&&!_){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";ye||(ye={}),ye[e]||(ye[e]=1,w&&(e=\\\"warning: \\\"+e),R(e))}},v:function(){return 4294901760},f:ve,O:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},g:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Be.length=t,n>>=3;for(var r=0;r<t;r++)Be[r]=i()[n+r>>>0];return(0>e?ue[-e-1]:ot[e]).apply(null,Be)},u:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{C.grow(o-D.byteLength+65535>>>16),G(C.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\\\"unwind\\\"},M:Ve,N:Qe,C:pe,h:Xe,l:Ke,s:Ze,k:et,a:C||u.wasmMemory,A:at,e:function(e,t,n,r){return at(e,t,n,r)}};!function(){function e(e,t){u.asm=e.exports,de.ab.push(u.asm.wa),V=u.asm.ya,X.unshift(u.asm.Z),P=t,O||(te--,u.monitorRunDependencies&&u.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),re&&(e=re,re=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(b||_)){if(\\\"function\\\"==typeof fetch&&!ee.startsWith(\\\"file://\\\"))return fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+ee+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ie()}));if(f)return new Promise((function(e,t){f(ee,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ie()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){R(\\\"failed to asynchronously prepare wasm: \\\"+e),ae(e)}))}var r={a:it};if(O||(te++,u.monitorRunDependencies&&u.monitorRunDependencies(te)),u.instantiateWasm)try{return u.instantiateWasm(r,e)}catch(e){return R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||oe()||ee.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?n(t):fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return R(\\\"wasm streaming compile failed: \\\"+e),R(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Z).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm._).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.$).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.aa).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.ba).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.ca).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.da).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ea).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.fa).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.ga).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.ha).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.ia).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ja).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.ka).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.la).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ma).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.na).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.oa).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.pa).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.qa).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.ra).apply(null,arguments)};var ut=u._pthread_self=function(){return(ut=u._pthread_self=u.asm.sa).apply(null,arguments)},st=u._malloc=function(){return(st=u._malloc=u.asm.ta).apply(null,arguments)};u._free=function(){return(u._free=u.asm.ua).apply(null,arguments)};var ct=u._fflush=function(){return(ct=u._fflush=u.asm.va).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.wa).apply(null,arguments)};var lt=u.___funcs_on_exit=function(){return(lt=u.___funcs_on_exit=u.asm.xa).apply(null,arguments)},ft=u.__emscripten_thread_init=function(){return(ft=u.__emscripten_thread_init=u.asm.za).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.Aa).apply(null,arguments)};var pt,dt=u._emscripten_run_in_main_runtime_thread_js=function(){return(dt=u._emscripten_run_in_main_runtime_thread_js=u.asm.Ba).apply(null,arguments)},ht=u.__emscripten_proxy_execute_task_queue=function(){return(ht=u.__emscripten_proxy_execute_task_queue=u.asm.Ca).apply(null,arguments)},mt=u.__emscripten_thread_free_data=function(){return(mt=u.__emscripten_thread_free_data=u.asm.Da).apply(null,arguments)},gt=u.__emscripten_thread_exit=function(){return(gt=u.__emscripten_thread_exit=u.asm.Ea).apply(null,arguments)},yt=u._emscripten_stack_set_limits=function(){return(yt=u._emscripten_stack_set_limits=u.asm.Fa).apply(null,arguments)},vt=u.stackSave=function(){return(vt=u.stackSave=u.asm.Ga).apply(null,arguments)},bt=u.stackRestore=function(){return(bt=u.stackRestore=u.asm.Ha).apply(null,arguments)},_t=u.stackAlloc=function(){return(_t=u.stackAlloc=u.asm.Ia).apply(null,arguments)};function wt(){function e(){if(!pt&&(pt=!0,u.calledRun=!0,!H)&&(O||he(X),s(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();Z.unshift(e)}he(Z)}}if(!(0<te))if(O)s(u),O||he(X),postMessage({cmd:\\\"loaded\\\"});else{if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)$();he(Q),0<te||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(u.___cxa_is_pointer_type=function(){return(u.___cxa_is_pointer_type=u.asm.Ja).apply(null,arguments)},u.UTF8ToString=z,u.stringToUTF8=function(e,t,n){return N(e,r(),t,n)},u.lengthBytesUTF8=B,u.keepRuntimeAlive=J,u.wasmMemory=C,u.stackSave=vt,u.stackRestore=bt,u.stackAlloc=_t,u.ExitStatus=se,u.PThread=de,re=function e(){pt||wt(),pt||(re=e)},u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return wt(),e.ready});e.exports=r},118:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},932:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,u,s,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,h=\\\"function\\\"==typeof importScripts,m=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,g=\\\"\\\";m?(g=h?n(908).dirname(g)+\\\"/\\\":\\\"//\\\",l=()=>{c||(s=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),s.readFileSync(e,t?void 0:\\\"utf8\\\")},u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),s.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||h)&&(h?g=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(g=document.currentScript.src),_scriptDir&&(g=_scriptDir),g=0!==g.indexOf(\\\"blob:\\\")?g.substr(0,g.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},h&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,v=t.print||console.log.bind(console),b=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(y=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var _,w,O,S,A,T,E=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function x(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function R(e,t){return(e>>>=0)?x(S,e,t):\\\"\\\"}function k(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function C(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function P(){var e=_.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=T=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var D=[],F=[],U=[];function I(){var e=t.preRun.shift();D.unshift(e)}var L,W=0,H=null,j=null;function Y(e){throw t.onAbort&&t.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function z(){return L.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(L=\\\"ort-wasm.wasm\\\",!z()){var N=L;L=t.locateFile?t.locateFile(N,g):g+N}function B(){var e=L;try{if(e==L&&y)return new Uint8Array(y);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){Y(e)}}function G(e){for(;0<e.length;)e.shift()(t)}function q(e){this.ra=e-24,this.Ga=function(e){T[this.ra+4>>2>>>0]=e},this.za=function(e){T[this.ra+8>>2>>>0]=e},this.Aa=function(){A[this.ra>>2>>>0]=0},this.ya=function(){O[this.ra+12>>0>>>0]=0},this.Fa=function(){O[this.ra+13>>0>>>0]=0},this.wa=function(e,t){this.xa(),this.Ga(e),this.za(t),this.Aa(),this.ya(),this.Fa()},this.xa=function(){T[this.ra+16>>2>>>0]=0}}function V(e){var t=C(e)+1,n=re(t);return n&&k(e,O,n,t),n}var Q={};function X(){if(!K){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in Q)void 0===Q[e]?delete t[e]:t[e]=Q[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);K=n}return K}var K,Z=[null,[],[]];function J(e){return 0==e%4&&(0!=e%100||0==e%400)}var $=[31,29,31,30,31,30,31,31,30,31,30,31],ee=[31,28,31,30,31,30,31,31,30,31,30,31];function te(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.pa;for(e=new Date(new Date(e.qa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(J(e.getFullYear())?$:ee)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[r+40>>2>>>0];for(var l in r={Da:A[r>>2>>>0],Ca:A[r+4>>2>>>0],sa:A[r+8>>2>>>0],ua:A[r+12>>2>>>0],ta:A[r+16>>2>>>0],qa:A[r+20>>2>>>0],ka:A[r+24>>2>>>0],pa:A[r+28>>2>>>0],Ha:A[r+32>>2>>>0],Ba:A[r+36>>2>>>0],Ea:c?R(c):\\\"\\\"},n=R(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ka].substring(0,3)},\\\"%A\\\":function(e){return f[e.ka]},\\\"%b\\\":function(e){return p[e.ta].substring(0,3)},\\\"%B\\\":function(e){return p[e.ta]},\\\"%C\\\":function(e){return o((e.qa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.ua,2)},\\\"%e\\\":function(e){return a(e.ua,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.sa,2)},\\\"%I\\\":function(e){return 0==(e=e.sa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.ta-1;t+=(J(e.qa+1900)?$:ee)[n++]);return o(e.ua+t,3)},\\\"%m\\\":function(e){return o(e.ta+1,2)},\\\"%M\\\":function(e){return o(e.Ca,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.sa&&12>e.sa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Da,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ka||7},\\\"%U\\\":function(e){return o(Math.floor((e.pa+7-e.ka)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.pa+7-(e.ka+6)%7)/7);if(2>=(e.ka+371-e.pa-2)%7&&t++,t)53==t&&(4==(n=(e.ka+371-e.pa)%7)||3==n&&J(e.qa)||(t=1));else{t=52;var n=(e.ka+7-e.pa-1)%7;(4==n||5==n&&J(e.qa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ka},\\\"%W\\\":function(e){return o(Math.floor((e.pa+7-(e.ka+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.qa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.qa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ba);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ea},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(C(e)+1);return k(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(O.set(l,e>>>0),l.length-1)}var ne={a:function(e){return re(e+24)+24},b:function(e,t,n){throw new q(e).wa(t,n),e},g:function(){return 0},J:function(){},w:function(){},z:function(){},s:function(){return 0},H:function(){},C:function(){},G:function(){},k:function(){},y:function(){},u:function(){},I:function(){},v:function(){},o:function(){},q:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},p:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},K:function(){return!0},L:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},M:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);A[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},m:function(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),u=Math.min(i,o);return 0>n?A[e+32>>2>>>0]=Number(o!=i&&u==r):0<n!=(u==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?u:o)-r))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},A:function(){return-52},B:function(){},n:function e(t,n,r){e.va||(e.va=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();A[e>>2>>>0]=60*Math.max(a,u),A[t>>2>>>0]=Number(a!=u),e=r(o),t=r(i),e=V(e),t=V(t),u<a?(T[n>>2>>>0]=e,T[n+4>>2>>>0]=t):(T[n>>2>>>0]=t,T[n+4>>2>>>0]=e)}(t,n,r))},d:function(){Y(\\\"\\\")},t:function(){return 4294901760},h:m?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),F:function(e,t,n){S.copyWithin(e>>>0,t>>>0,t+n>>>0)},f:function(e){var t=S.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{_.grow(a-w.byteLength+65535>>>16),P();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){var n=0;return X().forEach((function(r,a){var o=t+n;for(a=T[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)O[a++>>0>>>0]=r.charCodeAt(o);O[a>>0>>>0]=0,n+=r.length+1})),0},E:function(e,t){var n=X();T[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),T[t>>2>>>0]=r,0},e:function(){return 52},j:function(){return 52},r:function(){return 70},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=T[t>>2>>>0],u=T[t+4>>2>>>0];t+=8;for(var s=0;s<u;s++){var c=S[i+s>>>0],l=Z[e];0===c||10===c?((1===e?v:b)(x(l,0)),l.length=0):l.push(c)}a+=u}return T[r>>2>>>0]=a,0},x:te,c:function(e,t,n,r){return te(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,_=t.asm.N,P(),F.unshift(t.asm.O),W--,t.monitorRunDependencies&&t.monitorRunDependencies(W),0==W&&(null!==H&&(clearInterval(H),H=null),j&&(e=j,j=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!y&&(d||h)){if(\\\"function\\\"==typeof fetch&&!L.startsWith(\\\"file://\\\"))return fetch(L,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+L+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return B()}));if(i)return new Promise((function(e,t){i(L,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return B()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){b(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var o={a:ne};if(W++,t.monitorRunDependencies&&t.monitorRunDependencies(W),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z()||L.startsWith(\\\"file://\\\")||m||\\\"function\\\"!=typeof fetch?r(n):fetch(L,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return b(\\\"wasm streaming compile failed: \\\"+e),b(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.O).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.P).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.Q).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.R).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.S).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.T).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.U).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.V).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.W).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.X).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.Y).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.Z).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm._).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.$).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.aa).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.ba).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ca).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.da).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ea).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.fa).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ga).apply(null,arguments)};var re=t._malloc=function(){return(re=t._malloc=t.asm.ha).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ia).apply(null,arguments)},t._fflush=function(){return(t._fflush=t.asm.ja).apply(null,arguments)};var ae,oe=t.stackSave=function(){return(oe=t.stackSave=t.asm.la).apply(null,arguments)},ie=t.stackRestore=function(){return(ie=t.stackRestore=t.asm.ma).apply(null,arguments)},ue=t.stackAlloc=function(){return(ue=t.stackAlloc=t.asm.na).apply(null,arguments)};function se(){function e(){if(!ae&&(ae=!0,t.calledRun=!0,!E)){if(G(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();U.unshift(e)}G(U)}}if(!(0<W)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)I();G(D),0<W||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.___cxa_is_pointer_type=function(){return(t.___cxa_is_pointer_type=t.asm.oa).apply(null,arguments)},t.UTF8ToString=R,t.stringToUTF8=function(e,t,n){return k(e,S,t,n)},t.lengthBytesUTF8=C,t.stackSave=oe,t.stackRestore=ie,t.stackAlloc=ue,j=function e(){ae||se(),ae||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return se(),e.ready});e.exports=r},967:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=function(e,r,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=n(e,2),u=i[0],s=i[1],c=r?r+u:u;if(\\\"object\\\"==typeof s)t.iterateExtraOptions(s,c+\\\".\\\",a,o);else if(\\\"string\\\"==typeof s||\\\"number\\\"==typeof s)o(c,s.toString());else{if(\\\"boolean\\\"!=typeof s)throw new Error(\\\"Can't handle extra config type: \\\"+typeof s);o(c,s?\\\"1\\\":\\\"0\\\")}}))}},586:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(967),a=n(983),o=n(361);t.setRunOptions=function(e){var t=o.getInstance(),n=0,i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);var s=0;if(void 0!==(null==e?void 0:e.tag)&&(s=a.allocWasmString(e.tag,i)),0===(n=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,s)))throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var o=a.allocWasmString(e,i),u=a.allocWasmString(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,u))throw new Error(\\\"Can't set a run config entry: \\\"+e+\\\" - \\\"+r)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var a=n(967),o=n(983),i=n(361);t.setSessionOptions=function(e){var t=i.getInstance(),n=0,u=[],s=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")}(s);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(s.graphOptimizationLevel=\\\"all\\\");var c=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\"+e)}}(s.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(s.executionMode=\\\"sequential\\\");var l=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\"+e)}}(s.executionMode),f=0;if(void 0!==(null==e?void 0:e.logId)&&(f=o.allocWasmString(e.logId,u)),void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);if(void 0===(null==e?void 0:e.enableProfiling)&&(s.enableProfiling=!1),0===(n=t._OrtCreateSessionOptions(c,!!s.enableCpuMemArena,!!s.enableMemPattern,l,!!s.enableProfiling,0,f,s.logSeverityLevel,s.logVerbosityLevel)))throw new Error(\\\"Can't create session options\\\");return(null==e?void 0:e.executionProviders)&&function(e,t,n){var a,u;try{for(var s=r(t),c=s.next();!c.done;c=s.next()){var l=c.value,f=\\\"string\\\"==typeof l?l:l.name;switch(f){case\\\"xnnpack\\\":f=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported EP: \\\"+f)}var p=o.allocWasmString(f,n);if(0!==i.getInstance()._OrtAppendExecutionProvider(e,p))throw new Error(\\\"Can't append execution provider: \\\"+f)}}catch(e){a={error:e}}finally{try{c&&!c.done&&(u=s.return)&&u.call(s)}finally{if(a)throw a.error}}}(n,e.executionProviders,u),void 0!==(null==e?void 0:e.extra)&&a.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var a=o.allocWasmString(e,u),i=o.allocWasmString(r,u);if(0!==t._OrtAddSessionConfigEntry(n,a,i))throw new Error(\\\"Can't set a session config entry: \\\"+e+\\\" - \\\"+r)})),[n,u]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),u.forEach(t._free),e}}},983:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;var r=n(361);t.allocWasmString=function(e,t){var n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;var o=n(586),i=n(919),u=n(983),s=n(361);t.initOrt=function(e,t){var n=s.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(\\\"Can't initialize onnxruntime. error code = \\\"+n)};var c=new Map;t.createSession=function(e,t){var n,a=s.getInstance(),o=a._malloc(e.byteLength),u=0,l=0,f=[];try{if(l=(n=r(i.setSessionOptions(t),2))[0],f=n[1],a.HEAPU8.set(e,o),0===(u=a._OrtCreateSession(o,e.byteLength,l)))throw new Error(\\\"Can't create a session\\\")}finally{a._free(o),a._OrtReleaseSessionOptions(l),f.forEach(a._free)}for(var p=a._OrtGetInputCount(u),d=a._OrtGetOutputCount(u),h=[],m=[],g=[],y=[],v=0;v<p;v++){var b=a._OrtGetInputName(u,v);if(0===b)throw new Error(\\\"Can't get an input name\\\");m.push(b),h.push(a.UTF8ToString(b))}for(v=0;v<d;v++){var _=a._OrtGetOutputName(u,v);if(0===_)throw new Error(\\\"Can't get an output name\\\");y.push(_),g.push(a.UTF8ToString(_))}return c.set(u,[u,m,y]),[u,h,g]},t.releaseSession=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),c.delete(e)};var l=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\"+e)}},f=function(e){switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\"+e)}};t.run=function(e,t,n,a,i){var p,d=s.getInstance(),h=c.get(e);if(!h)throw new Error(\\\"invalid session id\\\");var m=h[0],g=h[1],y=h[2],v=t.length,b=a.length,_=0,w=[],O=[],S=[];try{_=(p=r(o.setRunOptions(i),2))[0],w=p[1];for(var A=function(e){var t=n[e][0],r=n[e][1],a=n[e][2],o=void 0,i=void 0;if(Array.isArray(a)){i=4*a.length,o=d._malloc(i),S.push(o);for(var s=o/4,c=0;c<a.length;c++){if(\\\"string\\\"!=typeof a[c])throw new TypeError(\\\"tensor data at index \\\"+c+\\\" is not a string\\\");d.HEAPU32[s++]=u.allocWasmString(a[c],S)}}else i=a.byteLength,o=d._malloc(i),S.push(o),d.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,i),o);var l=d.stackSave(),f=d.stackAlloc(4*r.length);try{var p=f/4;r.forEach((function(e){return d.HEAP32[p++]=e}));var h=d._OrtCreateTensor(function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\"+e)}}(t),o,i,f,r.length);if(0===h)throw new Error(\\\"Can't create a tensor\\\");O.push(h)}finally{d.stackRestore(l)}},T=0;T<v;T++)A(T);var E=d.stackSave(),M=d.stackAlloc(4*v),x=d.stackAlloc(4*v),R=d.stackAlloc(4*b),k=d.stackAlloc(4*b);try{var C=M/4,P=x/4,D=R/4,F=k/4;for(T=0;T<v;T++)d.HEAPU32[C++]=O[T],d.HEAPU32[P++]=g[t[T]];for(T=0;T<b;T++)d.HEAPU32[D++]=0,d.HEAPU32[F++]=y[a[T]];var U=d._OrtRun(m,x,M,v,k,b,R,_),I=[];if(0===U)for(T=0;T<b;T++){var L=d.HEAPU32[R/4+T],W=d.stackSave(),H=d.stackAlloc(16),j=void 0,Y=0;try{if(0!==(U=d._OrtGetTensorData(L,H,H+4,H+8,H+12)))throw new Error(\\\"Can't access output tensor data. error code = \\\"+U);var z=H/4,N=d.HEAPU32[z++];Y=d.HEAPU32[z++];for(var B=d.HEAPU32[z++],G=d.HEAPU32[z++],q=[],V=0;V<G;V++)q.push(d.HEAPU32[B/4+V]);d._OrtFree(B);var Q=0===q.length?1:q.reduce((function(e,t){return e*t}));if(\\\"string\\\"===(j=l(N))){for(var X=[],K=Y/4,Z=0;Z<Q;Z++){var J=d.HEAPU32[K++],$=Z===Q-1?void 0:d.HEAPU32[K]-J;X.push(d.UTF8ToString(J,$))}I.push([j,q,X])}else{var ee=new(f(j))(Q);new Uint8Array(ee.buffer,ee.byteOffset,ee.byteLength).set(d.HEAPU8.subarray(Y,Y+ee.byteLength)),I.push([j,q,ee])}}finally{d.stackRestore(W),\\\"string\\\"===j&&Y&&d._free(Y),d._OrtReleaseTensor(L)}}if(0===U)return I;throw new Error(\\\"failed to call OrtRun(). error code = \\\"+U+\\\".\\\")}finally{d.stackRestore(E)}}finally{O.forEach(d._OrtReleaseTensor),S.forEach(d._free),d._OrtReleaseRunOptions(_),w.forEach(d._free)}},t.endProfiling=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var o=a(e),i=o.next();!i.done;i=o.next()){var u=i.value[2];!Array.isArray(u)&&u.buffer&&r.push(u.buffer)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return r}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}))},u=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var c,l=o(n(449)),f=s(n(932)),p=n(474),d=!1,h=!1,m=!1,g=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"};t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,s,y,v,b,_,w;return u(this,(function(u){switch(u.label){case 0:if(d)return[2,Promise.resolve()];if(h)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(m)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return h=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,y=g(!1,o),v=g(i,o),b=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[v]:void 0,_=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){_=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?p:f.default,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"})):e===y?null!=b?b:(null!=s?s:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=l.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\"+r.toString()+\\\"})();\\\";a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){h=!1,d=!0,c=t,e()}),(function(e){h=!1,m=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(u.sent(),_)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\"+t+\\\"ms\\\");return[2]}}))}))},t.getInstance=function(){if(d&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!d||h||m||(h=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,h=!1,d=!1,m=!0)}},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),function(){\\\"use strict\\\";var e=n(349),t=n(361);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}));break;case\\\"init-ort\\\":try{var r=n.data.in,a=r.numThreads,o=r.loggingLevel;e.initOrt(a,o),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{var i=n.data.in,u=i.model,s=i.options,c=e.createSession(u,s);postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var l=n.data.in;e.releaseSession(l),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var f=n.data.in,p=f.sessionId,d=f.inputIndices,h=f.inputs,m=f.outputIndices,g=(s=f.options,e.run(p,d,h,m,s));postMessage({type:\\\"run\\\",out:g},e.extractTransferableBuffers(g))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{l=n.data.in,e.endProfiling(l),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}