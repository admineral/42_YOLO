{"version":3,"sources":["webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/./node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/external \"fs\"","webpack://onnxruntime-web/external \"os\"","webpack://onnxruntime-web/external \"path\"","webpack://onnxruntime-web/external \"perf_hooks\"","webpack://onnxruntime-web/external \"util\"","webpack://onnxruntime-web/external \"worker_threads\"","webpack://onnxruntime-web/external {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"names":["_scriptDir","e","document","currentScript","src","__filename","n","k","buffer","C","G","F","t","P","r","I","a","U","u","Y","i","o","s","ready","Promise","f","c","l","p","m","d","h","Object","assign","g","_","y","window","b","importScripts","v","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","O","T","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","oe","Z","exitCode","x","exit","inspect","console","error","global","Worker","self","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","M","log","bind","S","warn","writeSync","A","R","print","printErr","thisProgram","quit","wasmBinary","E","noExitRuntime","WebAssembly","re","D","W","H","TextDecoder","N","decode","SharedArrayBuffer","subarray","String","fromCharCode","j","L","charCodeAt","q","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","z","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","B","K","Q","V","X","J","preRun","shift","unshift","$","ee","ne","te","postMessage","cmd","arg","onAbort","RuntimeError","ae","startsWith","ue","ie","this","name","message","se","pe","Ma","Xa","fe","mb","Sa","push","La","start_routine","qb","jb","pthread_ptr","Ra","time","now","vb","loaded","ce","je","Za","onExit","le","he","cn","me","fn","Ze","Je","Pa","ab","Va","nb","xb","receiveObjectTransfer","pb","threadInitTLS","$a","setExitStatus","Ya","values","terminate","splice","hn","forEach","ob","onmessage","data","lb","targetThread","yb","transferList","Ie","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","ib","pop","de","yn","bn","PThread","establishStackSpace","_n","ge","_e","ye","be","Qa","hb","eb","fb","cb","gb","bb","ve","we","wb","Oe","Te","Me","Se","Ae","Re","xe","Ee","ke","De","Ce","Fe","Pe","Atomics","store","dn","compareExchange","Ue","Ye","We","He","sn","Ne","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","Number","arguments","vn","mn","invokeEntryPoint","get","gn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Le","qe","Ge","ze","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Be","Ke","Qe","Ve","Xe","$e","en","nn","tn","rn","toString","getMonth","getDate","getDay","Na","Oa","getTime","setDate","setMonth","setFullYear","tb","sb","Ta","Wa","Ua","Ka","zb","rb","ub","RegExp","split","substring","floor","abs","includes","Array","set","an","un","ln","setTimeout","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","kb","copyWithin","hardwareConcurrency","apply","call","grow","asm","exports","wa","ya","monitorRunDependencies","clearInterval","instance","module","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","_OrtCreateSessionOptions","_OrtAppendExecutionProvider","aa","_OrtAddSessionConfigEntry","ba","_OrtReleaseSessionOptions","ca","_OrtCreateSession","da","_OrtReleaseSession","ea","_OrtGetInputCount","fa","_OrtGetOutputCount","ga","_OrtGetInputName","ha","_OrtGetOutputName","ia","_OrtFree","ja","_OrtCreateTensor","ka","_OrtGetTensorData","la","_OrtReleaseTensor","ma","_OrtCreateRunOptions","na","_OrtAddRunConfigEntry","oa","_OrtReleaseRunOptions","pa","_OrtRun","qa","_OrtEndProfiling","ra","_pthread_self","sa","_malloc","ta","_free","ua","_fflush","va","__emscripten_tls_init","___funcs_on_exit","xa","__emscripten_thread_init","za","__emscripten_thread_crashed","Aa","pn","_emscripten_run_in_main_runtime_thread_js","Ba","__emscripten_proxy_execute_task_queue","Ca","__emscripten_thread_free_data","Da","__emscripten_thread_exit","Ea","_emscripten_stack_set_limits","Fa","stackSave","Ga","stackRestore","Ha","stackAlloc","Ia","wn","calledRun","onRuntimeInitialized","postRun","setStatus","___cxa_is_pointer_type","Ja","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","undefined","fs","ctx","params","offset","index","pending","reject","err","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","factory","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","value","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","wasm","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","async","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","wasmBackend","initWasm","promisify","handler","OnnxruntimeWebAssemblySessionHandler","onnxjsBackend","registerBackend","AttributeWithCacheKeyImpl","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","static","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","root","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","decodeUint8","ArrayBuffer","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","inputSpatialShapeWithPad","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","OffscreenCanvas","createElement","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","__init","builder","numElems","startShape","addDim","endShape","DimensionValue","optionalEncoding","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","UNKNOWN","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","NONE","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","rawDataOffset","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","floatsLength","graphsLength","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","executionProviders","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","Symbol","toStringTag","__webpack_exports__"],"mappings":";;;;;8CAAA,IAAIA,WAAWC,GAAsID,YAAnIA,WAAW,oBAAoBE,UAAUA,SAASC,cAAcD,SAASC,cAAcC,SAAI,IAA+DC,WAAY,SAASJ,GAAG,SAASK,IAAI,OAAOC,EAAEC,QAAQC,GAAGC,EAAEH,EAAEC,QAAQG,CAAC,CAAC,SAASC,IAAI,OAAOL,EAAEC,QAAQC,GAAGC,EAAEH,EAAEC,QAAQK,CAAC,CAAC,SAASC,IAAI,OAAOP,EAAEC,QAAQC,GAAGC,EAAEH,EAAEC,QAAQO,CAAC,CAAC,SAASC,IAAI,OAAOT,EAAEC,QAAQC,GAAGC,EAAEH,EAAEC,QAAQS,CAAC,CAAC,SAASC,IAAI,OAAOX,EAAEC,QAAQC,GAAGC,EAAEH,EAAEC,QAAQW,CAAC,CAAC,IAAIC,EAAEC,EAAEC,EAAErB,EAAEA,GAAG,CAAC,EAAEmB,IAAIA,OAAE,IAASnB,EAAEA,EAAE,CAAC,GAAGmB,EAAEG,MAAM,IAAIC,SAAQ,SAAUvB,EAAEK,GAAGe,EAAEpB,EAAEqB,EAAEhB,CAAE,IAAG,IAAImB,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,OAAOC,OAAO,CAAC,EAAEb,GAAGc,EAAE,iBAAiBC,EAAE,CAAClC,EAAEK,KAAK,MAAMA,GAAG8B,EAAE,iBAAiBC,OAAOC,EAAE,mBAAmBC,cAAcC,EAAE,iBAAiBC,SAAS,iBAAiBA,QAAQC,UAAU,iBAAiBD,QAAQC,SAASC,KAAKC,EAAExB,EAAEyB,yBAAwB,EAAGC,EAAE,GAAG,SAASC,EAAE9C,GAAG,OAAOmB,EAAE4B,WAAW5B,EAAE4B,WAAW/C,EAAE6C,GAAGA,EAAE7C,CAAC,CAAC,GAAGuC,EAAE,CAAC,IAAIvC,EAAE6C,EAAER,EAAE,gBAAwBQ,GAAG,IAAIG,UAAU,IAAInB,EAAE,KAAKD,IAAID,EAAE,EAAQ,MAAMC,EAAE,EAAQ,MAAO,EAAGJ,EAAE,SAASxB,EAAEK,GAAG,OAAOwB,IAAI7B,EAAE4B,EAAEqB,UAAUjD,GAAG2B,EAAEuB,aAAalD,EAAEK,OAAE,EAAO,OAAO,EAAEqB,EAAE1B,KAAKA,EAAEwB,EAAExB,GAAE,IAAKO,SAASP,EAAE,IAAImD,WAAWnD,IAAIA,GAAGyB,EAAE,CAACzB,EAAEK,EAAEM,KAAKkB,IAAI7B,EAAE4B,EAAEqB,UAAUjD,GAAG2B,EAAEyB,SAASpD,GAAE,SAAUA,EAAEa,GAAGb,EAAEW,EAAEX,GAAGK,EAAEQ,EAAEN,OAAQ,GAAC,EAAG,EAAEiC,QAAQa,KAAKC,SAASrB,EAAEO,QAAQa,KAAK,GAAGE,QAAQ,MAAM,MAAMf,QAAQa,KAAKG,MAAM,GAAGhB,QAAQiB,GAAG,qBAAoB,SAAUzD,GAAG,KAAKA,aAAa0D,IAAI,MAAM1D,CAAE,IAAGwC,QAAQiB,GAAG,sBAAqB,SAAUzD,GAAG,MAAMA,CAAE,IAAGkC,EAAE,CAAClC,EAAEK,KAAK,GAAGsD,IAAI,MAAMnB,QAAQoB,SAAS5D,EAAEK,EAAEA,aAAaqD,IAAIG,EAAE,6BAA6BxD,GAAGmC,QAAQsB,KAAK9D,EAAC,EAAGmB,EAAE4C,QAAQ,WAAW,MAAM,4BAA4B,EAAE,IAAI/D,EAAE,EAAQ,KAA2J,CAAzI,MAAMA,GAAG,MAAMgE,QAAQC,MAAM,2GAA2GjE,CAAC,CAACkE,OAAOC,OAAOnE,EAAEmE,MAAM,MAAMhC,GAAGE,KAAKA,EAAEQ,EAAEuB,KAAKC,SAASC,KAAK,oBAAoBrE,UAAUA,SAASC,gBAAgB2C,EAAE5C,SAASC,cAAcC,KAAKJ,aAAa8C,EAAE9C,YAAY8C,EAAE,IAAIA,EAAE0B,QAAQ,SAAS1B,EAAE2B,OAAO,EAAE3B,EAAEU,QAAQ,SAAS,IAAIkB,YAAY,KAAK,GAAG,GAAGlC,IAAIf,EAAExB,IAAI,IAAIK,EAAE,IAAIqE,eAAe,OAAOrE,EAAEsE,KAAK,MAAM3E,GAAE,GAAIK,EAAEuE,KAAK,MAAMvE,EAAEwE,cAAcxC,IAAIX,EAAE1B,IAAI,IAAIK,EAAE,IAAIqE,eAAe,OAAOrE,EAAEsE,KAAK,MAAM3E,GAAE,GAAIK,EAAEyE,aAAa,cAAczE,EAAEuE,KAAK,MAAM,IAAIzB,WAAW9C,EAAE0E,SAAQ,GAAItD,EAAE,CAACzB,EAAEK,EAAEM,KAAK,IAAIE,EAAE,IAAI6D,eAAe7D,EAAE8D,KAAK,MAAM3E,GAAE,GAAIa,EAAEiE,aAAa,cAAcjE,EAAEmE,OAAO,KAAK,KAAKnE,EAAEoE,QAAQ,GAAGpE,EAAEoE,QAAQpE,EAAEkE,SAAS1E,EAAEQ,EAAEkE,UAAUpE,GAAE,EAAGE,EAAEqE,QAAQvE,EAAEE,EAAE+D,KAAK,KAAI,IAAKrC,GAAG,oBAAoB4C,cAAcjB,OAAOiB,YAAY,oBAAmC,IAAIC,EAAEpB,QAAQqB,IAAIC,KAAKtB,SAASuB,EAAEvB,QAAQwB,KAAKF,KAAKtB,SAASzB,IAAIV,IAAIuD,EAAEpF,GAAG2B,EAAE8D,UAAU,EAAEzF,EAAE,MAAMuF,EAAEvF,GAAG2B,EAAE8D,UAAU,EAAEzF,EAAE,OAAO,IAAI0F,EAAEC,EAAExE,EAAEyE,OAAOR,EAAEvB,EAAE1C,EAAE0E,UAAUN,EAAExD,OAAOC,OAAOb,EAAEW,GAAGA,EAAE,KAAKX,EAAE2E,cAAc7D,EAAEd,EAAE2E,aAAa3E,EAAE4E,OAAO7D,EAAEf,EAAE4E,MAAM5E,EAAE6E,aAAaN,EAAEvE,EAAE6E,YAAY,IAAIC,EAAE9E,EAAE+E,gBAAe,EAAG,iBAAiBC,aAAaC,GAAG,mCAAmC,IAAI9F,EAAE+F,EAAE7F,EAAEE,EAAEE,EAAEE,EAAEE,EAAEE,EAAEoF,GAAE,EAAGC,EAAE,oBAAoBC,YAAY,IAAIA,YAAY,aAAQ,EAAO,SAASC,EAAEzG,EAAEK,EAAEM,GAAG,IAAIE,GAAGR,KAAK,GAAGM,EAAE,IAAIA,EAAEN,EAAEL,EAAEW,MAAMA,GAAGE,MAAMF,EAAE,GAAG,GAAGA,EAAEN,GAAGL,EAAEO,QAAQgG,EAAE,OAAOA,EAAEG,OAAO1G,EAAEO,kBAAkBoG,kBAAkB3G,EAAEwD,MAAMnD,EAAEM,GAAGX,EAAE4G,SAASvG,EAAEM,IAAI,IAAIE,EAAE,GAAGR,EAAEM,GAAG,CAAC,IAAII,EAAEf,EAAEK,KAAK,GAAG,IAAIU,EAAE,CAAC,IAAIE,EAAE,GAAGjB,EAAEK,KAAK,GAAG,MAAM,IAAIU,GAAGF,GAAGgG,OAAOC,cAAc,GAAG/F,IAAI,EAAEE,OAAO,CAAC,IAAIE,EAAE,GAAGnB,EAAEK,KAAK,OAAOU,EAAE,MAAM,IAAIA,IAAI,GAAGA,IAAI,GAAGE,GAAG,EAAEE,GAAG,EAAEJ,IAAI,GAAGE,GAAG,GAAGE,GAAG,EAAE,GAAGnB,EAAEK,MAAMQ,GAAGgG,OAAOC,aAAa/F,IAAIA,GAAG,MAAMF,GAAGgG,OAAOC,aAAa,MAAM/F,GAAG,GAAG,MAAM,KAAKA,GAAG,CAAC,MAAMF,GAAGgG,OAAOC,aAAa/F,EAAE,CAAC,OAAOF,CAAC,CAAC,SAASkG,EAAE/G,EAAEK,GAAG,OAAOL,KAAK,GAAGyG,EAAE9F,IAAIX,EAAEK,GAAG,EAAE,CAAC,SAAS2G,EAAEhH,EAAEK,EAAEM,EAAEE,GAAG,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIE,EAAEJ,KAAK,EAAEE,EAAEF,EAAEE,EAAE,EAAE,IAAI,IAAII,EAAE,EAAEA,EAAEjB,EAAEsD,SAASrC,EAAE,CAAC,IAAIE,EAAEnB,EAAEiH,WAAWhG,GAAG,GAAG,OAAOE,GAAG,OAAOA,IAAIA,EAAE,QAAQ,KAAKA,IAAI,IAAI,KAAKnB,EAAEiH,aAAahG,IAAI,KAAKE,EAAE,CAAC,GAAGR,GAAGE,EAAE,MAAMR,EAAEM,MAAM,GAAGQ,CAAC,KAAK,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAGR,EAAE,GAAGE,EAAE,MAAMR,EAAEM,MAAM,GAAG,IAAIQ,GAAG,CAAC,KAAK,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAGR,EAAE,GAAGE,EAAE,MAAMR,EAAEM,MAAM,GAAG,IAAIQ,GAAG,EAAE,KAAK,CAAC,GAAGR,EAAE,GAAGE,EAAE,MAAMR,EAAEM,MAAM,GAAG,IAAIQ,GAAG,GAAGd,EAAEM,MAAM,GAAG,IAAIQ,GAAG,GAAG,EAAE,CAACd,EAAEM,MAAM,GAAG,IAAIQ,GAAG,EAAE,EAAE,CAACd,EAAEM,MAAM,GAAG,IAAI,GAAGQ,CAAC,CAAC,CAAC,OAAOd,EAAEM,IAAI,GAAG,EAAEA,EAAEI,CAAC,CAAC,SAASmG,EAAElH,GAAG,IAAI,IAAIK,EAAE,EAAEM,EAAE,EAAEA,EAAEX,EAAEsD,SAAS3C,EAAE,CAAC,IAAIE,EAAEb,EAAEiH,WAAWtG,GAAG,KAAKE,EAAER,IAAI,MAAMQ,EAAER,GAAG,EAAE,OAAOQ,GAAG,OAAOA,GAAGR,GAAG,IAAIM,GAAGN,GAAG,CAAC,CAAC,OAAOA,CAAC,CAAC,SAASI,EAAET,GAAGQ,EAAER,EAAEmB,EAAEgG,MAAMzG,EAAE,IAAI0G,UAAUpH,GAAGmB,EAAEkG,OAAO,IAAIC,WAAWtH,GAAGmB,EAAEoG,OAAOzG,EAAE,IAAI0G,WAAWxH,GAAGmB,EAAEsG,OAAO7G,EAAE,IAAIuC,WAAWnD,GAAGmB,EAAEuG,QAAQ,IAAIC,YAAY3H,GAAGmB,EAAEyG,QAAQ5G,EAAE,IAAI6G,YAAY7H,GAAGmB,EAAE2G,QAAQ,IAAIC,aAAa/H,GAAGmB,EAAE6G,QAAQ9G,EAAE,IAAI+G,aAAajI,EAAE,CAAC2C,IAAInC,EAAEW,EAAEZ,QAAQ,IAAI2H,EAAE/G,EAAEgH,gBAAgB,SAAS,GAAGxF,EAAErC,EAAEa,EAAEiH,WAAW5H,EAAEW,EAAEZ,YAAY,GAAGY,EAAEiH,WAAW9H,EAAEa,EAAEiH,gBAAgB,MAAM9H,EAAE,IAAI6F,YAAYkC,OAAO,CAACC,QAAQJ,EAAE,MAAMK,QAAQ,MAAMC,QAAO,KAAMjI,kBAAkBoG,mBAAmB,MAAM9C,EAAE,+NAA+NtB,GAAGyB,QAAQqB,IAAI,qHAAqHoD,MAAM,cAAcnI,IAAIE,EAAEF,EAAEC,QAAQ2H,EAAE1H,EAAEkI,WAAWjI,EAAED,GAAG,IAAImI,EAAEC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAG,SAASpF,IAAI,OAAOsC,IAAG,CAAE,CAAC,SAAS+C,IAAI,IAAIhJ,EAAEmB,EAAE8H,OAAOC,QAAQN,EAAEO,QAAQnJ,EAAE,CAAC,IAAIoJ,GAAEC,GAAG,EAAEC,GAAG,KAAKC,GAAG,KAAK,SAASnD,GAAGpG,GAAG,MAAM2C,EAAE6G,YAAY,CAACC,IAAI,UAAUC,IAAI1J,IAAImB,EAAEwI,SAASxI,EAAEwI,QAAQ3J,GAAG6D,EAAE7D,EAAE,WAAWA,EAAE,KAAKsG,GAAE,EAAGtG,EAAE,IAAImG,YAAYyD,aAAa5J,EAAE,4CAA4CqB,EAAErB,GAAGA,CAAC,CAAC,SAAS6J,KAAK,OAAOT,GAAEU,WAAW,wCAAwC,CAAC,SAASC,KAAK,IAAI/J,EAAEoJ,GAAE,IAAI,GAAGpJ,GAAGoJ,IAAG1D,EAAE,OAAO,IAAIvC,WAAWuC,GAAG,GAAGhE,EAAE,OAAOA,EAAE1B,GAAG,KAAK,iDAAgE,CAAd,MAAMA,GAAGoG,GAAGpG,EAAE,CAAC,CAACoJ,GAAE,yBAAyBS,OAAOT,GAAEtG,EAAEsG,KAAI,IAAIY,GAAG,CAAC,EAAE,SAAStG,GAAG1D,GAAGiK,KAAKC,KAAK,aAAaD,KAAKE,QAAQ,gCAAgCnK,EAAE,IAAIiK,KAAKhF,OAAOjF,CAAC,CAAC,SAASoK,GAAGpK,IAAIA,EAAEqK,GAAGC,GAAGtK,KAAKoG,KAAKiE,GAAGE,GAAGvK,EAAE,CAAC,SAASwK,GAAGxK,GAAG,IAAIK,EAAEgK,GAAGI,KAAK,IAAIpK,EAAE,OAAO,EAAEgK,GAAGK,GAAGC,KAAKtK,GAAGgK,GAAGC,GAAGtK,EAAE4K,IAAIvK,EAAEA,EAAEuK,GAAG5K,EAAE4K,GAAG,IAAIjK,EAAE,CAAC8I,IAAI,MAAMoB,cAAc7K,EAAE8K,GAAGpB,IAAI1J,EAAE+K,GAAGC,YAAYhL,EAAE4K,IAAI,OAAOvK,EAAE4K,GAAG,KAAKtK,EAAEuK,KAAK/F,YAAYgG,MAAM9K,EAAEmJ,YAAY7I,EAAEX,EAAEoL,GAAE,EAAG/K,EAAEgL,SAAShL,EAAE4K,YAAY5K,EAAE4K,IAAI,CAAC,CAAC,SAASK,GAAGtL,GAAG,GAAG2C,EAAE,OAAO4I,GAAG,EAAE,EAAEvL,GAAG2D,MAAM0G,GAAGmB,KAAKrK,EAAEsK,QAAQtK,EAAEsK,OAAOzL,GAAGsG,GAAE,GAAIpE,EAAElC,EAAE,IAAI0D,GAAG1D,GAAG,CAAC,SAAS0L,GAAG1L,EAAEK,GAAG,IAAIA,GAAGsC,EAAE,MAAMgJ,GAAG3L,GAAG,SAAS2D,KAAKhB,IAAIiJ,KAAKC,GAAG/C,GAAGgD,GAAG,GAAGC,GAAG,GAAGzI,QAAQ0I,GAAG,EAAE,IAAID,GAAG,GAAGzI,QAAQ0I,GAAG,EAAE,IAAI3B,GAAGmB,MAAMF,GAAGtL,EAAE,CAAC,IAAIqK,GAAG,CAAC4B,GAAG,GAAGvB,GAAG,GAAGwB,GAAG,GAAG5B,GAAG,CAAC,EAAE6B,GAAG,WAAWxJ,GAAG0H,GAAG+B,IAAI,EAAEC,GAAG,WAAW,EAAED,GAAG,WAAW/B,GAAGiC,sBAAsBjC,GAAGkC,GAAGlC,GAAGmC,cAAcnC,GAAGoC,GAAGpC,GAAGqC,cAAcrC,GAAGsC,GAAG1G,GAAE,CAAE,EAAE0G,GAAG,WAAW,EAAEnB,GAAG,WAAW,IAAI,IAAIxL,KAAK+B,OAAO6K,OAAOvC,GAAGC,IAAID,GAAGE,GAAGvK,GAAG,IAAIA,KAAKqK,GAAG4B,GAAGjM,EAAE6M,YAAYxC,GAAG4B,GAAG,EAAE,EAAE1B,GAAG,SAASvK,GAAG,IAAIK,EAAEL,EAAE4K,UAAUP,GAAGC,GAAGjK,GAAGgK,GAAG4B,GAAGtB,KAAK3K,GAAGqK,GAAGK,GAAGoC,OAAOzC,GAAGK,GAAGnG,QAAQvE,GAAG,GAAGA,EAAE4K,GAAG,EAAEmC,GAAG1M,EAAE,EAAEkM,GAAG,WAAW,EAAEE,GAAG,WAAWpC,GAAG6B,GAAGc,SAAShN,GAAGA,KAAK,EAAEiN,GAAG,SAASjN,EAAEK,GAAGL,EAAEkN,UAAUvM,IAAI,IAAIE,GAAGF,EAAEA,EAAEwM,MAAM1D,IAAI,GAAGzJ,EAAE4K,KAAKP,GAAG+C,GAAGpN,EAAE4K,IAAIjK,EAAE0M,cAAc1M,EAAE0M,cAAc5J,KAAK,CAAC,IAAI1C,EAAEsJ,GAAGC,GAAG3J,EAAE2M,IAAIvM,EAAEA,EAAEyI,YAAY7I,EAAEA,EAAE4M,cAAc1J,EAAE,0CAA0ChD,EAAE,uBAAuBF,EAAE0M,aAAa,sCAAsC,KAAK,yBAAyBxM,EAAE2M,GAAG7M,EAAE8M,OAAO,gBAAgB5M,EAAE2J,GAAG7J,GAAG,kBAAkBE,EAAEuJ,GAAGzJ,EAAE+M,QAAQ,eAAe7M,GAAGF,EAAEA,EAAE+M,OAAO7M,EAAEwJ,GAAGC,GAAG3J,UAAU0J,GAAGC,GAAG3J,GAAGE,EAAEgM,YAAYE,GAAGpM,GAAG0J,GAAGK,GAAGoC,OAAOzC,GAAGK,GAAGnG,QAAQ1D,GAAG,GAAGA,EAAE+J,GAAG,GAAG,iBAAiB/J,EAAEwJ,GAAGC,GAAG3J,EAAE+M,QAAQlE,YAAY,CAACC,IAAI,WAAW,WAAW5I,GAAGb,EAAEqL,QAAO,EAAGhL,GAAGA,EAAEL,GAAGA,EAAEiL,KAAKjL,EAAEiL,YAAYjL,EAAEiL,KAAK,UAAUpK,EAAE8E,EAAE,UAAUhF,EAAEgN,SAAS,KAAKhN,EAAEiN,MAAM,aAAa/M,EAAEgD,EAAE,UAAUlD,EAAEgN,SAAS,KAAKhN,EAAEiN,MAAM,UAAU/M,EAAEgN,MAAM,UAAUlN,EAAEgN,SAAS,KAAKhN,EAAEiN,MAAM,iBAAiBjN,EAAEmN,OAAO9N,EAAEwJ,YAAY7I,GAAG,YAAYE,EAAEM,EAAEwI,SAASxI,EAAEwI,QAAQhJ,EAAE+I,KAAK7I,GAAGgD,EAAE,kCAAkChD,GAAGwJ,GAAG+C,QAAG,CAAK,EAAGpN,EAAEkF,QAAQlF,IAAI,MAAM6D,EAAE,yBAAyB7D,EAAE+N,SAAS,IAAI/N,EAAEgO,OAAO,KAAKhO,EAAEmK,SAASnK,GAAGuC,IAAIvC,EAAEyD,GAAG,WAAU,SAAUpD,GAAGL,EAAEkN,UAAU,CAACC,KAAK9M,GAAI,IAAGL,EAAEyD,GAAG,SAAQ,SAAUpD,GAAGL,EAAEkF,QAAQ7E,EAAG,IAAGL,EAAEyD,GAAG,gBAAe,WAAa,KAAIzD,EAAEwJ,YAAY,CAACC,IAAI,OAAOwE,UAAU9M,EAAE+M,qBAAqBnO,WAAWqI,WAAW9H,EAAE6N,WAAW9H,GAAG,EAAE+H,GAAG,WAAW,IAAIpO,EAAE8C,EAAE,+BAA+BuH,GAAG4B,GAAGtB,KAAK,IAAIxG,OAAOnE,GAAG,EAAEyK,GAAG,WAAW,OAAO,GAAGJ,GAAG4B,GAAG3I,SAAS+G,GAAG+D,KAAK/D,GAAG4C,GAAG5C,GAAG4B,GAAG,KAAK5B,GAAG4B,GAAGoC,KAAK,GAAG,SAASxC,GAAG7L,GAAG,KAAK,EAAEA,EAAEsD,QAAQtD,EAAEkJ,OAAFlJ,CAAUmB,EAAE,CAAC,SAASmN,GAAGtO,GAAG,IAAIK,EAAEkO,KAAK,OAAOvO,EAAEA,IAAIwO,GAAGnO,GAAGL,CAAC,CAAC,SAAS2L,GAAG3L,GAAG,GAAG2C,EAAE,OAAO4I,GAAG,EAAE,EAAEvL,GAAG,IAAI0L,GAAG1L,EAAgD,CAA7C,MAAMA,GAAGA,aAAa0D,IAAI,UAAU1D,GAAGkC,EAAE,EAAElC,EAAE,CAAC,CAACmB,EAAEsN,QAAQpE,GAAGlJ,EAAEuN,oBAAoB,WAAW,IAAI1O,EAAEyD,KAAKpD,EAAEQ,IAAIb,EAAE,IAAI,IAAI,GAAGA,EAAEa,IAAIb,EAAE,IAAI,IAAI,GAAG2O,GAAGtO,EAAEA,EAAEL,GAAGwO,GAAGnO,EAAE,EAAE,IAAIuO,GAAGC,GAAGC,GAAG,GAAG,SAASC,GAAG/O,GAAGiK,KAAK+E,GAAGhP,EAAE,GAAGiK,KAAKgF,GAAG,SAASjP,GAAGe,IAAIkJ,KAAK+E,GAAG,GAAG,IAAI,GAAGhP,CAAC,EAAEiK,KAAKiF,GAAG,SAASlP,GAAGe,IAAIkJ,KAAK+E,GAAG,GAAG,IAAI,GAAGhP,CAAC,EAAEiK,KAAKkF,GAAG,WAAWtO,IAAIoJ,KAAK+E,IAAI,IAAI,GAAG,CAAC,EAAE/E,KAAKmF,GAAG,WAAW/O,IAAI4J,KAAK+E,GAAG,IAAI,IAAI,GAAG,CAAC,EAAE/E,KAAKoF,GAAG,WAAWhP,IAAI4J,KAAK+E,GAAG,IAAI,IAAI,GAAG,CAAC,EAAE/E,KAAKkC,GAAG,SAASnM,EAAEK,GAAG4J,KAAKqF,KAAKrF,KAAKgF,GAAGjP,GAAGiK,KAAKiF,GAAG7O,GAAG4J,KAAKkF,KAAKlF,KAAKmF,KAAKnF,KAAKoF,IAAI,EAAEpF,KAAKqF,GAAG,WAAWvO,IAAIkJ,KAAK+E,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,SAASO,GAAGvP,EAAEK,EAAEM,EAAEE,GAAG,OAAO8B,EAAE4I,GAAG,EAAE,EAAEvL,EAAEK,EAAEM,EAAEE,GAAG2O,GAAGxP,EAAEK,EAAEM,EAAEE,EAAE,CAAC,SAAS2O,GAAGxP,EAAEK,EAAEM,EAAEE,GAAG,GAAG,oBAAoB8F,kBAAkB,OAAO9C,EAAE,uFAAuF,EAAE,IAAI9C,EAAE,GAAG,OAAO4B,GAAG,IAAI5B,EAAEuC,OAAOiM,GAAGvP,EAAEK,EAAEM,EAAEE,IAAIb,EAAE,CAAC8K,GAAGnK,EAAEiK,GAAG5K,EAAE+K,GAAGlK,EAAEuK,GAAGrK,GAAG4B,GAAG3C,EAAEyP,GAAG,cAAcjG,YAAYxJ,EAAEe,GAAG,GAAGyJ,GAAGxK,GAAG,CAAC,SAAS0P,GAAG1P,EAAEK,EAAEM,GAAG,OAAOgC,EAAE4I,GAAG,EAAE,EAAEvL,EAAEK,EAAEM,GAAG,CAAC,CAAC,SAASgP,GAAG3P,EAAEK,GAAG,GAAGsC,EAAE,OAAO4I,GAAG,EAAE,EAAEvL,EAAEK,EAAE,CAAC,SAASuP,GAAG5P,EAAEK,GAAG,GAAGsC,EAAE,OAAO4I,GAAG,EAAE,EAAEvL,EAAEK,EAAE,CAAC,SAASwP,GAAG7P,EAAEK,EAAEM,GAAG,GAAGgC,EAAE,OAAO4I,GAAG,EAAE,EAAEvL,EAAEK,EAAEM,EAAE,CAAC,SAASmP,GAAG9P,EAAEK,EAAEM,GAAG,OAAOgC,EAAE4I,GAAG,EAAE,EAAEvL,EAAEK,EAAEM,GAAG,CAAC,CAAC,SAASoP,GAAG/P,EAAEK,GAAG,GAAGsC,EAAE,OAAO4I,GAAG,EAAE,EAAEvL,EAAEK,EAAE,CAAC,SAAS2P,GAAGhQ,EAAEK,EAAEM,GAAG,GAAGgC,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAE,CAAC,SAASsP,GAAGjQ,EAAEK,EAAEM,EAAEE,GAAG,GAAG8B,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,EAAE,CAAC,SAASqP,GAAGlQ,EAAEK,EAAEM,EAAEE,GAAG,GAAG8B,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,EAAE,CAAC,SAASsP,GAAGnQ,EAAEK,EAAEM,EAAEE,GAAG,GAAG8B,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,EAAE,CAAC,SAASuP,GAAGpQ,GAAG,GAAG2C,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAE,CAAC,SAASqQ,GAAGrQ,EAAEK,GAAG,GAAGsC,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAE,CAAC,SAASiQ,GAAGtQ,EAAEK,EAAEM,GAAG,GAAGgC,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAE,CAAC,SAAS6M,GAAGxN,GAAGuQ,QAAQC,MAAM3P,IAAIb,GAAG,EAAE,GAAGyD,MAAMgN,GAAGzQ,GAAGuQ,QAAQG,gBAAgB7P,IAAIb,GAAG,EAAE,EAAE,EAAE,CAAC,SAAS2Q,GAAG3Q,GAAG,OAAOe,IAAIf,IAAI,GAAG,WAAWa,IAAIb,EAAE,IAAI,EAAE,CAAC,SAAS4Q,GAAG5Q,EAAEK,EAAEM,EAAEE,EAAEE,EAAEE,GAAG,OAAO0B,EAAE4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,EAAEE,EAAEE,IAAI,EAAE,CAAC,SAAS4P,GAAG7Q,EAAEK,EAAEM,EAAEE,EAAEE,EAAEE,GAAG,GAAG0B,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,EAAEE,EAAEE,EAAE,CAAC,SAAS6P,GAAG9Q,GAAG,IAAIW,EAAEuG,EAAElH,GAAG,EAAEa,EAAEkQ,GAAGpQ,GAAG,OAAOE,GAAGmG,EAAEhH,EAAEK,IAAIQ,EAAEF,GAAGE,CAAC,CAAC,SAASmQ,GAAGhR,EAAEK,EAAEM,GAAG,SAASM,EAAEjB,GAAG,OAAOA,EAAEA,EAAEiR,eAAeC,MAAM,sBAAsBlR,EAAE,GAAG,KAAK,CAAC,GAAG2C,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,GAAG,IAAIQ,GAAE,IAAKgQ,MAAMC,cAAchQ,EAAE,IAAI+P,KAAKhQ,EAAE,EAAE,GAAGE,EAAE,IAAI8P,KAAKhQ,EAAE,EAAE,GAAGA,EAAEC,EAAEiQ,oBAAoB,IAAI7P,EAAEH,EAAEgQ,oBAAoB5P,EAAE6P,KAAKC,IAAIpQ,EAAEK,GAAGX,IAAIb,GAAG,IAAI,GAAG,GAAGyB,EAAEZ,IAAIR,GAAG,IAAI,GAAGmR,OAAOrQ,GAAGK,GAAGxB,EAAEiB,EAAEG,GAAGf,EAAEY,EAAEI,GAAGrB,EAAE8Q,GAAG9Q,GAAGK,EAAEyQ,GAAGzQ,GAAGmB,EAAEL,GAAGJ,IAAIJ,GAAG,IAAI,GAAGX,EAAEe,IAAIJ,EAAE,GAAG,IAAI,GAAGN,IAAIU,IAAIJ,GAAG,IAAI,GAAGN,EAAEU,IAAIJ,EAAE,GAAG,IAAI,GAAGX,EAAE,CAAC,SAASuL,GAAGvL,EAAEK,GAAG,IAAIM,EAAE8Q,UAAUnO,OAAO,EAAEzC,EAAE4Q,UAAU,OAAOnD,IAAG,KAAM,IAAI,IAAIvN,EAAE2Q,GAAG,EAAE/Q,GAAGQ,EAAEJ,GAAG,EAAEK,EAAE,EAAEA,EAAET,EAAES,IAAI,CAAC,IAAIC,EAAER,EAAE,EAAEO,GAAGH,IAAIE,EAAEC,IAAI,GAAGC,CAAC,CAAC,OAAOsQ,GAAG3R,EAAEW,EAAEI,EAAEV,EAAG,GAAE,CAACc,EAAEyQ,iBAAiB,SAAS5R,EAAEK,GAAG,IAAIM,EAAEmO,GAAG9O,GAAGW,IAAIX,GAAG8O,GAAGxL,SAASwL,GAAGxL,OAAOtD,EAAE,GAAG8O,GAAG9O,GAAGW,EAAEgI,EAAEkJ,IAAI7R,IAAIA,EAAEW,EAAEN,GAAGsD,IAAI0G,GAAGsC,GAAG3M,GAAG8R,GAAG9R,EAAE,EAAEmB,EAAE4Q,6BAA6BvE,GAAGqB,GAAGtM,EAAE,KAAK,IAAIvC,EAAEwC,QAAQwP,SAAS,OAAO,IAAIhS,EAAE,GAAGA,EAAE,GAAG,KAAK2C,EAAE,IAAIwC,YAAYgG,MAAMhK,EAAE8Q,8BAA8B,IAAI9M,YAAYgG,MAAM,IAAI+G,GAAGC,GAAG,GAAGC,GAAG,CAAC,EAAE,SAASC,KAAK,IAAIH,GAAG,CAAC,IAAIlS,EAAEK,EAAE,CAACiS,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiBC,WAAWA,UAAUC,WAAWD,UAAUC,UAAU,IAAI,KAAKtP,QAAQ,IAAI,KAAK,SAASrB,EAAED,GAAG,kBAAkB,IAAIjC,KAAKoS,QAAG,IAASA,GAAGpS,UAAUK,EAAEL,GAAGK,EAAEL,GAAGoS,GAAGpS,GAAG,IAAIW,EAAE,GAAG,IAAIX,KAAKK,EAAEM,EAAEgK,KAAK3K,EAAE,IAAIK,EAAEL,IAAIkS,GAAGvR,CAAC,CAAC,OAAOuR,EAAE,CAAC,SAASY,GAAG9S,EAAEW,GAAG,GAAGgC,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEW,GAAG,IAAIE,EAAE,EAAE,OAAOwR,KAAKrF,SAAQ,SAAU/L,EAAEE,GAAG,IAAIC,EAAET,EAAEE,EAAE,IAAIM,EAAEJ,IAAIf,EAAE,EAAEmB,GAAG,IAAI,GAAGC,EAAEA,EAAE,EAAEA,EAAEH,EAAEqC,SAASlC,EAAEf,IAAIc,KAAK,IAAI,GAAGF,EAAEgG,WAAW7F,GAAGf,IAAIc,GAAG,IAAI,GAAG,EAAEN,GAAGI,EAAEqC,OAAO,CAAE,IAAG,CAAC,CAAC,SAASyP,GAAG/S,EAAEK,GAAG,GAAGsC,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,GAAG,IAAIM,EAAE0R,KAAKtR,IAAIf,GAAG,IAAI,GAAGW,EAAE2C,OAAO,IAAIzC,EAAE,EAAE,OAAOF,EAAEqM,SAAQ,SAAUhN,GAAGa,GAAGb,EAAEsD,OAAO,CAAE,IAAGvC,IAAIV,GAAG,IAAI,GAAGQ,EAAE,CAAC,CAAC,SAASmS,GAAGhT,GAAG,OAAO2C,EAAE4I,GAAG,GAAG,EAAEvL,GAAG,EAAE,CAAC,SAASiT,GAAGjT,EAAEK,EAAEM,EAAEE,GAAG,OAAO8B,EAAE4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,GAAG,EAAE,CAAC,SAASqS,GAAGlT,EAAEK,EAAEM,EAAEE,EAAEE,GAAG,OAAO4B,EAAE4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEM,EAAEE,EAAEE,GAAG,EAAE,CAAC,IAAIgL,GAAG,CAAC,KAAK,GAAG,IAAI,SAASC,GAAGhM,EAAEK,GAAG,IAAIM,EAAEoL,GAAG/L,GAAG,IAAIK,GAAG,KAAKA,IAAI,IAAIL,EAAE2F,EAAE9B,GAAG4C,EAAE9F,EAAE,IAAIA,EAAE2C,OAAO,GAAG3C,EAAEgK,KAAKtK,EAAE,CAAC,SAAS8S,GAAGnT,EAAEK,EAAEQ,EAAEI,GAAG,GAAG0B,EAAE,OAAO4I,GAAG,GAAG,EAAEvL,EAAEK,EAAEQ,EAAEI,GAAG,IAAI,IAAIE,EAAE,EAAEC,EAAE,EAAEA,EAAEP,EAAEO,IAAI,CAAC,IAAIC,EAAEN,IAAIV,GAAG,IAAI,GAAGmB,EAAET,IAAIV,EAAE,GAAG,IAAI,GAAGA,GAAG,EAAE,IAAI,IAAIoB,EAAE,EAAEA,EAAED,EAAEC,IAAIuK,GAAGhM,EAAEW,IAAIU,EAAEI,IAAI,IAAIN,GAAGK,CAAC,CAAC,OAAOT,IAAIE,GAAG,IAAI,GAAGE,EAAE,CAAC,CAAC,SAASiS,GAAGpT,GAAG,OAAO,GAAGA,EAAE,IAAI,GAAGA,EAAE,KAAK,GAAGA,EAAE,IAAI,CAAC,IAAIqT,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,SAASC,GAAGvT,EAAEW,EAAEI,EAAEE,GAAG,SAASE,EAAEnB,EAAEK,EAAEM,GAAG,IAAIX,EAAE,iBAAiBA,EAAEA,EAAEwT,WAAWxT,GAAG,GAAGA,EAAEsD,OAAOjD,GAAGL,EAAEW,EAAE,GAAGX,EAAE,OAAOA,CAAC,CAAC,SAASoB,EAAEpB,EAAEK,GAAG,OAAOc,EAAEnB,EAAEK,EAAE,IAAI,CAAC,SAASgB,EAAErB,EAAEK,GAAG,SAASM,EAAEX,GAAG,OAAO,EAAEA,GAAG,EAAE,EAAEA,EAAE,EAAE,CAAC,CAAC,IAAIa,EAAE,OAAO,KAAKA,EAAEF,EAAEX,EAAEoR,cAAc/Q,EAAE+Q,iBAAiB,KAAKvQ,EAAEF,EAAEX,EAAEyT,WAAWpT,EAAEoT,eAAe5S,EAAEF,EAAEX,EAAE0T,UAAUrT,EAAEqT,YAAY7S,CAAC,CAAC,SAASW,EAAExB,GAAG,OAAOA,EAAE2T,UAAU,KAAK,EAAE,OAAO,IAAIxC,KAAKnR,EAAEoR,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAOpR,EAAE,KAAK,EAAE,OAAO,IAAImR,KAAKnR,EAAEoR,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAID,KAAKnR,EAAEoR,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAID,KAAKnR,EAAEoR,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAID,KAAKnR,EAAEoR,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAID,KAAKnR,EAAEoR,cAAc,EAAE,GAAG,IAAI,CAAC,SAAS3P,EAAEzB,GAAG,IAAIK,EAAEL,EAAE4T,GAAG,IAAI5T,EAAE,IAAImR,KAAK,IAAIA,KAAKnR,EAAE6T,GAAG,KAAK,EAAE,GAAGC,WAAW,EAAEzT,GAAG,CAAC,IAAIM,EAAEX,EAAEyT,WAAW5S,GAAGuS,GAAGpT,EAAEoR,eAAeiC,GAAGC,IAAI3S,GAAG,KAAKN,EAAEQ,EAAEb,EAAE0T,WAAW,CAAC1T,EAAE+T,QAAQ/T,EAAE0T,UAAUrT,GAAG,KAAK,CAACA,GAAGQ,EAAEb,EAAE0T,UAAU,EAAE1T,EAAE+T,QAAQ,GAAG,GAAGpT,EAAEX,EAAEgU,SAASrT,EAAE,IAAIX,EAAEgU,SAAS,GAAGhU,EAAEiU,YAAYjU,EAAEoR,cAAc,GAAG,CAAC,OAAOzQ,EAAE,IAAIwQ,KAAKnR,EAAEoR,cAAc,EAAE,EAAE,GAAG/Q,EAAEmB,EAAE,IAAI2P,KAAKnR,EAAEoR,cAAc,EAAE,IAAIzQ,EAAEa,EAAEb,GAAG,GAAGU,EAAEhB,EAAEL,GAAG,GAAGqB,EAAEV,EAAEX,GAAGA,EAAEoR,cAAc,EAAEpR,EAAEoR,cAAcpR,EAAEoR,cAAc,CAAC,CAAC,IAAI1P,EAAEb,IAAII,EAAE,IAAI,IAAI,GAAG,IAAI,IAAIU,KAAKV,EAAE,CAACiT,GAAGrT,IAAII,GAAG,IAAI,GAAGkT,GAAGtT,IAAII,EAAE,GAAG,IAAI,GAAGmT,GAAGvT,IAAII,EAAE,GAAG,IAAI,GAAGoT,GAAGxT,IAAII,EAAE,IAAI,IAAI,GAAGqT,GAAGzT,IAAII,EAAE,IAAI,IAAI,GAAG4S,GAAGhT,IAAII,EAAE,IAAI,IAAI,GAAGsT,GAAG1T,IAAII,EAAE,IAAI,IAAI,GAAG2S,GAAG/S,IAAII,EAAE,IAAI,IAAI,GAAGuT,GAAG3T,IAAII,EAAE,IAAI,IAAI,GAAGwT,GAAG5T,IAAII,EAAE,IAAI,IAAI,GAAGyT,GAAGhT,EAAEqF,EAAErF,GAAG,IAAIX,EAAEgG,EAAEhG,GAAGW,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,WAAW,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAMX,EAAEA,EAAEwC,QAAQ,IAAIoR,OAAOhT,EAAE,KAAKD,EAAEC,IAAI,IAAIC,EAAE,2DAA2DgT,MAAM,KAAK/S,EAAE,wFAAwF+S,MAAM,KAAK,IAAIjT,KAAKD,EAAE,CAAC,KAAK,SAAS1B,GAAG,OAAO4B,EAAE5B,EAAEuU,IAAIM,UAAU,EAAE,EAAE,EAAE,KAAK,SAAS7U,GAAG,OAAO4B,EAAE5B,EAAEuU,GAAG,EAAE,KAAK,SAASvU,GAAG,OAAO6B,EAAE7B,EAAEsU,IAAIO,UAAU,EAAE,EAAE,EAAE,KAAK,SAAS7U,GAAG,OAAO6B,EAAE7B,EAAEsU,GAAG,EAAE,KAAK,SAAStU,GAAG,OAAOoB,GAAGpB,EAAE6T,GAAG,MAAM,IAAI,EAAE,EAAE,EAAE,KAAK,SAAS7T,GAAG,OAAOoB,EAAEpB,EAAEqU,GAAG,EAAE,EAAE,KAAK,SAASrU,GAAG,OAAOmB,EAAEnB,EAAEqU,GAAG,EAAE,IAAI,EAAE,KAAK,SAASrU,GAAG,OAAOyB,EAAEzB,GAAGwT,WAAWqB,UAAU,EAAE,EAAE,KAAK,SAAS7U,GAAG,OAAOyB,EAAEzB,EAAE,EAAE,KAAK,SAASA,GAAG,OAAOoB,EAAEpB,EAAEoU,GAAG,EAAE,EAAE,KAAK,SAASpU,GAAG,OAAO,IAAIA,EAAEA,EAAEoU,IAAIpU,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAIoB,EAAEpB,EAAE,EAAE,EAAE,KAAK,SAASA,GAAG,IAAI,IAAIK,EAAE,EAAEM,EAAE,EAAEA,GAAGX,EAAEsU,GAAG,EAAEjU,IAAI+S,GAAGpT,EAAE6T,GAAG,MAAMR,GAAGC,IAAI3S,MAAM,OAAOS,EAAEpB,EAAEqU,GAAGhU,EAAE,EAAE,EAAE,KAAK,SAASL,GAAG,OAAOoB,EAAEpB,EAAEsU,GAAG,EAAE,EAAE,EAAE,KAAK,SAAStU,GAAG,OAAOoB,EAAEpB,EAAEmU,GAAG,EAAE,EAAE,KAAK,WAAW,MAAM,IAAI,EAAE,KAAK,SAASnU,GAAG,OAAO,GAAGA,EAAEoU,IAAI,GAAGpU,EAAEoU,GAAG,KAAK,IAAI,EAAE,KAAK,SAASpU,GAAG,OAAOoB,EAAEpB,EAAEkU,GAAG,EAAE,EAAE,KAAK,WAAW,MAAM,IAAI,EAAE,KAAK,SAASlU,GAAG,OAAOA,EAAEuU,IAAI,CAAC,EAAE,KAAK,SAASvU,GAAG,OAAOoB,EAAEkQ,KAAKwD,OAAO9U,EAAE4T,GAAG,EAAE5T,EAAEuU,IAAI,GAAG,EAAE,EAAE,KAAK,SAASvU,GAAG,IAAIK,EAAEiR,KAAKwD,OAAO9U,EAAE4T,GAAG,GAAG5T,EAAEuU,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIvU,EAAEuU,GAAG,IAAIvU,EAAE4T,GAAG,GAAG,GAAGvT,IAAIA,EAAE,IAAIA,IAAI,IAAIM,GAAGX,EAAEuU,GAAG,IAAIvU,EAAE4T,IAAI,IAAI,GAAGjT,GAAGyS,GAAGpT,EAAE6T,MAAMxT,EAAE,QAAQ,CAACA,EAAE,GAAG,IAAIM,GAAGX,EAAEuU,GAAG,EAAEvU,EAAE4T,GAAG,GAAG,GAAG,GAAGjT,GAAG,GAAGA,GAAGyS,GAAGpT,EAAE6T,GAAG,IAAI,KAAKxT,GAAG,CAAC,OAAOe,EAAEf,EAAE,EAAE,EAAE,KAAK,SAASL,GAAG,OAAOA,EAAEuU,EAAE,EAAE,KAAK,SAASvU,GAAG,OAAOoB,EAAEkQ,KAAKwD,OAAO9U,EAAE4T,GAAG,GAAG5T,EAAEuU,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,KAAK,SAASvU,GAAG,OAAOA,EAAE6T,GAAG,MAAML,WAAWqB,UAAU,EAAE,EAAE,KAAK,SAAS7U,GAAG,OAAOA,EAAE6T,GAAG,IAAI,EAAE,KAAK,SAAS7T,GAAG,IAAIK,EAAE,IAAIL,EAAEA,EAAEyU,IAAI,OAAOzU,EAAEsR,KAAKyD,IAAI/U,GAAG,IAAIK,EAAE,IAAI,KAAKwG,OAAO,QAAQ7G,EAAE,GAAG,IAAIA,EAAE,KAAKwD,OAAO,EAAE,EAAE,KAAK,SAASxD,GAAG,OAAOA,EAAE0U,EAAE,EAAE,KAAK,WAAW,MAAM,GAAG,GAAG3T,EAAEA,EAAEwC,QAAQ,MAAM,QAAQ7B,EAAEX,EAAEiU,SAASrT,KAAKZ,EAAEA,EAAEwC,QAAQ,IAAIoR,OAAOhT,EAAE,KAAKD,EAAEC,GAAGV,KAAK,OAAOU,EAAE,SAAS3B,GAAG,IAAIK,EAAE4U,MAAM/N,EAAElH,GAAG,GAAG,OAAOgH,EAAEhH,EAAEK,EAAE,EAAEA,EAAEiD,QAAQjD,CAAC,CAA1D,CAA4DU,EAAEA,EAAEwC,QAAQ,QAAQ,MAAM5B,EAAE2B,OAAO3C,EAAE,GAAG,SAASX,EAAEW,GAAGN,IAAI6U,IAAIlV,EAAEW,IAAI,EAAE,CAA9B,CAAgCgB,EAAE3B,GAAG2B,EAAE2B,OAAO,EAAE,CAAC+G,GAAG8B,KAAK,IAAIgJ,GAAG,CAAC,KAAK7J,GAAGK,GAAG4D,GAAGG,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGM,GAAGC,GAAGG,GAAG8B,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,IAAIiC,GAAG,CAAC/S,EAAE,SAASrC,GAAG,OAAO+Q,GAAG/Q,EAAE,IAAI,EAAE,EAAEyB,EAAE,SAASzB,EAAEK,EAAEM,GAAG,MAAM,IAAIoO,GAAG/O,GAAGmM,GAAG9L,EAAEM,GAAGX,CAAC,EAAEgH,EAAE,SAAShH,GAAGqV,GAAGrV,GAAGqC,EAAE,GAAGF,GAAGkI,GAAGoC,IAAI,EAAE7K,EAAE,SAAS5B,GAAG2C,EAAE6G,YAAY,CAACC,IAAI,gBAAgBiE,OAAO1N,IAAIoK,GAAGpK,EAAE,EAAEqG,EAAEmJ,GAAGrO,EAAEuO,GAAGnK,EAAEoK,GAAGxN,EAAEyN,GAAGjH,EAAEkH,GAAGlP,EAAEmP,GAAGjH,EAAEkH,GAAGjP,EAAEkP,GAAGpP,EAAEqP,GAAG7O,EAAE8O,GAAGhI,EAAEiI,GAAGxN,EAAEyN,GAAGzK,EAAE0K,GAAGxM,EAAEyM,GAAGpJ,EAAE,WAAW,EAAEH,EAAE,WAAWX,GAAG,iHAAiH,EAAEvF,EAAE,WAAWuF,GAAG,iHAAiH,EAAEzE,EAAE,WAAW,OAAOwP,KAAKhG,KAAK,EAAElF,EAAE,WAAW,OAAO,OAAO,EAAEjF,EAAE,WAAW,OAAM,CAAE,EAAEN,EAAE,SAASV,EAAEK,EAAEM,EAAEE,GAAG,GAAGb,GAAGK,EAAEiV,YAAW,IAAK9H,GAAG3M,UAAU,GAAG8B,EAAE6G,YAAY,CAAC6D,aAAarN,EAAEyJ,IAAI,uBAAuBgE,MAAM5M,QAAQ,CAAC,KAAKb,EAAEqK,GAAGC,GAAGtK,IAAI,OAAOA,EAAEwJ,YAAY,CAACC,IAAI,uBAAuBgE,MAAM5M,GAAG,CAAC,OAAO,CAAC,EAAE+H,EAAE,WAAW,OAAO,CAAC,EAAEE,EAAE,SAAS9I,EAAEK,GAAGL,EAAE,IAAImR,KAAK,IAAIR,GAAG3Q,IAAIa,IAAIR,GAAG,IAAI,GAAGL,EAAEuV,gBAAgB1U,IAAIR,EAAE,GAAG,IAAI,GAAGL,EAAEwV,gBAAgB3U,IAAIR,EAAE,GAAG,IAAI,GAAGL,EAAEyV,cAAc5U,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAE0V,aAAa7U,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAE2V,cAAc9U,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAE4V,iBAAiB,KAAK/U,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAE6V,YAAY7V,GAAGA,EAAE8T,UAAU3C,KAAK2E,IAAI9V,EAAE4V,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,EAAE/U,IAAIR,EAAE,IAAI,IAAI,GAAGL,CAAC,EAAEsG,EAAE,SAAStG,EAAEK,GAAGL,EAAE,IAAImR,KAAK,IAAIR,GAAG3Q,IAAIa,IAAIR,GAAG,IAAI,GAAGL,EAAE+V,aAAalV,IAAIR,EAAE,GAAG,IAAI,GAAGL,EAAEgW,aAAanV,IAAIR,EAAE,GAAG,IAAI,GAAGL,EAAEiW,WAAWpV,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAE0T,UAAU7S,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAEyT,WAAW5S,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAEoR,cAAc,KAAKvQ,IAAIR,EAAE,IAAI,IAAI,GAAGL,EAAE2T,SAAS,IAAIhT,EAAE,IAAIwQ,KAAKnR,EAAEoR,cAAc,EAAE,GAAGrQ,GAAGf,EAAE8T,UAAUnT,EAAEmT,WAAW,MAAM,EAAEjT,IAAIR,EAAE,IAAI,IAAI,GAAGU,EAAEF,IAAIR,EAAE,IAAI,IAAI,IAAI,GAAGL,EAAEqR,oBAAoBtQ,EAAE,IAAIoQ,KAAKnR,EAAEoR,cAAc,EAAE,GAAGC,oBAAoBrR,EAAE,GAAGe,IAAIJ,EAAEA,EAAE0Q,sBAAsBrR,EAAEqR,qBAAqBC,KAAK4E,IAAIvV,EAAEI,IAAIF,IAAIR,EAAE,IAAI,IAAI,GAAGL,CAAC,EAAE+I,EAAE,SAAS/I,GAAG,IAAIK,EAAE,IAAI8Q,KAAKtQ,IAAIb,EAAE,IAAI,IAAI,GAAG,KAAKa,IAAIb,EAAE,IAAI,IAAI,GAAGa,IAAIb,EAAE,IAAI,IAAI,GAAGa,IAAIb,EAAE,GAAG,IAAI,GAAGa,IAAIb,EAAE,GAAG,IAAI,GAAGa,IAAIb,GAAG,IAAI,GAAG,GAAGW,EAAEE,IAAIb,EAAE,IAAI,IAAI,GAAGe,EAAEV,EAAEgR,oBAAoBpQ,EAAE,IAAIkQ,KAAK9Q,EAAE+Q,cAAc,EAAE,GAAGjQ,EAAE,IAAIgQ,KAAK9Q,EAAE+Q,cAAc,EAAE,GAAGC,oBAAoBjQ,EAAEH,EAAEoQ,oBAAoBhQ,EAAEiQ,KAAK4E,IAAI9U,EAAED,GAAG,OAAO,EAAER,EAAEE,IAAIb,EAAE,IAAI,IAAI,GAAGwR,OAAOrQ,GAAGC,GAAGC,GAAGN,GAAG,EAAEJ,IAAIU,GAAGN,KAAKI,EAAEmQ,KAAKC,IAAInQ,EAAED,GAAGd,EAAE8V,QAAQ9V,EAAEyT,UAAU,MAAM,EAAEnT,EAAEU,EAAEF,GAAGJ,KAAKF,IAAIb,EAAE,IAAI,IAAI,GAAGK,EAAEsT,SAAShT,GAAGN,EAAEyT,UAAU7S,EAAE6S,WAAW,MAAM,EAAEjT,IAAIb,EAAE,IAAI,IAAI,GAAGW,EAAEE,IAAIb,GAAG,IAAI,GAAGK,EAAE0V,aAAalV,IAAIb,EAAE,GAAG,IAAI,GAAGK,EAAE2V,aAAanV,IAAIb,EAAE,GAAG,IAAI,GAAGK,EAAE4V,WAAWpV,IAAIb,EAAE,IAAI,IAAI,GAAGK,EAAEqT,UAAU7S,IAAIb,EAAE,IAAI,IAAI,GAAGK,EAAEoT,WAAWpT,EAAEyT,UAAU,IAAI,CAAC,EAAErT,EAAEmQ,GAAGrK,EAAEsK,GAAG3P,EAAE,SAASlB,EAAEK,EAAEM,EAAEE,GAAGb,EAAEoW,KAAKpW,EAAEoW,IAAG,EAAGpF,GAAG3Q,EAAEM,EAAEE,GAAG,EAAEgB,EAAE,WAAWuE,GAAG,GAAG,EAAE/F,EAAE,WAAW,IAAIkC,IAAIF,EAAE,CAAC,IAAIrC,EAAE,2IAA2I4O,KAAKA,GAAG,CAAC,GAAGA,GAAG5O,KAAK4O,GAAG5O,GAAG,EAAEuC,IAAIvC,EAAE,YAAYA,GAAG6D,EAAE7D,GAAG,CAAC,EAAEuC,EAAE,WAAW,OAAO,UAAU,EAAEf,EAAEqN,GAAGhM,EAAE,SAAS7C,EAAEK,EAAEQ,GAAGF,IAAI0V,WAAWrW,IAAI,EAAEK,IAAI,EAAEA,EAAEQ,IAAI,EAAE,EAAEoB,EAAE,WAAW,OAAOM,EAAE,eAAqBe,OAAOsP,UAAU0D,mBAAmB,EAAEtN,EAAE,SAAShJ,EAAEK,EAAEM,GAAGwR,GAAG7O,OAAOjD,EAAEM,IAAI,EAAE,IAAI,IAAIE,EAAE,EAAEA,EAAER,EAAEQ,IAAIsR,GAAGtR,GAAGI,IAAIN,EAAEE,IAAI,GAAG,OAAO,EAAEb,EAAEgK,IAAIhK,EAAE,GAAGmV,GAAGnV,IAAIuW,MAAM,KAAKpE,GAAG,EAAElR,EAAE,SAASjB,GAAG,IAAIK,EAAEM,IAAI2C,OAAO,IAAItD,KAAK,IAAIK,GAAG,WAAWL,EAAE,OAAM,EAAG,IAAI,IAAIa,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAIE,EAAEV,GAAG,EAAE,GAAGQ,GAAGE,EAAEuQ,KAAK4E,IAAInV,EAAEf,EAAE,WAAW,IAAIiB,EAAEqQ,KAAKvQ,EAAEuQ,KAAKC,IAAIvR,EAAEe,GAAGE,EAAEA,EAAEiV,IAAIM,KAAKvV,EAAE,WAAWF,GAAG,MAAMA,EAAE,OAAO,OAAOf,EAAE,CAAC,IAAIM,EAAEmW,KAAKxV,EAAET,EAAEkI,WAAW,QAAQ,IAAIjI,EAAEH,EAAEC,QAAQ,IAAIY,EAAE,EAAE,MAAMnB,CAAW,CAAT,MAAMA,GAAG,CAACmB,OAAE,CAAM,CAAC,GAAGA,EAAE,OAAM,CAAE,CAAC,OAAM,CAAE,EAAE2B,EAAE,WAAW,KAAK,QAAQ,EAAEsC,EAAE0N,GAAGrM,EAAEsM,GAAGvS,EAAEkL,GAAG5J,EAAEkR,GAAGtR,EAAEuR,GAAG5R,EAAE6R,GAAG5S,EAAE6S,GAAGpS,EAAET,GAAGa,EAAEiH,WAAW1C,EAAE6N,GAAGvT,EAAE,SAASA,EAAEK,EAAEM,EAAEE,GAAG,OAAO0S,GAAGvT,EAAEK,EAAEM,EAAEE,EAAE,IAAI,WAAW,SAASb,EAAEA,EAAEK,GAAGc,EAAEuV,IAAI1W,EAAE2W,QAAQtM,GAAG6B,GAAGvB,KAAKxJ,EAAEuV,IAAIE,IAAIjO,EAAExH,EAAEuV,IAAIG,GAAGhO,EAAEM,QAAQhI,EAAEuV,IAAI/S,GAAG0C,EAAEhG,EAAEsC,IAAI0G,KAAKlI,EAAE2V,wBAAwB3V,EAAE2V,uBAAuBzN,IAAI,GAAGA,KAAK,OAAOC,KAAKyN,cAAczN,IAAIA,GAAG,MAAMC,KAAKvJ,EAAEuJ,GAAGA,GAAG,KAAKvJ,MAAM,CAAC,SAASK,EAAEA,GAAGL,EAAEK,EAAE2W,SAAS3W,EAAE4W,OAAO,CAAC,SAAStW,EAAEX,GAAG,OAAO,WAAW,IAAI0F,IAAIvD,GAAGE,GAAG,CAAC,GAAG,mBAAmB6U,QAAQ9N,GAAEU,WAAW,WAAW,OAAOoN,MAAM9N,GAAE,CAAC+N,YAAY,gBAAgBC,MAAK,SAAUpX,GAAG,IAAIA,EAAEqX,GAAG,KAAK,uCAAuCjO,GAAE,IAAI,OAAOpJ,EAAEsX,aAAc,IAAGC,OAAM,WAAY,OAAOxN,IAAK,IAAG,GAAGtI,EAAE,OAAO,IAAIF,SAAQ,SAAUvB,EAAEK,GAAGoB,EAAE2H,IAAE,SAAU/I,GAAGL,EAAE,IAAImD,WAAW9C,GAAI,GAAEA,EAAG,GAAE,CAAC,OAAOkB,QAAQiW,UAAUJ,MAAK,WAAY,OAAOrN,IAAK,GAAE,CAAjZ,GAAqZqN,MAAK,SAAUpX,GAAG,OAAOmG,YAAYsR,YAAYzX,EAAEa,EAAG,IAAGuW,MAAK,SAAUpX,GAAG,OAAOA,CAAE,IAAGoX,KAAKpX,GAAE,SAAUA,GAAG6D,EAAE,0CAA0C7D,GAAGoG,GAAGpG,EAAG,GAAE,CAAC,IAAIa,EAAE,CAACE,EAAEqU,IAAI,GAAGzS,IAAI0G,KAAKlI,EAAE2V,wBAAwB3V,EAAE2V,uBAAuBzN,KAAKlI,EAAEuW,gBAAgB,IAAI,OAAOvW,EAAEuW,gBAAgB7W,EAAEb,EAAgF,CAA7E,MAAMA,GAAG,OAAO6D,EAAE,sDAAsD7D,IAAG,CAAE,EAAE0F,GAAG,mBAAmBS,YAAYwR,sBAAsB9N,MAAMT,GAAEU,WAAW,YAAYvH,GAAG,mBAAmB2U,MAAMvW,EAAEN,GAAG6W,MAAM9N,GAAE,CAAC+N,YAAY,gBAAgBC,MAAK,SAAUpX,GAAG,OAAOmG,YAAYwR,qBAAqB3X,EAAEa,GAAGuW,KAAK/W,GAAE,SAAUL,GAAG,OAAO6D,EAAE,kCAAkC7D,GAAG6D,EAAE,6CAA6ClD,EAAEN,EAAG,GAAG,KAAIkX,MAAMlW,EAAE,CAAj5C,GAAq5CF,EAAEyW,mBAAmB,WAAW,OAAOzW,EAAEyW,mBAAmBzW,EAAEuV,IAAI/S,GAAG4S,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE0W,SAAS,WAAW,OAAO1W,EAAE0W,SAAS1W,EAAEuV,IAAIxU,GAAGqU,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE2W,yBAAyB,WAAW,OAAO3W,EAAE2W,yBAAyB3W,EAAEuV,IAAItN,GAAGmN,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE4W,4BAA4B,WAAW,OAAO5W,EAAE4W,4BAA4B5W,EAAEuV,IAAIsB,IAAIzB,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE8W,0BAA0B,WAAW,OAAO9W,EAAE8W,0BAA0B9W,EAAEuV,IAAIwB,IAAI3B,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEgX,0BAA0B,WAAW,OAAOhX,EAAEgX,0BAA0BhX,EAAEuV,IAAI0B,IAAI7B,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEkX,kBAAkB,WAAW,OAAOlX,EAAEkX,kBAAkBlX,EAAEuV,IAAI4B,IAAI/B,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEoX,mBAAmB,WAAW,OAAOpX,EAAEoX,mBAAmBpX,EAAEuV,IAAI8B,IAAIjC,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEsX,kBAAkB,WAAW,OAAOtX,EAAEsX,kBAAkBtX,EAAEuV,IAAIgC,IAAInC,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEwX,mBAAmB,WAAW,OAAOxX,EAAEwX,mBAAmBxX,EAAEuV,IAAIkC,IAAIrC,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE0X,iBAAiB,WAAW,OAAO1X,EAAE0X,iBAAiB1X,EAAEuV,IAAIoC,IAAIvC,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE4X,kBAAkB,WAAW,OAAO5X,EAAE4X,kBAAkB5X,EAAEuV,IAAIsC,IAAIzC,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE8X,SAAS,WAAW,OAAO9X,EAAE8X,SAAS9X,EAAEuV,IAAIwC,IAAI3C,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEgY,iBAAiB,WAAW,OAAOhY,EAAEgY,iBAAiBhY,EAAEuV,IAAI0C,IAAI7C,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEkY,kBAAkB,WAAW,OAAOlY,EAAEkY,kBAAkBlY,EAAEuV,IAAI4C,IAAI/C,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEoY,kBAAkB,WAAW,OAAOpY,EAAEoY,kBAAkBpY,EAAEuV,IAAI8C,IAAIjD,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEsY,qBAAqB,WAAW,OAAOtY,EAAEsY,qBAAqBtY,EAAEuV,IAAIgD,IAAInD,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEwY,sBAAsB,WAAW,OAAOxY,EAAEwY,sBAAsBxY,EAAEuV,IAAIkD,IAAIrD,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE0Y,sBAAsB,WAAW,OAAO1Y,EAAE0Y,sBAAsB1Y,EAAEuV,IAAIoD,IAAIvD,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE4Y,QAAQ,WAAW,OAAO5Y,EAAE4Y,QAAQ5Y,EAAEuV,IAAIsD,IAAIzD,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE8Y,iBAAiB,WAAW,OAAO9Y,EAAE8Y,iBAAiB9Y,EAAEuV,IAAIwD,IAAI3D,MAAM,KAAK9E,UAAU,EAAE,IAAIhO,GAAGtC,EAAEgZ,cAAc,WAAW,OAAO1W,GAAGtC,EAAEgZ,cAAchZ,EAAEuV,IAAI0D,IAAI7D,MAAM,KAAK9E,UAAU,EAAEV,GAAG5P,EAAEkZ,QAAQ,WAAW,OAAOtJ,GAAG5P,EAAEkZ,QAAQlZ,EAAEuV,IAAI4D,IAAI/D,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEoZ,MAAM,WAAW,OAAOpZ,EAAEoZ,MAAMpZ,EAAEuV,IAAI8D,IAAIjE,MAAM,KAAK9E,UAAU,EAAE,IAAI3F,GAAG3K,EAAEsZ,QAAQ,WAAW,OAAO3O,GAAG3K,EAAEsZ,QAAQtZ,EAAEuV,IAAIgE,IAAInE,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEwZ,sBAAsB,WAAW,OAAOxZ,EAAEwZ,sBAAsBxZ,EAAEuV,IAAIE,IAAIL,MAAM,KAAK9E,UAAU,EAAE,IAAI7F,GAAGzK,EAAEyZ,iBAAiB,WAAW,OAAOhP,GAAGzK,EAAEyZ,iBAAiBzZ,EAAEuV,IAAImE,IAAItE,MAAM,KAAK9E,UAAU,EAAE4D,GAAGlU,EAAE2Z,yBAAyB,WAAW,OAAOzF,GAAGlU,EAAE2Z,yBAAyB3Z,EAAEuV,IAAIqE,IAAIxE,MAAM,KAAK9E,UAAU,EAAEtQ,EAAE6Z,4BAA4B,WAAW,OAAO7Z,EAAE6Z,4BAA4B7Z,EAAEuV,IAAIuE,IAAI1E,MAAM,KAAK9E,UAAU,EAAE,IAAIyJ,GAAGvJ,GAAGxQ,EAAEga,0CAA0C,WAAW,OAAOxJ,GAAGxQ,EAAEga,0CAA0Cha,EAAEuV,IAAI0E,IAAI7E,MAAM,KAAK9E,UAAU,EAAEhB,GAAGtP,EAAEka,sCAAsC,WAAW,OAAO5K,GAAGtP,EAAEka,sCAAsCla,EAAEuV,IAAI4E,IAAI/E,MAAM,KAAK9E,UAAU,EAAE1E,GAAG5L,EAAEoa,8BAA8B,WAAW,OAAOxO,GAAG5L,EAAEoa,8BAA8Bpa,EAAEuV,IAAI8E,IAAIjF,MAAM,KAAK9E,UAAU,EAAEK,GAAG3Q,EAAEsa,yBAAyB,WAAW,OAAO3J,GAAG3Q,EAAEsa,yBAAyBta,EAAEuV,IAAIgF,IAAInF,MAAM,KAAK9E,UAAU,EAAE9C,GAAGxN,EAAEwa,6BAA6B,WAAW,OAAOhN,GAAGxN,EAAEwa,6BAA6Bxa,EAAEuV,IAAIkF,IAAIrF,MAAM,KAAK9E,UAAU,EAAElD,GAAGpN,EAAE0a,UAAU,WAAW,OAAOtN,GAAGpN,EAAE0a,UAAU1a,EAAEuV,IAAIoF,IAAIvF,MAAM,KAAK9E,UAAU,EAAEjD,GAAGrN,EAAE4a,aAAa,WAAW,OAAOvN,GAAGrN,EAAE4a,aAAa5a,EAAEuV,IAAIsF,IAAIzF,MAAM,KAAK9E,UAAU,EAAEC,GAAGvQ,EAAE8a,WAAW,WAAW,OAAOvK,GAAGvQ,EAAE8a,WAAW9a,EAAEuV,IAAIwF,IAAI3F,MAAM,KAAK9E,UAAU,EAAE,SAAS0K,KAAK,SAASnc,IAAI,IAAIkb,KAAKA,IAAG,EAAG/Z,EAAEib,WAAU,GAAI9V,KAAK3D,GAAGkJ,GAAGhD,GAAGzH,EAAED,GAAGA,EAAEkb,sBAAsBlb,EAAEkb,wBAAwB1Z,GAAG,CAAC,GAAGxB,EAAEmb,QAAQ,IAAI,mBAAmBnb,EAAEmb,UAAUnb,EAAEmb,QAAQ,CAACnb,EAAEmb,UAAUnb,EAAEmb,QAAQhZ,QAAQ,CAAC,IAAItD,EAAEmB,EAAEmb,QAAQpT,QAAQH,EAAEI,QAAQnJ,EAAE,CAAC6L,GAAG9C,EAAE,CAAC,CAAC,KAAK,EAAEM,IAAI,GAAG1G,EAAEvB,EAAED,GAAGwB,GAAGkJ,GAAGhD,GAAGW,YAAY,CAACC,IAAI,eAAe,CAAC,GAAGtI,EAAE8H,OAAO,IAAI,mBAAmB9H,EAAE8H,SAAS9H,EAAE8H,OAAO,CAAC9H,EAAE8H,SAAS9H,EAAE8H,OAAO3F,QAAQ0F,IAAI6C,GAAGjD,GAAG,EAAES,KAAKlI,EAAEob,WAAWpb,EAAEob,UAAU,cAAcjH,YAAW,WAAYA,YAAW,WAAYnU,EAAEob,UAAU,GAAI,GAAE,GAAGvc,GAAI,GAAE,IAAIA,IAAI,CAAC,CAAC,GAAGmB,EAAEqb,uBAAuB,WAAW,OAAOrb,EAAEqb,uBAAuBrb,EAAEuV,IAAI+F,IAAIlG,MAAM,KAAK9E,UAAU,EAAEtQ,EAAEub,aAAa3V,EAAE5F,EAAEwb,aAAa,SAAS3c,EAAEK,EAAEQ,GAAG,OAAOmG,EAAEhH,EAAEW,IAAIN,EAAEQ,EAAE,EAAEM,EAAEyb,gBAAgB1V,EAAE/F,EAAE0b,iBAAiBlZ,EAAExC,EAAEiH,WAAW9H,EAAEa,EAAE0a,UAAUtN,GAAGpN,EAAE4a,aAAavN,GAAGrN,EAAE8a,WAAWvK,GAAGvQ,EAAE2b,WAAWpZ,GAAGvC,EAAEsN,QAAQpE,GAAGd,GAAG,SAASvJ,IAAIkb,IAAIiB,KAAKjB,KAAK3R,GAAGvJ,EAAE,EAAEmB,EAAE4b,QAAQ,IAAI,mBAAmB5b,EAAE4b,UAAU5b,EAAE4b,QAAQ,CAAC5b,EAAE4b,UAAU,EAAE5b,EAAE4b,QAAQzZ,QAAQnC,EAAE4b,QAAQ1O,KAAVlN,GAAkB,OAAOgb,KAAKnc,EAAEsB,KAAK,GAAqD2V,EAAON,QAAQ3W,C,gvECCv0xB,IACMD,WADFid,GAEqCjd,YADnCA,WAAiC,oBAAbE,UAA4BA,SAASC,cAAgBD,SAASC,cAAcC,SAAM8c,IACxC7c,WAC3D,SACA4c,GAIT,IAAI3a,EAA2D2V,EAAG1X,EAHhE0c,EAAUA,GAAW,CAAC,EAGlB3a,IAAIA,OAAqB,IAAZ2a,EAA0BA,EAAU,CAAC,GAAY3a,EAAEf,MAAM,IAAIC,SAAQ,SAASR,EAAEU,GAAGuW,EAAGjX,EAAET,EAAEmB,CAAC,IAAG,IAAuNU,EAAEuD,EAAEiD,EAAEuU,EAAG1c,EAAE6F,EAA9N6R,EAAGnW,OAAOC,OAAO,CAAC,EAAEK,GAAGV,EAAE,iBAAiByW,EAAG,iBAAiBhW,OAAOzB,EAAE,mBAAmB2B,cAAcrB,EAAE,iBAAiBuB,SAAS,iBAAiBA,QAAQC,UAAU,iBAAiBD,QAAQC,SAASC,KAAKmB,EAAE,GAClU5C,GAAE4C,EAAElD,EAAE,gBAAwBkD,GAAG,IAAIb,UAAU,IAAIqD,EAAE,KAAK7F,IAAI0c,EAAG,EAAQ,MAAM1c,EAAE,EAAQ,MAAO,EAAG2B,EAAE,SAASpB,EAAEU,GAAwB,OAArB4E,IAAItF,EAAEP,EAAEyC,UAAUlC,GAAUmc,EAAGha,aAAanC,EAAEU,OAAE,EAAO,OAAO,EAAEkH,EAAE5H,KAAIA,EAAEoB,EAAEpB,GAAE,IAAMR,SAASQ,EAAE,IAAIoC,WAAWpC,IAAWA,GAAG2E,EAAE,CAAC3E,EAAEU,EAAEzB,KAAKqG,IAAItF,EAAEP,EAAEyC,UAAUlC,GAAGmc,EAAG9Z,SAASrC,GAAE,SAASS,EAAES,GAAGT,EAAExB,EAAEwB,GAAGC,EAAEQ,EAAE1B,OAAO,GAAC,EAAG,EAAEiC,QAAQa,KAAKC,SAAS3B,EAAEa,QAAQa,KAAK,GAAGE,QAAQ,MAAM,MAAMf,QAAQa,KAAKG,MAAM,GAAGhB,QAAQiB,GAAG,qBAAoB,SAAS1C,GAAG,MAAMA,CAAE,IAAGyB,QAAQiB,GAAG,sBAAqB,SAAS1C,GAAG,MAAMA,CAC/f,IAAGsB,EAAE0B,QAAQ,WAAW,MAAM,4BAA4B,IAAUqU,GAAIzX,KAAEA,EAAEkD,EAAEO,KAAKC,SAASC,KAAK,oBAAoBrE,UAAUA,SAASC,gBAAgB2D,EAAE5D,SAASC,cAAcC,KAAKJ,aAAa8D,EAAE9D,YAAmC8D,EAAvB,IAAIA,EAAEU,QAAQ,SAAWV,EAAEW,OAAO,EAAEX,EAAEN,QAAQ,SAAS,IAAIkB,YAAY,KAAK,GAAK,GAAGtC,EAAEpB,IAAI,IAAIU,EAAE,IAAIiD,eAA+C,OAAhCjD,EAAEkD,KAAK,MAAM5D,GAAE,GAAIU,EAAEmD,KAAK,MAAanD,EAAEoD,cAAclE,IAAIgI,EAAE5H,IAAI,IAAIU,EAAE,IAAIiD,eAA4E,OAA7DjD,EAAEkD,KAAK,MAAM5D,GAAE,GAAIU,EAAEqD,aAAa,cAAcrD,EAAEmD,KAAK,MAAa,IAAIzB,WAAW1B,EAAEsD,SAAQ,GAC3fW,EAAE,CAAC3E,EAAEU,EAAEzB,KAAK,IAAIwB,EAAE,IAAIkD,eAAelD,EAAEmD,KAAK,MAAM5D,GAAE,GAAIS,EAAEsD,aAAa,cAActD,EAAEwD,OAAO,KAAK,KAAKxD,EAAEyD,QAAQ,GAAGzD,EAAEyD,QAAQzD,EAAEuD,SAAStD,EAAED,EAAEuD,UAAU/E,GAAE,EAAGwB,EAAE0D,QAAQlF,EAAEwB,EAAEoD,KAAK,KAAI,GAAG,IAAoJlE,EAAhJ4X,EAAGjW,EAAEuD,OAAO5B,QAAQqB,IAAIC,KAAKtB,SAASiC,EAAE5D,EAAEwD,UAAU7B,QAAQwB,KAAKF,KAAKtB,SAASjC,OAAOC,OAAOK,EAAE6V,GAAIA,EAAG,KAAK7V,EAAEyD,cAAcnE,EAAEU,EAAEyD,aAAmBzD,EAAE2D,aAAatF,EAAE2B,EAAE2D,YAA8B3D,EAAE6D,cAAkB,iBAAiBC,aAAa1F,EAAE,mCAClb,IAAI8F,EAGwIyS,EAAG5T,EAAE4D,EAAEvC,EAAE5D,EAH/I2V,GAAG,EAAGE,EAAG,oBAAoBlS,YAAY,IAAIA,YAAY,aAAQ,EACvE,SAASsS,EAAG/X,EAAEU,EAAEzB,GAAU,IAAIwB,GAAXC,KAAK,GAAUzB,EAAE,IAAIA,EAAEyB,EAAEV,EAAEf,MAAMA,GAAGwB,MAAMxB,EAAE,GAAG,GAAGA,EAAEyB,GAAGV,EAAER,QAAQmY,EAAG,OAAOA,EAAGhS,OAAO3F,EAAE6F,SAASnF,EAAEzB,IAAI,IAAIwB,EAAE,GAAGC,EAAEzB,GAAG,CAAC,IAAIiC,EAAElB,EAAEU,KAAK,GAAK,IAAFQ,EAAM,CAAC,IAAIH,EAAS,GAAPf,EAAEU,KAAQ,GAAG,MAAQ,IAAFQ,GAAOT,GAAGqF,OAAOC,cAAgB,GAAF7E,IAAO,EAAEH,OAAO,CAAC,IAAIJ,EAAS,GAAPX,EAAEU,KAAwE,OAAhEQ,EAAE,MAAQ,IAAFA,IAAU,GAAFA,IAAO,GAAGH,GAAG,EAAEJ,GAAK,EAAFO,IAAM,GAAGH,GAAG,GAAGJ,GAAG,EAAS,GAAPX,EAAEU,MAAgBD,GAAGqF,OAAOC,aAAa7E,IAAIA,GAAG,MAAMT,GAAGqF,OAAOC,aAAa,MAAM7E,GAAG,GAAG,MAAQ,KAAFA,GAAQ,CAAC,MAAMT,GAAGqF,OAAOC,aAAa7E,EAAE,CAAC,OAAOT,CAAC,CAAC,SAASV,EAAEC,EAAEU,GAAG,OAAOV,KAAK,GAAG+X,EAAG9P,EAAEjI,EAAEU,GAAG,EAAE,CAC1e,SAASmH,EAAE7H,EAAEU,EAAEzB,EAAEwB,GAAU,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIS,EAA9BjC,KAAK,EAA6BwB,EAAExB,EAAEwB,EAAE,EAAE,IAAI,IAAIM,EAAE,EAAEA,EAAEf,EAAEuC,SAASxB,EAAE,CAAC,IAAIJ,EAAEX,EAAEkG,WAAWnF,GAAgF,GAA1E,OAAOJ,GAAG,OAAOA,IAA2BA,EAAE,QAAU,KAAFA,IAAS,IAAM,KAA3CX,EAAEkG,aAAanF,IAAoC,KAAKJ,EAAE,CAAC,GAAG1B,GAAGwB,EAAE,MAAMC,EAAEzB,MAAM,GAAG0B,CAAC,KAAK,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAG1B,EAAE,GAAGwB,EAAE,MAAMC,EAAEzB,MAAM,GAAG,IAAI0B,GAAG,CAAC,KAAK,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAG1B,EAAE,GAAGwB,EAAE,MAAMC,EAAEzB,MAAM,GAAG,IAAI0B,GAAG,EAAE,KAAK,CAAC,GAAG1B,EAAE,GAAGwB,EAAE,MAAMC,EAAEzB,MAAM,GAAG,IAAI0B,GAAG,GAAGD,EAAEzB,MAAM,GAAG,IAAI0B,GAAG,GAAG,EAAE,CAACD,EAAEzB,MAAM,GAAG,IAAI0B,GAAG,EAAE,EAAE,CAACD,EAAEzB,MAAM,GAAG,IAAM,GAAF0B,CAAI,CAAC,CAAY,OAAXD,EAAEzB,IAAI,GAAG,EAASA,EAAEiC,CAAC,CACld,SAAS+E,EAAEjG,GAAG,IAAI,IAAIU,EAAE,EAAEzB,EAAE,EAAEA,EAAEe,EAAEuC,SAAStD,EAAE,CAAC,IAAIwB,EAAET,EAAEkG,WAAWjH,GAAG,KAAKwB,EAAEC,IAAI,MAAMD,EAAEC,GAAG,EAAE,OAAOD,GAAG,OAAOA,GAAGC,GAAG,IAAIzB,GAAGyB,GAAG,CAAC,CAAC,OAAOA,CAAC,CAAgB,SAASyX,IAAK,IAAInY,EAAEwF,EAAEhG,OAAOyY,EAAGjY,EAAEsB,EAAE8E,MAAM/B,EAAE,IAAIgC,UAAUrG,GAAGsB,EAAEgF,OAAO,IAAIC,WAAWvG,GAAGsB,EAAEkF,OAAOd,EAAE,IAAIe,WAAWzG,GAAGsB,EAAEoF,OAAOuB,EAAE,IAAI7F,WAAWpC,GAAGsB,EAAEqF,QAAQ,IAAIC,YAAY5G,GAAGsB,EAAEuF,QAAQ/E,EAAE,IAAIgF,YAAY9G,GAAGsB,EAAEyF,QAAQ,IAAIC,aAAahH,GAAGsB,EAAE2F,QAAQ,IAAIC,aAAalH,EAAE,CAAC,IAAIqY,EAAG,GAAGE,EAAG,GAAGE,EAAG,GAAG,SAASE,IAAK,IAAI3Y,EAAEsB,EAAE4G,OAAOC,QAAQkQ,EAAGjQ,QAAQpI,EAAE,CACze,IAAsQwE,EAAlQ3E,EAAE,EAAEiI,EAAE,KAAKlD,EAAE,KAAK,SAASlF,EAAEM,GAA6I,MAAvIsB,EAAEsH,SAAQtH,EAAEsH,QAAQ5I,GAAsBkF,EAAnBlF,EAAE,WAAWA,EAAE,KAASyX,GAAG,EAAGzX,EAAE,IAAIoF,YAAYyD,aAAa7I,EAAE,4CAA4CT,EAAES,GAASA,CAAE,CAAC,SAAS6Y,IAAK,OAAOrU,EAAEuE,WAAW,wCAAwC,CAAyB,GAAlBvE,EAAE,iBAAoBqU,IAAK,CAAC,IAAIE,EAAGvU,EAAEA,EAAElD,EAAEU,WAAWV,EAAEU,WAAW+W,EAAGjW,GAAGA,EAAEiW,CAAE,CAAC,SAASE,IAAK,IAAIjZ,EAAEwE,EAAE,IAAI,GAAGxE,GAAGwE,GAAG7E,EAAE,OAAO,IAAIyC,WAAWzC,GAAG,GAAGiI,EAAE,OAAOA,EAAE5H,GAAG,KAAK,iDAAgE,CAAb,MAAMU,GAAGhB,EAAEgB,EAAE,CAAC,CAC7F,SAASqB,EAAE/B,GAAG,KAAK,EAAEA,EAAEuC,QAAQvC,EAAEmI,OAAFnI,CAAUsB,EAAE,CACvb,SAAS+X,EAAGrZ,GAAGkJ,KAAKiQ,GAAGnZ,EAAE,GAAGkJ,KAAK6R,GAAG,SAASra,GAAGoB,EAAEoH,KAAKiQ,GAAG,GAAG,IAAI,GAAGzY,CAAC,EAAEwI,KAAK8Q,GAAG,SAAStZ,GAAGoB,EAAEoH,KAAKiQ,GAAG,GAAG,IAAI,GAAGzY,CAAC,EAAEwI,KAAKgR,GAAG,WAAWxU,EAAEwD,KAAKiQ,IAAI,IAAI,GAAG,CAAC,EAAEjQ,KAAK4M,GAAG,WAAWzR,EAAE6E,KAAKiQ,GAAG,IAAI,IAAI,GAAG,CAAC,EAAEjQ,KAAK2R,GAAG,WAAWxW,EAAE6E,KAAKiQ,GAAG,IAAI,IAAI,GAAG,CAAC,EAAEjQ,KAAK2M,GAAG,SAASnV,EAAEzB,GAAGiK,KAAK4Q,KAAK5Q,KAAK6R,GAAGra,GAAGwI,KAAK8Q,GAAG/a,GAAGiK,KAAKgR,KAAKhR,KAAK4M,KAAK5M,KAAK2R,IAAI,EAAE3R,KAAK4Q,GAAG,WAAWhY,EAAEoH,KAAKiQ,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC,CAAU,SAASW,EAAG9Z,GAAG,IAAIU,EAAEuF,EAAEjG,GAAG,EAAEf,EAAEgB,GAAES,GAAiB,OAAdzB,GAAG4I,EAAE7H,EAAEqE,EAAEpF,EAAEyB,GAAUzB,CAAC,CACrB,IAAIsG,EAAE,CAAC,EACpa,SAASyU,IAAK,IAAIhS,EAAE,CAAC,IAAsNtH,EAAlNV,EAAE,CAACuR,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiBC,WAAWA,UAAUC,WAAWD,UAAUC,UAAU,IAAI,KAAKtP,QAAQ,IAAI,KAAK,SAASrB,EAAEP,GAAG,kBAAoB,IAAIF,KAAK6E,OAAE,IAASA,EAAE7E,UAAUV,EAAEU,GAAGV,EAAEU,GAAG6E,EAAE7E,GAAG,IAAIzB,EAAE,GAAG,IAAIyB,KAAKV,EAAEf,EAAE2K,KAAKlJ,EAAE,IAAIV,EAAEU,IAAIsH,EAAE/I,CAAC,CAAC,OAAO+I,CAAC,CAAC,IAAIA,EAAEkS,EAAG,CAAC,KAAK,GAAG,IAAI,SAAS/Z,EAAEH,GAAG,OAAO,GAAIA,EAAE,IAAI,GAAIA,EAAE,KAAK,GAAIA,EAAE,IAAI,CAAC,IAAIqa,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAE7e,SAASI,GAAG3a,EAAEU,EAAEzB,EAAEwB,GAAG,SAASS,EAAEJ,EAAED,EAAEvB,GAAG,IAAIwB,EAAE,iBAAiBA,EAAEA,EAAE2R,WAAW3R,GAAG,GAAGA,EAAEyB,OAAO1B,GAAGC,EAAExB,EAAE,GAAGwB,EAAE,OAAOA,CAAC,CAAC,SAASC,EAAED,EAAED,GAAG,OAAOK,EAAEJ,EAAED,EAAE,IAAI,CAAC,SAASF,EAAEG,EAAED,GAAG,SAASvB,EAAEma,GAAI,OAAO,EAAEA,GAAI,EAAE,EAAEA,EAAG,EAAE,CAAC,CAAC,IAAItS,EAAmH,OAAjH,KAAKA,EAAE7H,EAAEwB,EAAEuP,cAAcxP,EAAEwP,iBAAiB,KAAKlJ,EAAE7H,EAAEwB,EAAE4R,WAAW7R,EAAE6R,eAAevL,EAAE7H,EAAEwB,EAAE6R,UAAU9R,EAAE8R,YAAmBxL,CAAC,CAAC,SAAShB,EAAErF,GAAG,OAAOA,EAAE8R,UAAU,KAAK,EAAE,OAAO,IAAIxC,KAAKtP,EAAEuP,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAOvP,EAAE,KAAK,EAAE,OAAO,IAAIsP,KAAKtP,EAAEuP,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAID,KAAKtP,EAAEuP,cAChf,EAAE,GAAG,KAAK,EAAE,OAAO,IAAID,KAAKtP,EAAEuP,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAID,KAAKtP,EAAEuP,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAID,KAAKtP,EAAEuP,cAAc,EAAE,GAAG,IAAI,CAAC,SAASzO,EAAEd,GAAG,IAAID,EAAEC,EAAEiY,GAAG,IAAIjY,EAAE,IAAIsP,KAAK,IAAKA,KAAKtP,EAAEmY,GAAG,KAAK,EAAE,GAAIlG,WAAW,EAAElS,GAAG,CAAC,IAAIvB,EAAEwB,EAAE4R,WAAWvL,GAAGhH,EAAEW,EAAEuP,eAAegK,EAAGE,IAAIjb,GAAG,KAAGuB,EAAEsG,EAAErG,EAAE6R,WAAoH,CAAC7R,EAAEkS,QAAQlS,EAAE6R,UAAU9R,GAAG,KAAK,CAAzIA,GAAGsG,EAAErG,EAAE6R,UAAU,EAAE7R,EAAEkS,QAAQ,GAAG,GAAG1T,EAAEwB,EAAEmS,SAAS3T,EAAE,IAAIwB,EAAEmS,SAAS,GAAGnS,EAAEoS,YAAYpS,EAAEuP,cAAc,GAAwC,CACxa,OADya/Q,EAAE,IAAI8Q,KAAKtP,EAAEuP,cAAc,EAAE,EAAE,GAAGxP,EAAEsF,EAAE,IAAIiK,KAAKtP,EAAEuP,cACve,EAAE,IAAI/Q,EAAE6G,EAAE7G,GAAU,GAAGqB,EAAEE,EAAEC,GAAG,GAAGH,EAAErB,EAAEwB,GAAGA,EAAEuP,cAAc,EAAEvP,EAAEuP,cAAcvP,EAAEuP,cAAc,CAAC,CAAC,IAAI7O,EAAEkE,EAAEjF,EAAE,IAAI,IAAI,GACyE,IAAI,IAAIX,KAD9EW,EAAE,CAACga,GAAG/U,EAAEjF,GAAG,IAAI,GAAG8Z,GAAG7U,EAAEjF,EAAE,GAAG,IAAI,GAAG4Y,GAAG3T,EAAEjF,EAAE,GAAG,IAAI,GAAGgZ,GAAG/T,EAAEjF,EAAE,IAAI,IAAI,GAAG8Y,GAAG7T,EAAEjF,EAAE,IAAI,IAAI,GAAGwY,GAAGvT,EAAEjF,EAAE,IAAI,IAAI,GAAG4X,GAAG3S,EAAEjF,EAAE,IAAI,IAAI,GAAGsY,GAAGrT,EAAEjF,EAAE,IAAI,IAAI,GAAGwa,GAAGvV,EAAEjF,EAAE,IAAI,IAAI,GAAG4Z,GAAG3U,EAAEjF,EAAE,IAAI,IAAI,GAAGka,GAAGnZ,EAAEzB,EAAEyB,GAAG,IAAIvC,EAAEc,EAAEd,GAAGuC,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,WAC7e,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAqBvC,EAAEA,EAAEuD,QAAQ,IAAIoR,OAAO9T,EAAE,KAAK0B,EAAE1B,IAAI,IAAI6Z,EAAG,2DAA2D9F,MAAM,KAAKgC,EAAG,wFAAwFhC,MAAM,KAG5F,IAAI/T,KAH6F0B,EAAE,CAAC,KAAK,SAASV,GAAG,OAAO6Y,EAAG7Y,EAAEuX,IAAIvE,UAAU,EAAE,EAAE,EAAE,KAAK,SAAShT,GAAG,OAAO6Y,EAAG7Y,EAAEuX,GAAG,EAAE,KAAK,SAASvX,GAAG,OAAO+U,EAAG/U,EAAEyY,IAAIzF,UAAU,EAC9hB,EAAE,EAAE,KAAK,SAAShT,GAAG,OAAO+U,EAAG/U,EAAEyY,GAAG,EAAE,KAAK,SAASzY,GAAG,OAAOC,GAAGD,EAAEmY,GAAG,MAAM,IAAI,EAAE,EAAE,EAAE,KAAK,SAASnY,GAAG,OAAOC,EAAED,EAAE2Y,GAAG,EAAE,EAAE,KAAK,SAAS3Y,GAAG,OAAOI,EAAEJ,EAAE2Y,GAAG,EAAE,IAAI,EAAE,KAAK,SAAS3Y,GAAG,OAAOc,EAAEd,GAAG2R,WAAWqB,UAAU,EAAE,EAAE,KAAK,SAAShT,GAAG,OAAOc,EAAEd,EAAE,EAAE,KAAK,SAASA,GAAG,OAAOC,EAAED,EAAEuY,GAAG,EAAE,EAAE,KAAK,SAASvY,GAAkC,OAAxB,IAAPA,EAAEA,EAAEuY,IAAQvY,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAWC,EAAED,EAAE,EAAE,EAAE,KAAK,SAASA,GAAG,IAAI,IAAID,EAAE,EAAEvB,EAAE,EAAEA,GAAGwB,EAAEyY,GAAG,EAAE1Y,IAAIV,EAAEW,EAAEmY,GAAG,MAAMoB,EAAGE,IAAIjb,MAAM,OAAOyB,EAAED,EAAE2Y,GAAG5Y,EAAE,EAAE,EAAE,KAAK,SAASC,GAAG,OAAOC,EAAED,EAAEyY,GAAG,EAAE,EAAE,EAAE,KAAK,SAASzY,GAAG,OAAOC,EAAED,EAAEyZ,GACpf,EAAE,EAAE,KAAK,WAAW,MAAM,IAAI,EAAE,KAAK,SAASzZ,GAAG,OAAO,GAAGA,EAAEuY,IAAI,GAAGvY,EAAEuY,GAAG,KAAK,IAAI,EAAE,KAAK,SAASvY,GAAG,OAAOC,EAAED,EAAE2Z,GAAG,EAAE,EAAE,KAAK,WAAW,MAAM,IAAI,EAAE,KAAK,SAAS3Z,GAAG,OAAOA,EAAEuX,IAAI,CAAC,EAAE,KAAK,SAASvX,GAAG,OAAOC,EAAEwP,KAAKwD,OAAOjT,EAAEiY,GAAG,EAAEjY,EAAEuX,IAAI,GAAG,EAAE,EAAE,KAAK,SAASvX,GAAG,IAAID,EAAE0P,KAAKwD,OAAOjT,EAAEiY,GAAG,GAAGjY,EAAEuX,GAAG,GAAG,GAAG,GAA+B,GAA5B,IAAIvX,EAAEuX,GAAG,IAAIvX,EAAEiY,GAAG,GAAG,GAAGlY,IAAOA,EAAE,IAAIA,IAAwB,IAApBvB,GAAGwB,EAAEuX,GAAG,IAAIvX,EAAEiY,IAAI,IAAQ,GAAGzZ,GAAGa,EAAEW,EAAEmY,MAAMpY,EAAE,QAAQ,CAACA,EAAE,GAAG,IAAIvB,GAAGwB,EAAEuX,GAAG,EAAEvX,EAAEiY,GAAG,GAAG,GAAG,GAAGzZ,GAAG,GAAGA,GAAGa,EAAEW,EAAEmY,GAAG,IAAI,KAAKpY,GAAG,CAAC,OAAOE,EAAEF,EAAE,EAAE,EAAE,KAAK,SAASC,GAAG,OAAOA,EAAEuX,EAAE,EAAE,KAAK,SAASvX,GAAG,OAAOC,EAAEwP,KAAKwD,OAAOjT,EAAEiY,GACxhB,GAAGjY,EAAEuX,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,KAAK,SAASvX,GAAG,OAAOA,EAAEmY,GAAG,MAAMxG,WAAWqB,UAAU,EAAE,EAAE,KAAK,SAAShT,GAAG,OAAOA,EAAEmY,GAAG,IAAI,EAAE,KAAK,SAASnY,GAAU,IAAID,EAAE,IAAbC,EAAEA,EAAEuZ,IAA+B,OAAjBvZ,EAAEyP,KAAKyD,IAAIlT,GAAG,IAAUD,EAAE,IAAI,KAAKiF,OAAO,QAAQhF,EAAE,GAAG,IAAIA,EAAE,KAAK2B,OAAO,EAAE,EAAE,KAAK,SAAS3B,GAAG,OAAOA,EAAE6Z,EAAE,EAAE,KAAK,WAAW,MAAM,GAAG,GAAG1b,EAAEA,EAAEuD,QAAQ,MAAM,QAAqBhB,EAAEvC,EAAEgV,SAASnU,KAAKb,EAAEA,EAAEuD,QAAQ,IAAIoR,OAAO9T,EAAE,KAAK0B,EAAE1B,GAAGW,KAAsC,OAARX,EAPxZ,SAAYE,GAAG,IAAIU,EAAEwT,MAAMjO,EAAEjG,GAAG,GAAqB,OAAlB6H,EAAE7H,EAAEU,EAAE,EAAEA,EAAE6B,QAAe7B,CAAC,CAO6V+Z,CAA3Bxb,EAAEA,EAAEuD,QAAQ,QAAQ,MAAgB1C,EAAEyC,OAAO7B,EAAS,GAAE2D,EAAE8P,IAAIrU,EAAEE,IAAI,GAAUF,EAAEyC,OAAO,EAAC,CACvd,IAAIsY,GAAG,CAAC7a,EAAE,SAASA,GAAG,OAAOC,GAAED,EAAE,IAAI,EAAE,EAAEsB,EAAE,SAAStB,EAAEU,EAAEzB,GAA4B,MAAzB,IAAKoa,EAAGrZ,GAAI6V,GAAGnV,EAAEzB,GAAce,CAAE,EAAEkB,EAAE,WAAW,OAAO,CAAC,EAAE+G,EAAE,WAAW,EAAErG,EAAE,WAAW,EAAEuF,EAAE,WAAW,EAAE7G,EAAE,WAAW,OAAO,CAAC,EAAEkF,EAAE,WAAW,EAAE/F,EAAE,WAAW,EAAEC,EAAE,WAAW,EAAEH,EAAE,WAAW,EAAE6B,EAAE,WAAW,EAAElB,EAAE,WAAW,EAAEH,EAAE,WAAW,EAAEyB,EAAE,WAAW,EAAEnB,EAAE,WAAW,EAAE8F,EAAE,WAAWzG,EAAE,iHAAiH,EAAEkB,EAAE,WAAWlB,EAAE,iHAAiH,EAClkBiB,EAAE,WAAW,OAAOyP,KAAKhG,KAAK,EAAEvC,EAAE,WAAW,OAAM,CAAE,EAAE5B,EAAE,SAASjG,EAAEU,GAAGV,EAAE,IAAIoQ,KAAK,KAAKtO,EAAE9B,IAAI,GAAG,WAAW0F,EAAE1F,EAAE,IAAI,KAAK0F,EAAEhF,GAAG,IAAI,GAAGV,EAAEwU,gBAAgB9O,EAAEhF,EAAE,GAAG,IAAI,GAAGV,EAAEyU,gBAAgB/O,EAAEhF,EAAE,GAAG,IAAI,GAAGV,EAAE0U,cAAchP,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE2U,aAAajP,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE4U,cAAclP,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE6U,iBAAiB,KAAKnP,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE8U,YAAYpP,EAAEhF,EAAE,IAAI,IAAI,IAAIV,EAAE+S,UAAU3C,KAAK2E,IAAI/U,EAAE6U,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,CAAC,EAAExQ,EAAE,SAASrE,EAAEU,GAAGV,EAAE,IAAIoQ,KAAK,KAAKtO,EAAE9B,IAAI,GAAG,WAAW0F,EAAE1F,EAAE,IAAI,KAAK0F,EAAEhF,GAAG,IAAI,GAAGV,EAAEgV,aACnftP,EAAEhF,EAAE,GAAG,IAAI,GAAGV,EAAEiV,aAAavP,EAAEhF,EAAE,GAAG,IAAI,GAAGV,EAAEkV,WAAWxP,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE2S,UAAUjN,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE0S,WAAWhN,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAEqQ,cAAc,KAAK3K,EAAEhF,EAAE,IAAI,IAAI,GAAGV,EAAE4S,SAAS,IAAI3T,EAAE,IAAImR,KAAKpQ,EAAEqQ,cAAc,EAAE,GAAG3K,EAAEhF,EAAE,IAAI,IAAI,IAAIV,EAAE+S,UAAU9T,EAAE8T,WAAW,MAAM,EAAErN,EAAEhF,EAAE,IAAI,IAAI,IAAK,GAAGV,EAAEsQ,oBAAqB,IAAI7P,EAAE,IAAK2P,KAAKpQ,EAAEqQ,cAAc,EAAE,GAAIC,oBAAoBrR,EAAEA,EAAEqR,oBAAoB5K,EAAEhF,EAAE,IAAI,IAAI,GAAgD,GAA5CD,GAAGxB,GAAGe,EAAEsQ,qBAAqBC,KAAK4E,IAAIlW,EAAEwB,GAAK,EAAEI,EAAE,SAASb,GAAG,IAAIU,EAAE,IAAI0P,KAAK1K,EAAE1F,EAAE,IAAI,IAAI,GAAG,KAAK0F,EAAE1F,EAAE,IACnf,IAAI,GAAG0F,EAAE1F,EAAE,IAAI,IAAI,GAAG0F,EAAE1F,EAAE,GAAG,IAAI,GAAG0F,EAAE1F,EAAE,GAAG,IAAI,GAAG0F,EAAE1F,GAAG,IAAI,GAAG,GAAGf,EAAEyG,EAAE1F,EAAE,IAAI,IAAI,GAAGS,EAAEC,EAAE4P,oBAAoBpP,EAAE,IAAIkP,KAAK1P,EAAE2P,cAAc,EAAE,GAAGtP,EAAE,IAAKqP,KAAK1P,EAAE2P,cAAc,EAAE,GAAIC,oBAAoB3P,EAAEO,EAAEoP,oBAAoBnK,EAAEoK,KAAK4E,IAAIxU,EAAEI,GAClL,OADqL,EAAE9B,EAAEyG,EAAE1F,EAAE,IAAI,IAAI,GAAGyQ,OAAO1P,GAAGJ,GAAGwF,GAAG1F,GAAG,EAAExB,IAAIkH,GAAG1F,KAAKM,EAAEwP,KAAKC,IAAI7P,EAAEI,GAAGL,EAAE0U,QAAQ1U,EAAEqS,UAAU,MAAM,EAAE9T,EAAEkH,EAAEpF,GAAGN,KAAKiF,EAAE1F,EAAE,IAAI,IAAI,GAAGU,EAAEkS,SAASlN,EAAE1F,EAAE,IAAI,IAAI,IAAIU,EAAEqS,UAAU7R,EAAE6R,WAAW,MAAM,EAAErN,EAAE1F,GAAG,IAAI,GAAGU,EAAEsU,aAAatP,EAAE1F,EAAE,GAAG,IAAI,GAAGU,EAAEuU,aAAavP,EAAE1F,EAAE,GAAG,IAAI,GAAGU,EAAEwU,WAAWxP,EAAE1F,EACtf,IAAI,IAAI,GAAGU,EAAEiS,UAAUjN,EAAE1F,EAAE,IAAI,IAAI,GAAGU,EAAEgS,WAAkBhS,EAAEqS,UAAU,IAAI,CAAC,EAAEpO,EAAE,WAAW,OAAO,EAAE,EAAEiD,EAAE,WAAW,EAAEtI,EAd6P,SAASyI,EAAE/H,EAAEU,EAAEzB,GAAG8I,EAAE4R,KAAK5R,EAAE4R,IAAG,EAA/Y,SAAY3Z,EAAEU,EAAEzB,GAAG,SAASwB,EAAEmB,GAAG,OAAOA,EAAEA,EAAEsO,eAAeC,MAAM,sBAAsBvO,EAAE,GAAG,KAAK,CAAC,IAAIV,GAAE,IAAKkP,MAAMC,cAActP,EAAE,IAAIqP,KAAKlP,EAAE,EAAE,GAAGP,EAAE,IAAIyP,KAAKlP,EAAE,EAAE,GAAGA,EAAEH,EAAEuP,oBAAoB,IAAInK,EAAExF,EAAE2P,oBAAoB5K,EAAE1F,GAAG,IAAI,GAAG,GAAGuQ,KAAKC,IAAItP,EAAEiF,GAAGT,EAAEhF,GAAG,IAAI,GAAG+P,OAAOvP,GAAGiF,GAAGnG,EAAES,EAAEM,GAAGL,EAAED,EAAEE,GAAGX,EAAE8Z,EAAG9Z,GAAGU,EAAEoZ,EAAGpZ,GAAGyF,EAAEjF,GAAGY,EAAE7C,GAAG,IAAI,GAAGe,EAAE8B,EAAE7C,EAAE,GAAG,IAAI,GAAGyB,IAAIoB,EAAE7C,GAAG,IAAI,GAAGyB,EAAEoB,EAAE7C,EAAE,GAAG,IAAI,GAAGe,EAAE,CAAkC8V,CAAG9V,EAAEU,EAAEzB,GAAG,EAcpS6B,EAAE,WAAWpB,EAAE,GAAG,EAAEE,EAAE,WAAW,OAAO,UAAU,EAAEmB,EAAEb,EAAE,KAAK,IAAIF,EAAEyB,QAAQwP,SAAS,OAAO,IAAIjR,EAAE,GAAGA,EAAE,GAAG,KAAK,IAAIoE,YAAYgG,MAAMzK,EAAE,SAASK,EAAEU,EAAEzB,GAAGgJ,EAAEqN,WAAWtV,IAAI,EAAEU,IAAI,EAAEA,EAAEzB,IAAI,EAAE,EAAEwB,EAAE,SAAST,GAAG,IAAIU,EAAEuH,EAAE1F,OAAc,GAAG,YAAVvC,KAAK,GAAkB,OAAM,EAAG,IAAI,IAAIf,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAIwB,EAAEC,GAAG,EAAE,GAAGzB,GAAGwB,EAAE8P,KAAK4E,IAAI1U,EAAET,EAAE,WAAW,IAAIkB,EAAEqP,KAAK9P,EAAE8P,KAAKC,IAAIxQ,EAAES,GAAGS,EAAEA,EAAEiU,IAAIM,KAAKvU,EAAE,WAAWT,GAAG,MAAMA,EAAE,OAChf,OAAOT,EAAE,CAAC,IAAIwF,EAAEkQ,KAAKxU,EAAE+W,EAAGtQ,WAAW,QAAQ,IAAIwQ,IAAK,IAAIpX,EAAE,EAAE,MAAMf,CAAW,CAAT,MAAMW,GAAG,CAACI,OAAE,CAAM,CAAC,GAAGA,EAAE,OAAM,CAAE,CAAC,OAAM,CAAE,EAAEuE,EAAE,SAAStF,EAAEU,GAAG,IAAIzB,EAAE,EAA8I,OAA5I+a,IAAK/N,SAAQ,SAASxL,EAAES,GAAG,IAAIH,EAAEL,EAAEzB,EAAsB,IAApBiC,EAAEY,EAAE9B,EAAE,EAAEkB,GAAG,IAAI,GAAGH,EAAMA,EAAE,EAAEA,EAAEN,EAAE8B,SAASxB,EAAEsD,EAAEnD,KAAK,IAAI,GAAGT,EAAEyF,WAAWnF,GAAGsD,EAAEnD,GAAG,IAAI,GAAG,EAAEjC,GAAGwB,EAAE8B,OAAO,CAAC,IAAU,CAAC,EAAE2C,EAAE,SAASlF,EAAEU,GAAG,IAAIzB,EAAE+a,IAAKlY,EAAE9B,GAAG,IAAI,GAAGf,EAAEsD,OAAO,IAAI9B,EAAE,EAAsD,OAApDxB,EAAEgN,SAAQ,SAAS/K,GAAGT,GAAGS,EAAEqB,OAAO,CAAC,IAAGT,EAAEpB,GAAG,IAAI,GAAGD,EAAS,CAAC,EAAExB,EAAE,WAAW,OAAO,EAAE,EAAE+G,EAAE,WAAW,OAAO,EAAE,EAAElG,EAAE,WAAW,OAAO,EAAE,EAAEM,EAAE,SAASJ,EAAEU,EAAEzB,EAAEwB,GAAG,IAAI,IAAIS,EACzf,EAAEH,EAAE,EAAEA,EAAE9B,EAAE8B,IAAI,CAAC,IAAIJ,EAAEmB,EAAEpB,GAAG,IAAI,GAAGyF,EAAErE,EAAEpB,EAAE,GAAG,IAAI,GAAGA,GAAG,EAAE,IAAI,IAAIkB,EAAE,EAAEA,EAAEuE,EAAEvE,IAAI,CAAC,IAAIJ,EAAEyG,EAAEtH,EAAEiB,IAAI,GAAG9B,EAAEoa,EAAGla,GAAG,IAAIwB,GAAG,KAAKA,IAAI,IAAIxB,EAAEuX,EAAGrS,GAAG6S,EAAGjY,EAAE,IAAIA,EAAEyC,OAAO,GAAGzC,EAAE8J,KAAKpI,EAAE,CAACN,GAAGiF,CAAC,CAAe,OAAdrE,EAAErB,GAAG,IAAI,GAAGS,EAAS,CAAC,EAAE4B,EAAE6X,GAAGja,EAAE,SAASV,EAAEU,EAAEzB,EAAEwB,GAAG,OAAOka,GAAG3a,EAAEU,EAAEzB,EAAEwB,EAAE,IACvO,WAAY,SAAST,EAAEkB,GAAGI,EAAEqU,IAAIzU,EAAE0U,QAAQpQ,EAAElE,EAAEqU,IAAIjQ,EAAEyS,IAAKI,EAAGnQ,QAAQ9G,EAAEqU,IAAI7T,GAAGjC,IAAIyB,EAAEyU,wBAAwBzU,EAAEyU,uBAAuBlW,GAAG,GAAGA,IAAI,OAAOiI,IAAIkO,cAAclO,GAAGA,EAAE,MAAMlD,IAAI1D,EAAE0D,EAAEA,EAAE,KAAK1D,KAAK,CAAC,SAASR,EAAEQ,GAAGlB,EAAEkB,EAAE+U,SAAS,CAAC,SAAShX,EAAEiC,GAAG,OAnBjP,WAAc,IAAIvB,IAAI0X,GAAIzX,GAAG,CAAC,GAAG,mBAAmBuW,QAAQ3R,EAAEuE,WAAW,WAAW,OAAOoN,MAAM3R,EAAE,CAAC4R,YAAY,gBAAgBC,MAAK,SAASrW,GAAG,IAAIA,EAAEsW,GAAG,KAAK,uCAAuC9R,EAAE,IAAI,OAAOxE,EAAEuW,aAAa,IAAGC,OAAM,WAAW,OAAOyC,GAAI,IAAG,GAAGtU,EAAE,OAAO,IAAInE,SAAQ,SAASR,EAAEU,GAAGiE,EAAEH,GAAE,SAASvF,GAAGe,EAAE,IAAIoC,WAAWnD,GAAG,GAAEyB,EAAE,GAAE,CAAC,OAAOF,QAAQiW,UAAUJ,MAAK,WAAW,OAAO4C,GAAI,GAAE,CAmBnJE,GAAK9C,MAAK,SAAStV,GAAG,OAAOqE,YAAYsR,YAAY3V,EAAEN,EAAE,IAAG4V,MAAK,SAAStV,GAAG,OAAOA,CAAC,IAAGsV,KAAKnV,GAAE,SAASH,GAAGmE,EAAE,0CAA0CnE,GAAGrB,EAAEqB,EAAE,GAAE,CAAC,IAAIN,EAAE,CAACT,EAAE6a,IAA8D,GAA1Dhb,IAAIyB,EAAEyU,wBAAwBzU,EAAEyU,uBAAuBlW,GAAMyB,EAAEqV,gBAAgB,IAAI,OAAOrV,EAAEqV,gBAAgBlW,EAClhBT,EAAgF,CAA7E,MAAMkB,GAAG,OAAOgE,EAAE,sDAAsDhE,IAAG,CAAE,EAAoBvB,GAAG,mBAAmByF,YAAYwR,sBAAsBiC,KAAMrU,EAAEuE,WAAW,YAAY7I,GAAG,mBAAmBiW,MAAMlX,EAAEyB,GAAGyV,MAAM3R,EAAE,CAAC4R,YAAY,gBAAgBC,MAAK,SAASnV,GAAG,OAAOkE,YAAYwR,qBAAqB1V,EAAET,GAAG4V,KAAK3V,GAAE,SAASK,GAAyF,OAAtFmE,EAAE,kCAAkCnE,GAAGmE,EAAE,6CAAoDjG,EAAEyB,EAAE,GAAE,KAAO8V,MAAMjX,EAAY,CAD9c,GAEA+B,EAAEuV,mBAAmB,WAAW,OAAOvV,EAAEuV,mBAAmBvV,EAAEqU,IAAI7T,GAAG0T,MAAM,KAAK9E,UAAU,EAAEpP,EAAEwV,SAAS,WAAW,OAAOxV,EAAEwV,SAASxV,EAAEqU,IAAI9V,GAAG2V,MAAM,KAAK9E,UAAU,EAAEpP,EAAEyV,yBAAyB,WAAW,OAAOzV,EAAEyV,yBAAyBzV,EAAEqU,IAAI7N,GAAG0N,MAAM,KAAK9E,UAAU,EAAEpP,EAAE0V,4BAA4B,WAAW,OAAO1V,EAAE0V,4BAA4B1V,EAAEqU,IAAI/Q,GAAG4Q,MAAM,KAAK9E,UAAU,EAAEpP,EAAE4V,0BAA0B,WAAW,OAAO5V,EAAE4V,0BAA0B5V,EAAEqU,IAAInR,GAAGgR,MAAM,KAAK9E,UAAU,EAClepP,EAAE8V,0BAA0B,WAAW,OAAO9V,EAAE8V,0BAA0B9V,EAAEqU,IAAI5T,GAAGyT,MAAM,KAAK9E,UAAU,EAAEpP,EAAEgW,kBAAkB,WAAW,OAAOhW,EAAEgW,kBAAkBhW,EAAEqU,IAAI1V,GAAGuV,MAAM,KAAK9E,UAAU,EAAEpP,EAAEkW,mBAAmB,WAAW,OAAOlW,EAAEkW,mBAAmBlW,EAAEqU,IAAI5N,GAAGyN,MAAM,KAAK9E,UAAU,EAAEpP,EAAEoW,kBAAkB,WAAW,OAAOpW,EAAEoW,kBAAkBpW,EAAEqU,IAAIpQ,GAAGiQ,MAAM,KAAK9E,UAAU,EAAEpP,EAAEsW,mBAAmB,WAAW,OAAOtW,EAAEsW,mBAAmBtW,EAAEqU,IAAI3N,GAAGwN,MAAM,KAAK9E,UAAU,EACpdpP,EAAEwW,iBAAiB,WAAW,OAAOxW,EAAEwW,iBAAiBxW,EAAEqU,IAAIxV,GAAGqV,MAAM,KAAK9E,UAAU,EAAEpP,EAAE0W,kBAAkB,WAAW,OAAO1W,EAAE0W,kBAAkB1W,EAAEqU,IAAI/S,GAAG4S,MAAM,KAAK9E,UAAU,EAAEpP,EAAE4W,SAAS,WAAW,OAAO5W,EAAE4W,SAAS5W,EAAEqU,IAAIxU,GAAGqU,MAAM,KAAK9E,UAAU,EAAEpP,EAAE8W,iBAAiB,WAAW,OAAO9W,EAAE8W,iBAAiB9W,EAAEqU,IAAItN,GAAGmN,MAAM,KAAK9E,UAAU,EAAEpP,EAAEgX,kBAAkB,WAAW,OAAOhX,EAAEgX,kBAAkBhX,EAAEqU,IAAIsB,IAAIzB,MAAM,KAAK9E,UAAU,EAC3apP,EAAEkX,kBAAkB,WAAW,OAAOlX,EAAEkX,kBAAkBlX,EAAEqU,IAAIwB,IAAI3B,MAAM,KAAK9E,UAAU,EAAEpP,EAAEoX,qBAAqB,WAAW,OAAOpX,EAAEoX,qBAAqBpX,EAAEqU,IAAI0B,IAAI7B,MAAM,KAAK9E,UAAU,EAAEpP,EAAEsX,sBAAsB,WAAW,OAAOtX,EAAEsX,sBAAsBtX,EAAEqU,IAAI4B,IAAI/B,MAAM,KAAK9E,UAAU,EAAEpP,EAAEwX,sBAAsB,WAAW,OAAOxX,EAAEwX,sBAAsBxX,EAAEqU,IAAI8B,IAAIjC,MAAM,KAAK9E,UAAU,EAAEpP,EAAE0X,QAAQ,WAAW,OAAO1X,EAAE0X,QAAQ1X,EAAEqU,IAAIgC,IAAInC,MAAM,KAAK9E,UAAU,EACvcpP,EAAE4X,iBAAiB,WAAW,OAAO5X,EAAE4X,iBAAiB5X,EAAEqU,IAAIkC,IAAIrC,MAAM,KAAK9E,UAAU,EAAE,IAAIzQ,GAAEqB,EAAEgY,QAAQ,WAAW,OAAOrZ,GAAEqB,EAAEgY,QAAQhY,EAAEqU,IAAIoC,IAAIvC,MAAM,KAAK9E,UAAU,EAAEpP,EAAEkY,MAAM,WAAW,OAAOlY,EAAEkY,MAAMlY,EAAEqU,IAAIsC,IAAIzC,MAAM,KAAK9E,UAAU,EAAEpP,EAAEoY,QAAQ,WAAW,OAAOpY,EAAEoY,QAAQpY,EAAEqU,IAAIwC,IAAI3C,MAAM,KAAK9E,UAAU,EAChT,IAAgf9N,GAA5emY,GAAGzZ,EAAEwZ,UAAU,WAAW,OAAOC,GAAGzZ,EAAEwZ,UAAUxZ,EAAEqU,IAAI4C,IAAI/C,MAAM,KAAK9E,UAAU,EAAEuK,GAAG3Z,EAAE0Z,aAAa,WAAW,OAAOC,GAAG3Z,EAAE0Z,aAAa1Z,EAAEqU,IAAI8C,IAAIjD,MAAM,KAAK9E,UAAU,EAAEyK,GAAG7Z,EAAE4Z,WAAW,WAAW,OAAOC,GAAG7Z,EAAE4Z,WAAW5Z,EAAEqU,IAAIgD,IAAInD,MAAM,KAAK9E,UAAU,EAE7P,SAAS8C,KAAK,SAASxT,IAAI,IAAI4C,KAAIA,IAAE,EAAGtB,EAAE+Z,WAAU,GAAI5D,GAAI,CAAgE,GAA/D1V,EAAEwW,GAAItB,EAAG3V,GAAMA,EAAEga,sBAAqBha,EAAEga,uBAA0Bha,EAAEia,QAAQ,IAAI,mBAAmBja,EAAEia,UAAUja,EAAEia,QAAQ,CAACja,EAAEia,UAAUja,EAAEia,QAAQhZ,QAAQ,CAAC,IAAI7B,EAAEY,EAAEia,QAAQpT,QAAQsQ,EAAGrQ,QAAQ1H,EAAE,CAACqB,EAAE0W,EAAG,CAAC,CAAC,KAAK,EAAE5Y,GAAG,CAAC,GAAGyB,EAAE4G,OAAO,IAAI,mBAAmB5G,EAAE4G,SAAS5G,EAAE4G,OAAO,CAAC5G,EAAE4G,SAAS5G,EAAE4G,OAAO3F,QAAQoW,IAAK5W,EAAEsW,GAAI,EAAExY,IAAIyB,EAAEka,WAAWla,EAAEka,UAAU,cAAcjH,YAAW,WAAWA,YAAW,WAAWjT,EAAEka,UAAU,GAAG,GAAE,GAAGxb,GAAG,GAAE,IAAIA,IAAI,CAAC,CACxe,GAH+PsB,EAAEma,uBAAuB,WAAW,OAAOna,EAAEma,uBAAuBna,EAAEqU,IAAIkD,IAAIrD,MAAM,KAAK9E,UAAU,EAAEpP,EAAEqa,aAAa5b,EAAEuB,EAAEsa,aAAa,SAAS5b,EAAEU,EAAEzB,GAAG,OAAO4I,EAAE7H,EAAEiI,EAAEvH,EAAEzB,EAAE,EAAEqC,EAAEua,gBAAgB5V,EAAE3E,EAAEwZ,UAAUC,GAAGzZ,EAAE0Z,aAAaC,GAAG3Z,EAAE4Z,WAAWC,GACzevW,EAAE,SAAS8W,IAAK9Y,IAAG4Q,KAAK5Q,KAAIgC,EAAE8W,EAAG,EAE9Bpa,EAAE0a,QAAQ,IAAI,mBAAmB1a,EAAE0a,UAAU1a,EAAE0a,QAAQ,CAAC1a,EAAE0a,UAAU,EAAE1a,EAAE0a,QAAQzZ,QAAQjB,EAAE0a,QAAQ1O,KAAVhM,GAGzF,OAH2GkS,KAGpGyI,EAAQ1b,KAEjB,GAGE2V,EAAON,QAAUqG,C,wBCtDnB/F,EAAON,QAmBP,SAAmB7K,EAAIqR,GAKnB,IAJA,IAAIC,EAAU,IAAInI,MAAMxD,UAAUnO,OAAS,GACvC+Z,EAAU,EACVC,EAAU,EACVC,GAAU,EACPD,EAAQ7L,UAAUnO,QACrB8Z,EAAOC,KAAY5L,UAAU6L,KACjC,OAAO,IAAI/b,SAAQ,SAAkBiW,EAASgG,GAC1CJ,EAAOC,GAAU,SAAkBI,GAC/B,GAAIF,EAEA,GADAA,GAAU,EACNE,EACAD,EAAOC,OACN,CAGD,IAFA,IAAIL,EAAS,IAAInI,MAAMxD,UAAUnO,OAAS,GACtC+Z,EAAS,EACNA,EAASD,EAAO9Z,QACnB8Z,EAAOC,KAAY5L,UAAU4L,GACjC7F,EAAQjB,MAAM,KAAM6G,EACxB,CAER,EACA,IACItR,EAAGyK,MAAM4G,GAAO,KAAMC,EAM1B,CALE,MAAOK,GACDF,IACAA,GAAU,EACVC,EAAOC,GAEf,CACJ,GACJ,C,4BC5CA,IAAIC,EAAS/G,EAOb+G,EAAOpa,OAAS,SAAgBqa,GAC5B,IAAIhc,EAAIgc,EAAOra,OACf,IAAK3B,EACD,OAAO,EAEX,IADA,IAAItB,EAAI,IACCsB,EAAI,EAAI,GAA0B,MAArBgc,EAAOC,OAAOjc,MAC9BtB,EACN,OAAOiR,KAAKuM,KAAqB,EAAhBF,EAAOra,QAAc,EAAIjD,CAC9C,EASA,IANA,IAAIyd,EAAM,IAAI7I,MAAM,IAGhB8I,EAAM,IAAI9I,MAAM,KAGX9T,EAAI,EAAGA,EAAI,IAChB4c,EAAID,EAAI3c,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,EAAIA,EAAI,GAAK,IAAMA,IASrFuc,EAAOM,OAAS,SAAgBzd,EAAQ0d,EAAOC,GAM3C,IALA,IAIIvd,EAJAwd,EAAQ,KACRC,EAAQ,GACRjd,EAAI,EACJ4F,EAAI,EAEDkX,EAAQC,GAAK,CAChB,IAAI7b,EAAI9B,EAAO0d,KACf,OAAQlX,GACJ,KAAK,EACDqX,EAAMjd,KAAO2c,EAAIzb,GAAK,GACtB1B,GAAS,EAAJ0B,IAAU,EACf0E,EAAI,EACJ,MACJ,KAAK,EACDqX,EAAMjd,KAAO2c,EAAInd,EAAI0B,GAAK,GAC1B1B,GAAS,GAAJ0B,IAAW,EAChB0E,EAAI,EACJ,MACJ,KAAK,EACDqX,EAAMjd,KAAO2c,EAAInd,EAAI0B,GAAK,GAC1B+b,EAAMjd,KAAO2c,EAAQ,GAAJzb,GACjB0E,EAAI,EAGR5F,EAAI,QACHgd,IAAUA,EAAQ,KAAKxT,KAAK9D,OAAOC,aAAayP,MAAM1P,OAAQuX,IAC/Djd,EAAI,EAEZ,CAOA,OANI4F,IACAqX,EAAMjd,KAAO2c,EAAInd,GACjByd,EAAMjd,KAAO,GACH,IAAN4F,IACAqX,EAAMjd,KAAO,KAEjBgd,GACIhd,GACAgd,EAAMxT,KAAK9D,OAAOC,aAAayP,MAAM1P,OAAQuX,EAAM5a,MAAM,EAAGrC,KACzDgd,EAAME,KAAK,KAEfxX,OAAOC,aAAayP,MAAM1P,OAAQuX,EAAM5a,MAAM,EAAGrC,GAC5D,EAEA,IAAImd,EAAkB,mBAUtBZ,EAAOhX,OAAS,SAAgBiX,EAAQpd,EAAQ8c,GAI5C,IAHA,IAEI1c,EAFAsd,EAAQZ,EACRtW,EAAI,EAEC5F,EAAI,EAAGA,EAAIwc,EAAOra,QAAS,CAChC,IAAI7B,EAAIkc,EAAO1W,WAAW9F,KAC1B,GAAU,KAANM,GAAYsF,EAAI,EAChB,MACJ,QAAqBkW,KAAhBxb,EAAIsc,EAAItc,IACT,MAAMgH,MAAM6V,GAChB,OAAQvX,GACJ,KAAK,EACDpG,EAAIc,EACJsF,EAAI,EACJ,MACJ,KAAK,EACDxG,EAAO8c,KAAY1c,GAAK,GAAS,GAAJc,IAAW,EACxCd,EAAIc,EACJsF,EAAI,EACJ,MACJ,KAAK,EACDxG,EAAO8c,MAAiB,GAAJ1c,IAAW,GAAS,GAAJc,IAAW,EAC/Cd,EAAIc,EACJsF,EAAI,EACJ,MACJ,KAAK,EACDxG,EAAO8c,MAAiB,EAAJ1c,IAAU,EAAIc,EAClCsF,EAAI,EAGhB,CACA,GAAU,IAANA,EACA,MAAM0B,MAAM6V,GAChB,OAAOjB,EAASY,CACpB,EAOAP,EAAOa,KAAO,SAAcZ,GACxB,MAAO,mEAAmEY,KAAKZ,EACnF,C,wBCjIA,SAASa,IAOLvU,KAAKwU,WAAa,CAAC,CACvB,CAhBAxH,EAAON,QAAU6H,EAyBjBA,EAAaE,UAAUjb,GAAK,SAAYkb,EAAK7S,EAAIqR,GAK7C,OAJClT,KAAKwU,WAAWE,KAAS1U,KAAKwU,WAAWE,GAAO,KAAKhU,KAAK,CACvDmB,GAAMA,EACNqR,IAAMA,GAAOlT,OAEVA,IACX,EAQAuU,EAAaE,UAAUE,IAAM,SAAaD,EAAK7S,GAC3C,QAAYmR,IAAR0B,EACA1U,KAAKwU,WAAa,CAAC,OAEnB,QAAWxB,IAAPnR,EACA7B,KAAKwU,WAAWE,GAAO,QAGvB,IADA,IAAIE,EAAY5U,KAAKwU,WAAWE,GACvBxd,EAAI,EAAGA,EAAI0d,EAAUvb,QACtBub,EAAU1d,GAAG2K,KAAOA,EACpB+S,EAAU/R,OAAO3L,EAAG,KAElBA,EAGlB,OAAO8I,IACX,EAQAuU,EAAaE,UAAUI,KAAO,SAAcH,GACxC,IAAIE,EAAY5U,KAAKwU,WAAWE,GAChC,GAAIE,EAAW,CAGX,IAFA,IAAIE,EAAO,GACP5d,EAAI,EACDA,EAAIsQ,UAAUnO,QACjByb,EAAKpU,KAAK8G,UAAUtQ,MACxB,IAAKA,EAAI,EAAGA,EAAI0d,EAAUvb,QACtBub,EAAU1d,GAAG2K,GAAGyK,MAAMsI,EAAU1d,KAAKgc,IAAK4B,EAClD,CACA,OAAO9U,IACX,C,uBCYA,SAAS+U,EAAQrI,GAwNb,MArN4B,oBAAjB5O,aAA8B,WAErC,IAAIkX,EAAM,IAAIlX,aAAa,EAAG,IAC1BmX,EAAM,IAAI/b,WAAW8b,EAAI1e,QACzBmL,EAAiB,MAAXwT,EAAI,GAEd,SAASC,EAAmBC,EAAKC,EAAKC,GAClCL,EAAI,GAAKG,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,EACvB,CAEA,SAASK,EAAmBH,EAAKC,EAAKC,GAClCL,EAAI,GAAKG,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,EACvB,CAOA,SAASM,EAAkBH,EAAKC,GAK5B,OAJAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZL,EAAI,EACf,CAEA,SAASQ,EAAkBJ,EAAKC,GAK5B,OAJAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZL,EAAI,EACf,CAlBAtI,EAAQ+I,aAAehU,EAAKyT,EAAqBI,EAEjD5I,EAAQgJ,aAAejU,EAAK6T,EAAqBJ,EAmBjDxI,EAAQiJ,YAAclU,EAAK8T,EAAoBC,EAE/C9I,EAAQkJ,YAAcnU,EAAK+T,EAAoBD,CAGlD,CAjDwC,GAiD9B,WAEP,SAASM,EAAmBC,EAAWX,EAAKC,EAAKC,GAC7C,IAAIU,EAAOZ,EAAM,EAAI,EAAI,EAGzB,GAFIY,IACAZ,GAAOA,GACC,IAARA,EACAW,EAAU,EAAIX,EAAM,EAAmB,EAAqB,WAAYC,EAAKC,QAC5E,GAAIW,MAAMb,GACXW,EAAU,WAAYV,EAAKC,QAC1B,GAAIF,EAAM,qBACXW,GAAWC,GAAQ,GAAK,cAAgB,EAAGX,EAAKC,QAC/C,GAAIF,EAAM,sBACXW,GAAWC,GAAQ,GAAK1O,KAAK4O,MAAMd,EAAM,yBAA4B,EAAGC,EAAKC,OAC5E,CACD,IAAIa,EAAW7O,KAAKwD,MAAMxD,KAAKjM,IAAI+Z,GAAO9N,KAAK8O,KAE/CL,GAAWC,GAAQ,GAAKG,EAAW,KAAO,GAD0B,QAArD7O,KAAK4O,MAAMd,EAAM9N,KAAK+O,IAAI,GAAIF,GAAY,YACI,EAAGd,EAAKC,EACzE,CACJ,CAKA,SAASgB,EAAkBC,EAAUlB,EAAKC,GACtC,IAAIkB,EAAOD,EAASlB,EAAKC,GACrBU,EAAsB,GAAdQ,GAAQ,IAAU,EAC1BL,EAAWK,IAAS,GAAK,IACzBC,EAAkB,QAAPD,EACf,OAAoB,MAAbL,EACDM,EACAC,IACAV,GAAOW,KACM,IAAbR,EACO,qBAAPH,EAA+BS,EAC/BT,EAAO1O,KAAK+O,IAAI,EAAGF,EAAW,MAAQM,EAAW,QAC3D,CAfA9J,EAAQ+I,aAAeI,EAAmBxa,KAAK,KAAMsb,GACrDjK,EAAQgJ,aAAeG,EAAmBxa,KAAK,KAAMub,GAgBrDlK,EAAQiJ,YAAcU,EAAkBhb,KAAK,KAAMwb,GACnDnK,EAAQkJ,YAAcS,EAAkBhb,KAAK,KAAMyb,EAEtD,CAzCU,GA4CiB,oBAAjB9Y,aAA8B,WAErC,IAAI+Y,EAAM,IAAI/Y,aAAa,EAAE,IACzBiX,EAAM,IAAI/b,WAAW6d,EAAIzgB,QACzBmL,EAAiB,MAAXwT,EAAI,GAEd,SAAS+B,EAAoB7B,EAAKC,EAAKC,GACnC0B,EAAI,GAAK5B,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,EACvB,CAEA,SAASgC,EAAoB9B,EAAKC,EAAKC,GACnC0B,EAAI,GAAK5B,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,EACvB,CAOA,SAASiC,EAAmB9B,EAAKC,GAS7B,OARAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZ0B,EAAI,EACf,CAEA,SAASI,EAAmB/B,EAAKC,GAS7B,OARAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZ0B,EAAI,EACf,CA1BArK,EAAQ0K,cAAgB3V,EAAKuV,EAAsBC,EAEnDvK,EAAQ2K,cAAgB5V,EAAKwV,EAAsBD,EA2BnDtK,EAAQ4K,aAAe7V,EAAKyV,EAAqBC,EAEjDzK,EAAQ6K,aAAe9V,EAAK0V,EAAqBD,CAGpD,CAjEwC,GAiE9B,WAEP,SAASM,EAAoB1B,EAAW2B,EAAMC,EAAMvC,EAAKC,EAAKC,GAC1D,IAAIU,EAAOZ,EAAM,EAAI,EAAI,EAGzB,GAFIY,IACAZ,GAAOA,GACC,IAARA,EACAW,EAAU,EAAGV,EAAKC,EAAMoC,GACxB3B,EAAU,EAAIX,EAAM,EAAmB,EAAqB,WAAYC,EAAKC,EAAMqC,QAChF,GAAI1B,MAAMb,GACbW,EAAU,EAAGV,EAAKC,EAAMoC,GACxB3B,EAAU,WAAYV,EAAKC,EAAMqC,QAC9B,GAAIvC,EAAM,sBACbW,EAAU,EAAGV,EAAKC,EAAMoC,GACxB3B,GAAWC,GAAQ,GAAK,cAAgB,EAAGX,EAAKC,EAAMqC,OACnD,CACH,IAAIlB,EACJ,GAAIrB,EAAM,uBAENW,GADAU,EAAWrB,EAAM,UACM,EAAGC,EAAKC,EAAMoC,GACrC3B,GAAWC,GAAQ,GAAKS,EAAW,cAAgB,EAAGpB,EAAKC,EAAMqC,OAC9D,CACH,IAAIxB,EAAW7O,KAAKwD,MAAMxD,KAAKjM,IAAI+Z,GAAO9N,KAAK8O,KAC9B,OAAbD,IACAA,EAAW,MAEfJ,EAAqB,kBADrBU,EAAWrB,EAAM9N,KAAK+O,IAAI,GAAIF,MACY,EAAGd,EAAKC,EAAMoC,GACxD3B,GAAWC,GAAQ,GAAKG,EAAW,MAAQ,GAAgB,QAAXM,EAAqB,WAAa,EAAGpB,EAAKC,EAAMqC,EACpG,CACJ,CACJ,CAKA,SAASC,EAAmBrB,EAAUmB,EAAMC,EAAMtC,EAAKC,GACnD,IAAIuC,EAAKtB,EAASlB,EAAKC,EAAMoC,GACzBI,EAAKvB,EAASlB,EAAKC,EAAMqC,GACzB3B,EAAoB,GAAZ8B,GAAM,IAAU,EACxB3B,EAAW2B,IAAO,GAAK,KACvBrB,EAAW,YAAmB,QAALqB,GAAgBD,EAC7C,OAAoB,OAAb1B,EACDM,EACAC,IACAV,GAAOW,KACM,IAAbR,EACO,OAAPH,EAAgBS,EAChBT,EAAO1O,KAAK+O,IAAI,EAAGF,EAAW,OAASM,EAAW,iBAC5D,CAhBA9J,EAAQ0K,cAAgBI,EAAoBnc,KAAK,KAAMsb,EAAa,EAAG,GACvEjK,EAAQ2K,cAAgBG,EAAoBnc,KAAK,KAAMub,EAAa,EAAG,GAiBvElK,EAAQ4K,aAAeK,EAAmBtc,KAAK,KAAMwb,EAAY,EAAG,GACpEnK,EAAQ6K,aAAeI,EAAmBtc,KAAK,KAAMyb,EAAY,EAAG,EAEvE,CArDU,GAuDJpK,CACX,CAIA,SAASiK,EAAYxB,EAAKC,EAAKC,GAC3BD,EAAIC,GAAyB,IAAbF,EAChBC,EAAIC,EAAM,GAAMF,IAAQ,EAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,GAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,EAC5B,CAEA,SAASyB,EAAYzB,EAAKC,EAAKC,GAC3BD,EAAIC,GAAYF,IAAQ,GACxBC,EAAIC,EAAM,GAAMF,IAAQ,GAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,EAAK,IAC7BC,EAAIC,EAAM,GAAmB,IAAbF,CACpB,CAEA,SAAS0B,EAAWzB,EAAKC,GACrB,OAAQD,EAAIC,GACJD,EAAIC,EAAM,IAAM,EAChBD,EAAIC,EAAM,IAAM,GAChBD,EAAIC,EAAM,IAAM,MAAQ,CACpC,CAEA,SAASyB,EAAW1B,EAAKC,GACrB,OAAQD,EAAIC,IAAY,GAChBD,EAAIC,EAAM,IAAM,GAChBD,EAAIC,EAAM,IAAM,EAChBD,EAAIC,EAAM,MAAQ,CAC9B,CA5UArI,EAAON,QAAUqI,EAAQA,E,6BCOzB,SAAS+C,QAAQC,YACb,IACI,IAAIC,IAAMC,KAAK,QAAQ3e,QAAQ,IAAI,MAAzB2e,CAAgCF,YAC1C,GAAIC,MAAQA,IAAI3e,QAAUvB,OAAOogB,KAAKF,KAAK3e,QACvC,OAAO2e,GACF,CAAX,MAAOjiB,GAAI,CACb,OAAO,IACX,CAfAiX,OAAON,QAAUoL,O,wBCAjB9K,EAAON,QA6BP,SAAcyL,EAAO5e,EAAO6e,GACxB,IAAIC,EAASD,GAAQ,KACjBE,EAASD,IAAS,EAClBE,EAAS,KACTnF,EAASiF,EACb,OAAO,SAAoBD,GACvB,GAAIA,EAAO,GAAKA,EAAOE,EACnB,OAAOH,EAAMC,GACbhF,EAASgF,EAAOC,IAChBE,EAAOJ,EAAME,GACbjF,EAAS,GAEb,IAAIgC,EAAM7b,EAAMgT,KAAKgM,EAAMnF,EAAQA,GAAUgF,GAG7C,OAFa,EAAThF,IACAA,EAAwB,GAAL,EAATA,IACPgC,CACX,CACJ,C,4BCxCA,IAAIoD,EAAO9L,EAOX8L,EAAKnf,OAAS,SAAqBqa,GAG/B,IAFA,IAAI+E,EAAM,EACNjhB,EAAI,EACCN,EAAI,EAAGA,EAAIwc,EAAOra,SAAUnC,GACjCM,EAAIkc,EAAO1W,WAAW9F,IACd,IACJuhB,GAAO,EACFjhB,EAAI,KACTihB,GAAO,EACe,QAAZ,MAAJjhB,IAAkE,QAAZ,MAA3Bkc,EAAO1W,WAAW9F,EAAI,OACrDA,EACFuhB,GAAO,GAEPA,GAAO,EAEf,OAAOA,CACX,EASAD,EAAKE,KAAO,SAAmBpiB,EAAQ0d,EAAOC,GAE1C,GADUA,EAAMD,EACN,EACN,MAAO,GAKX,IAJA,IAGItd,EAHAwd,EAAQ,KACRC,EAAQ,GACRjd,EAAI,EAED8c,EAAQC,IACXvd,EAAIJ,EAAO0d,MACH,IACJG,EAAMjd,KAAOR,EACRA,EAAI,KAAOA,EAAI,IACpByd,EAAMjd,MAAY,GAAJR,IAAW,EAAsB,GAAlBJ,EAAO0d,KAC/Btd,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAwB,GAAlBJ,EAAO0d,OAAkB,IAAwB,GAAlB1d,EAAO0d,OAAkB,EAAsB,GAAlB1d,EAAO0d,MAAiB,MAC1GG,EAAMjd,KAAO,OAAUR,GAAK,IAC5Byd,EAAMjd,KAAO,OAAc,KAAJR,IAEvByd,EAAMjd,MAAY,GAAJR,IAAW,IAAwB,GAAlBJ,EAAO0d,OAAkB,EAAsB,GAAlB1d,EAAO0d,KACnE9c,EAAI,QACHgd,IAAUA,EAAQ,KAAKxT,KAAK9D,OAAOC,aAAayP,MAAM1P,OAAQuX,IAC/Djd,EAAI,GAGZ,OAAIgd,GACIhd,GACAgd,EAAMxT,KAAK9D,OAAOC,aAAayP,MAAM1P,OAAQuX,EAAM5a,MAAM,EAAGrC,KACzDgd,EAAME,KAAK,KAEfxX,OAAOC,aAAayP,MAAM1P,OAAQuX,EAAM5a,MAAM,EAAGrC,GAC5D,EASAshB,EAAKG,MAAQ,SAAoBjF,EAAQpd,EAAQ8c,GAI7C,IAHA,IACIwF,EACAC,EAFA7E,EAAQZ,EAGHlc,EAAI,EAAGA,EAAIwc,EAAOra,SAAUnC,GACjC0hB,EAAKlF,EAAO1W,WAAW9F,IACd,IACLZ,EAAO8c,KAAYwF,EACZA,EAAK,MACZtiB,EAAO8c,KAAYwF,GAAM,EAAU,IACnCtiB,EAAO8c,KAAuB,GAAXwF,EAAgB,KACV,QAAZ,MAALA,IAA0E,QAAZ,OAAjCC,EAAKnF,EAAO1W,WAAW9F,EAAI,MAChE0hB,EAAK,QAAiB,KAALA,IAAgB,KAAY,KAALC,KACtC3hB,EACFZ,EAAO8c,KAAYwF,GAAM,GAAU,IACnCtiB,EAAO8c,KAAYwF,GAAM,GAAK,GAAK,IACnCtiB,EAAO8c,KAAYwF,GAAM,EAAK,GAAK,IACnCtiB,EAAO8c,KAAuB,GAAXwF,EAAgB,MAEnCtiB,EAAO8c,KAAYwF,GAAM,GAAU,IACnCtiB,EAAO8c,KAAYwF,GAAM,EAAK,GAAK,IACnCtiB,EAAO8c,KAAuB,GAAXwF,EAAgB,KAG3C,OAAOxF,EAASY,CACpB,C,gECvFA,IAAI8E,EAAc,CAAC,EAKnBA,EAAYC,OAQZD,EAAYE,MAMZF,EAAYG,aAAe,EAM3BH,EAAYI,WAAa,EAMzBJ,EAAYK,uBAAyB,EAMrCL,EAAYM,mBAAqB,EAKjCN,EAAYO,SAAW,CACrBC,WAAY,EACZC,aAAc,GAOhBT,EAAYU,MAAQ,IAAIjc,WAAW,GAMnCub,EAAYW,QAAU,IAAI3b,aAAagb,EAAYU,MAAMljB,QAMzDwiB,EAAYY,QAAU,IAAI1b,aAAa8a,EAAYU,MAAMljB,QAMzDwiB,EAAYa,eAAuE,IAAtD,IAAIjc,YAAY,IAAIxE,WAAW,CAAC,EAAG,IAAI5C,QAAQ,GAS5EwiB,EAAYc,KAAO,SAASC,EAAKC,GAK/B9Z,KAAK6Z,IAAY,EAANA,EAMX7Z,KAAK8Z,KAAc,EAAPA,CACd,EAOAhB,EAAYc,KAAKG,OAAS,SAASF,EAAKC,GAEtC,OAAc,GAAPD,GAAoB,GAARC,EAAYhB,EAAYc,KAAKI,KAAO,IAAIlB,EAAYc,KAAKC,EAAKC,EACnF,EAKAhB,EAAYc,KAAKnF,UAAUwF,UAAY,WACrC,OAAQja,KAAK6Z,MAAQ,GAAiB,WAAZ7Z,KAAK8Z,IACjC,EAMAhB,EAAYc,KAAKnF,UAAUyF,OAAS,SAASC,GAC3C,OAAOna,KAAK6Z,KAAOM,EAAMN,KAAO7Z,KAAK8Z,MAAQK,EAAML,IACrD,EAMAhB,EAAYc,KAAKI,KAAO,IAAIlB,EAAYc,KAAK,EAAG,GAUhDd,EAAYsB,QAAU,SAASC,GAC7B,GAAKA,EAGCC,EAAeD,OAFnB,IAAIC,EAAe,KASrBta,KAAKqF,GAAKyT,EAAYyB,WAAWC,SAASF,GAQ1Cta,KAAKya,MAAQH,EAQbta,KAAK0a,SAAW,EAQhB1a,KAAK2a,OAAS,KAQd3a,KAAK4a,cAAgB,EAQrB5a,KAAK6a,UAAW,EAQhB7a,KAAK8a,aAAe,EAQpB9a,KAAK+a,QAAU,GAQf/a,KAAKgb,iBAAmB,EAQxBhb,KAAKib,gBAAiB,CACxB,EAEAnC,EAAYsB,QAAQ3F,UAAUyG,MAAQ,WACpClb,KAAKqF,GAAG6V,QACRlb,KAAKya,MAAQza,KAAKqF,GAAG8V,WACrBnb,KAAK0a,SAAW,EAChB1a,KAAK2a,OAAS,KACd3a,KAAK4a,cAAgB,EACrB5a,KAAK6a,UAAW,EAChB7a,KAAK8a,aAAe,EACpB9a,KAAK+a,QAAU,GACf/a,KAAKgb,iBAAmB,EACxBhb,KAAKib,gBAAiB,CACxB,EASAnC,EAAYsB,QAAQ3F,UAAU2G,cAAgB,SAASA,GACrDpb,KAAKib,eAAiBG,CACxB,EASAtC,EAAYsB,QAAQ3F,UAAU4G,WAAa,WACzC,OAAOrb,KAAKqF,EACd,EAQAyT,EAAYsB,QAAQ3F,UAAU6G,aAAe,WAC3C,OAAOtb,KAAKqF,GAAGkW,QAAQ5e,SAASqD,KAAKqF,GAAGmW,WAAYxb,KAAKqF,GAAGmW,WAAaxb,KAAKoT,SAChF,EAYA0F,EAAYsB,QAAQ3F,UAAUgH,KAAO,SAASrD,EAAMsD,GAE9CtD,EAAOpY,KAAK0a,WACd1a,KAAK0a,SAAWtC,GAQlB,IAHA,IAAIuD,EAAwE,IAAvD3b,KAAKqF,GAAG8V,WAAanb,KAAKya,MAAQiB,GAA2BtD,EAAO,EAGlFpY,KAAKya,MAAQkB,EAAavD,EAAOsD,GAAkB,CACxD,IAAIE,EAAe5b,KAAKqF,GAAG8V,WAC3Bnb,KAAKqF,GAAKyT,EAAYsB,QAAQyB,eAAe7b,KAAKqF,IAClDrF,KAAKya,OAASza,KAAKqF,GAAG8V,WAAaS,CACrC,CAEA5b,KAAK8b,IAAIH,EACX,EAKA7C,EAAYsB,QAAQ3F,UAAUqH,IAAM,SAASC,GAC3C,IAAK,IAAI7kB,EAAI,EAAGA,EAAI6kB,EAAW7kB,IAC7B8I,KAAKqF,GAAG2W,YAAYhc,KAAKya,MAAO,EAEpC,EAKA3B,EAAYsB,QAAQ3F,UAAUuH,UAAY,SAASC,GACjDjc,KAAKqF,GAAG2W,UAAUhc,KAAKya,OAAS,EAAGwB,EACrC,EAKAnD,EAAYsB,QAAQ3F,UAAUyH,WAAa,SAASD,GAClDjc,KAAKqF,GAAG6W,WAAWlc,KAAKya,OAAS,EAAGwB,EACtC,EAKAnD,EAAYsB,QAAQ3F,UAAU0H,WAAa,SAASF,GAClDjc,KAAKqF,GAAG8W,WAAWnc,KAAKya,OAAS,EAAGwB,EACtC,EAKAnD,EAAYsB,QAAQ3F,UAAU2H,WAAa,SAASH,GAClDjc,KAAKqF,GAAG+W,WAAWpc,KAAKya,OAAS,EAAGwB,EACtC,EAKAnD,EAAYsB,QAAQ3F,UAAU4H,aAAe,SAASJ,GACpDjc,KAAKqF,GAAGgX,aAAarc,KAAKya,OAAS,EAAGwB,EACxC,EAKAnD,EAAYsB,QAAQ3F,UAAU6H,aAAe,SAASL,GACpDjc,KAAKqF,GAAGiX,aAAatc,KAAKya,OAAS,EAAGwB,EACxC,EAOAnD,EAAYsB,QAAQ3F,UAAU8H,QAAU,SAASN,GAC/Cjc,KAAKyb,KAAK,EAAG,GACbzb,KAAKgc,UAAUC,EACjB,EAMAnD,EAAYsB,QAAQ3F,UAAU+H,SAAW,SAASP,GAChDjc,KAAKyb,KAAK,EAAG,GACbzb,KAAKkc,WAAWD,EAClB,EAMAnD,EAAYsB,QAAQ3F,UAAUgI,SAAW,SAASR,GAChDjc,KAAKyb,KAAK,EAAG,GACbzb,KAAKmc,WAAWF,EAClB,EAMAnD,EAAYsB,QAAQ3F,UAAUiI,SAAW,SAAST,GAChDjc,KAAKyb,KAAK,EAAG,GACbzb,KAAKoc,WAAWH,EAClB,EAMAnD,EAAYsB,QAAQ3F,UAAUkI,WAAa,SAASV,GAClDjc,KAAKyb,KAAK,EAAG,GACbzb,KAAKqc,aAAaJ,EACpB,EAMAnD,EAAYsB,QAAQ3F,UAAUmI,WAAa,SAASX,GAClDjc,KAAKyb,KAAK,EAAG,GACbzb,KAAKsc,aAAaL,EACpB,EAQAnD,EAAYsB,QAAQ3F,UAAUoI,aAAe,SAASC,EAASb,EAAOc,IAChE/c,KAAKib,gBAAkBgB,GAASc,KAClC/c,KAAKuc,QAAQN,GACbjc,KAAKgd,KAAKF,GAEd,EAOAhE,EAAYsB,QAAQ3F,UAAUwI,cAAgB,SAASH,EAASb,EAAOc,IACjE/c,KAAKib,gBAAkBgB,GAASc,KAClC/c,KAAKwc,SAASP,GACdjc,KAAKgd,KAAKF,GAEd,EAOAhE,EAAYsB,QAAQ3F,UAAUyI,cAAgB,SAASJ,EAASb,EAAOc,IACjE/c,KAAKib,gBAAkBgB,GAASc,KAClC/c,KAAKyc,SAASR,GACdjc,KAAKgd,KAAKF,GAEd,EAOAhE,EAAYsB,QAAQ3F,UAAU0I,cAAgB,SAASL,EAASb,EAAOc,IACjE/c,KAAKib,gBAAmBgB,EAAM/B,OAAO6C,KACvC/c,KAAK0c,SAAST,GACdjc,KAAKgd,KAAKF,GAEd,EAOAhE,EAAYsB,QAAQ3F,UAAU2I,gBAAkB,SAASN,EAASb,EAAOc,IACnE/c,KAAKib,gBAAkBgB,GAASc,KAClC/c,KAAK2c,WAAWV,GAChBjc,KAAKgd,KAAKF,GAEd,EAOAhE,EAAYsB,QAAQ3F,UAAU4I,gBAAkB,SAASP,EAASb,EAAOc,IACnE/c,KAAKib,gBAAkBgB,GAASc,KAClC/c,KAAK4c,WAAWX,GAChBjc,KAAKgd,KAAKF,GAEd,EAOAhE,EAAYsB,QAAQ3F,UAAU6I,eAAiB,SAASR,EAASb,EAAOc,IAClE/c,KAAKib,gBAAkBgB,GAASc,KAClC/c,KAAKud,UAAUtB,GACfjc,KAAKgd,KAAKF,GAEd,EASAhE,EAAYsB,QAAQ3F,UAAU+I,eAAiB,SAASV,EAASb,EAAOc,GAClEd,GAASc,IACX/c,KAAKyd,OAAOxB,GACZjc,KAAKgd,KAAKF,GAEd,EASAhE,EAAYsB,QAAQ3F,UAAUgJ,OAAS,SAASC,GAC9C,GAAIA,GAAO1d,KAAKoT,SACd,MAAM,IAAI5U,MAAM,iDAEpB,EAMAsa,EAAYsB,QAAQ3F,UAAUkJ,UAAY,WACxC,GAAI3d,KAAK6a,SACP,MAAM,IAAIrc,MAAM,wDAEpB,EAOAsa,EAAYsB,QAAQ3F,UAAUuI,KAAO,SAASF,GAC5C9c,KAAK2a,OAAOmC,GAAW9c,KAAKoT,QAC9B,EAKA0F,EAAYsB,QAAQ3F,UAAUrB,OAAS,WACrC,OAAOpT,KAAKqF,GAAG8V,WAAanb,KAAKya,KACnC,EAcA3B,EAAYsB,QAAQyB,eAAiB,SAASxW,GAC5C,IAAIuW,EAAevW,EAAG8V,WAGtB,GAAmB,WAAfS,EACF,MAAM,IAAIpd,MAAM,uDAGlB,IAAIof,EAAehC,GAAgB,EAC/BiC,EAAM/E,EAAYyB,WAAWC,SAASoD,GAG1C,OAFAC,EAAIC,YAAYF,EAAehC,GAC/BiC,EAAItC,QAAQtQ,IAAI5F,EAAGkW,QAASqC,EAAehC,GACpCiC,CACT,EAQA/E,EAAYsB,QAAQ3F,UAAU8I,UAAY,SAASnK,GACjDpT,KAAKyb,KAAK3C,EAAYI,WAAY,GAClClZ,KAAKmc,WAAWnc,KAAKoT,SAAWA,EAAS0F,EAAYI,WACvD,EAUAJ,EAAYsB,QAAQ3F,UAAUsJ,YAAc,SAASC,GACnDhe,KAAK2d,YACc,MAAf3d,KAAK2a,SACP3a,KAAK2a,OAAS,IAEhB3a,KAAK4a,cAAgBoD,EACrB,IAAK,IAAI9mB,EAAI,EAAGA,EAAI8mB,EAAW9mB,IAC7B8I,KAAK2a,OAAOzjB,GAAK,EAEnB8I,KAAK6a,UAAW,EAChB7a,KAAK8a,aAAe9a,KAAKoT,QAC3B,EAOA0F,EAAYsB,QAAQ3F,UAAUwJ,UAAY,WACxC,GAAmB,MAAfje,KAAK2a,SAAmB3a,KAAK6a,SAC/B,MAAM,IAAIrc,MAAM,qDAGlBwB,KAAKyc,SAAS,GAKd,IAJA,IAAIyB,EAAYle,KAAKoT,SAGjBlc,EAAI8I,KAAK4a,cAAgB,EACtB1jB,GAAK,GAAuB,GAAlB8I,KAAK2a,OAAOzjB,GAASA,KAItC,IAHA,IAAIinB,EAAejnB,EAAI,EAGhBA,GAAK,EAAGA,IAEb8I,KAAKwc,SAA2B,GAAlBxc,KAAK2a,OAAOzjB,GAAUgnB,EAAYle,KAAK2a,OAAOzjB,GAAK,GAInE8I,KAAKwc,SAAS0B,EAAYle,KAAK8a,cAC/B,IAAIrC,GAAO0F,EAFW,GAEuBrF,EAAYG,aACzDjZ,KAAKwc,SAAS/D,GAGd,IAAI2F,EAAkB,EAClBC,EAAMre,KAAKya,MACjB6D,EACE,IAAKpnB,EAAI,EAAGA,EAAI8I,KAAK+a,QAAQ1hB,OAAQnC,IAAK,CACxC,IAAIqnB,EAAMve,KAAKqF,GAAG8V,WAAanb,KAAK+a,QAAQ7jB,GAC5C,GAAIuhB,GAAOzY,KAAKqF,GAAGmZ,UAAUD,GAAM,CACjC,IAAK,IAAIzhB,EAAIgc,EAAYG,aAAcnc,EAAI2b,EAAK3b,GAAKgc,EAAYG,aAC/D,GAAIjZ,KAAKqF,GAAGmZ,UAAUH,EAAMvhB,IAAMkD,KAAKqF,GAAGmZ,UAAUD,EAAMzhB,GACxD,SAASwhB,EAGbF,EAAkBpe,KAAK+a,QAAQ7jB,GAC/B,KACF,CACF,CAmBA,OAjBIknB,GAGFpe,KAAKya,MAAQza,KAAKqF,GAAG8V,WAAa+C,EAGlCle,KAAKqF,GAAG8W,WAAWnc,KAAKya,MAAO2D,EAAkBF,KAIjDle,KAAK+a,QAAQra,KAAKV,KAAKoT,UAGvBpT,KAAKqF,GAAG8W,WAAWnc,KAAKqF,GAAG8V,WAAa+C,EAAWle,KAAKoT,SAAW8K,IAGrEle,KAAK6a,UAAW,EACTqD,CACT,EAUApF,EAAYsB,QAAQ3F,UAAUgK,OAAS,SAASC,EAAYC,EAAqBC,GAC/E,IAAIC,EAAcD,EAAkB9F,EAAYM,mBAAqB,EACrE,GAAIuF,EAAqB,CACvB,IAAIG,EAAkBH,EAGtB,GAFA3e,KAAKyb,KAAKzb,KAAK0a,SAAU5B,EAAYI,WACnCJ,EAAYK,uBAAyB0F,GACnCC,EAAgBzlB,QAAUyf,EAAYK,uBACxC,MAAM,IAAI3a,MAAM,+CACdsa,EAAYK,wBAEhB,IAAK,IAAIjiB,EAAI4hB,EAAYK,uBAAyB,EAAGjiB,GAAK,EAAGA,IAC3D8I,KAAKgc,UAAU8C,EAAgB9hB,WAAW9F,GAE9C,CACA8I,KAAKyb,KAAKzb,KAAK0a,SAAU5B,EAAYI,WAAa2F,GAClD7e,KAAKud,UAAUmB,GACXG,GACF7e,KAAKyc,SAASzc,KAAKqF,GAAG8V,WAAanb,KAAKya,OAE1Cza,KAAKqF,GAAGyY,YAAY9d,KAAKya,MAC3B,EAQA3B,EAAYsB,QAAQ3F,UAAUsK,mBAAqB,SAAUL,EAAYC,GACvE3e,KAAKye,OAAOC,EAAYC,GAAqB,EAC/C,EAUA7F,EAAYsB,QAAQ3F,UAAUuK,cAAgB,SAASC,EAAOC,GAC5D,IAAIC,EAAcnf,KAAKqF,GAAG8V,WAAa8D,EACnCG,EAAeD,EAAcnf,KAAKqF,GAAGga,UAAUF,GAInD,GAHoD,GAA3Cnf,KAAKqF,GAAGmZ,UAAUY,EAAeF,GAIxC,MAAM,IAAI1gB,MAAM,sBAAwB0gB,EAAQ,eAEpD,EAWApG,EAAYsB,QAAQ3F,UAAU6K,YAAc,SAASC,EAAWC,EAAWC,GACzEzf,KAAK2d,YACL3d,KAAKgb,iBAAmBwE,EACxBxf,KAAKyb,KAAK3C,EAAYI,WAAYqG,EAAYC,GAC9Cxf,KAAKyb,KAAKgE,EAAWF,EAAYC,EACnC,EASA1G,EAAYsB,QAAQ3F,UAAUiL,UAAY,WAExC,OADA1f,KAAKmc,WAAWnc,KAAKgb,kBACdhb,KAAKoT,QACd,EAUA0F,EAAYsB,QAAQ3F,UAAUkL,aAAe,SAASvoB,GACpD,GAAIA,aAAa8B,WACf,IAAIsf,EAAOphB,MAEX,CAAIohB,EAAO,GAGX,IAHA,IACIthB,EAAI,EAEDA,EAAIE,EAAEiC,QAAQ,CACnB,IAAIumB,EAGA9oB,EAAIM,EAAE4F,WAAW9F,MAEnB0oB,EADE9oB,EAAI,OAAUA,GAAK,MACTA,GAGCA,GAAK,IADVM,EAAE4F,WAAW9F,MACO,UAId,IACdshB,EAAK9X,KAAKkf,IAENA,EAAY,KACdpH,EAAK9X,KAAOkf,GAAa,EAAK,GAAQ,MAElCA,EAAY,MACdpH,EAAK9X,KAAOkf,GAAa,GAAM,GAAQ,KAEvCpH,EAAK9X,KACDkf,GAAa,GAAM,EAAQ,IAC3BA,GAAa,GAAM,GAAQ,KAEjCpH,EAAK9X,KAAOkf,GAAa,EAAK,GAAQ,MAExCpH,EAAK9X,KAAkB,GAAZkf,EAAoB,KAEnC,CAjCa,CAoCf5f,KAAKuc,QAAQ,GACbvc,KAAKsf,YAAY,EAAG9G,EAAKnf,OAAQ,GACjC2G,KAAKqF,GAAGyY,YAAY9d,KAAKya,OAASjC,EAAKnf,QAC9BnC,EAAI,EAAb,IAAK,IAAWkc,EAASpT,KAAKya,MAAOc,EAAQvb,KAAKqF,GAAGkW,QAASrkB,EAAIshB,EAAKnf,OAAQnC,IAC7EqkB,EAAMnI,KAAYoF,EAAKthB,GAEzB,OAAO8I,KAAK0f,WACd,EASA5G,EAAYsB,QAAQ3F,UAAUoL,WAAa,SAAShG,EAAKC,GACvD,OAAOhB,EAAYc,KAAKG,OAAOF,EAAKC,EACtC,EASAhB,EAAYyB,WAAa,SAASgB,GAKhCvb,KAAK8f,OAASvE,EAMdvb,KAAK+f,UAAY,CACnB,EAQAjH,EAAYyB,WAAWC,SAAW,SAASuB,GACzC,OAAO,IAAIjD,EAAYyB,WAAW,IAAIrhB,WAAW6iB,GACnD,EAEAjD,EAAYyB,WAAW9F,UAAUyG,MAAQ,WACvClb,KAAK+f,UAAY,CACnB,EAOAjH,EAAYyB,WAAW9F,UAAU8G,MAAQ,WACvC,OAAOvb,KAAK8f,MACd,EAOAhH,EAAYyB,WAAW9F,UAAU+G,SAAW,WAC1C,OAAOxb,KAAK+f,SACd,EAOAjH,EAAYyB,WAAW9F,UAAUqJ,YAAc,SAAStC,GACtDxb,KAAK+f,UAAYvE,CACnB,EAOA1C,EAAYyB,WAAW9F,UAAU0G,SAAW,WAC1C,OAAOnb,KAAK8f,OAAOzmB,MACrB,EAMAyf,EAAYyB,WAAW9F,UAAUuL,SAAW,SAAS5M,GACnD,OAAOpT,KAAKigB,UAAU7M,IAAW,IAAM,EACzC,EAMA0F,EAAYyB,WAAW9F,UAAUwL,UAAY,SAAS7M,GACpD,OAAOpT,KAAK8f,OAAO1M,EACrB,EAMA0F,EAAYyB,WAAW9F,UAAU+J,UAAY,SAASpL,GACpD,OAAOpT,KAAKkgB,WAAW9M,IAAW,IAAM,EAC1C,EAMA0F,EAAYyB,WAAW9F,UAAUyL,WAAa,SAAS9M,GACrD,OAAOpT,KAAK8f,OAAO1M,GAAUpT,KAAK8f,OAAO1M,EAAS,IAAM,CAC1D,EAMA0F,EAAYyB,WAAW9F,UAAU4K,UAAY,SAASjM,GACpD,OAAOpT,KAAK8f,OAAO1M,GAAUpT,KAAK8f,OAAO1M,EAAS,IAAM,EAAIpT,KAAK8f,OAAO1M,EAAS,IAAM,GAAKpT,KAAK8f,OAAO1M,EAAS,IAAM,EACzH,EAMA0F,EAAYyB,WAAW9F,UAAU0L,WAAa,SAAS/M,GACrD,OAAOpT,KAAKqf,UAAUjM,KAAY,CACpC,EAMA0F,EAAYyB,WAAW9F,UAAU2L,UAAY,SAAShN,GACpD,OAAO,IAAI0F,EAAYc,KAAK5Z,KAAKqf,UAAUjM,GAASpT,KAAKqf,UAAUjM,EAAS,GAC9E,EAMA0F,EAAYyB,WAAW9F,UAAU4L,WAAa,SAASjN,GACrD,OAAO,IAAI0F,EAAYc,KAAK5Z,KAAKmgB,WAAW/M,GAASpT,KAAKmgB,WAAW/M,EAAS,GAChF,EAMA0F,EAAYyB,WAAW9F,UAAU6L,YAAc,SAASlN,GAEtD,OADA0F,EAAYU,MAAM,GAAKxZ,KAAKqf,UAAUjM,GAC/B0F,EAAYW,QAAQ,EAC7B,EAMAX,EAAYyB,WAAW9F,UAAU8L,YAAc,SAASnN,GAGtD,OAFA0F,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,GAAK3Z,KAAKqf,UAAUjM,GACvE0F,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,GAAK3Z,KAAKqf,UAAUjM,EAAS,GACzE0F,EAAYY,QAAQ,EAC7B,EAMAZ,EAAYyB,WAAW9F,UAAUuH,UAAY,SAAS5I,EAAQ6I,GAC5Djc,KAAK8f,OAAO1M,GAA+B,CAC7C,EAMA0F,EAAYyB,WAAW9F,UAAU+L,WAAa,SAASpN,EAAQ6I,GAC7Djc,KAAK8f,OAAO1M,GAAU6I,CACxB,EAMAnD,EAAYyB,WAAW9F,UAAUyH,WAAa,SAAS9I,EAAQ6I,GAC7Djc,KAAK8f,OAAO1M,GAAU6I,EACtBjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,CACrC,EAMAnD,EAAYyB,WAAW9F,UAAUgM,YAAc,SAASrN,EAAQ6I,GAC5Djc,KAAK8f,OAAO1M,GAAU6I,EACtBjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,CACvC,EAMAnD,EAAYyB,WAAW9F,UAAU0H,WAAa,SAAS/I,EAAQ6I,GAC7Djc,KAAK8f,OAAO1M,GAAU6I,EACtBjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,EACnCjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,GACnCjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,EACrC,EAMAnD,EAAYyB,WAAW9F,UAAUiM,YAAc,SAAStN,EAAQ6I,GAC5Djc,KAAK8f,OAAO1M,GAAU6I,EACtBjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,EACnCjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,GACnCjc,KAAK8f,OAAO1M,EAAS,GAAK6I,GAAS,EACvC,EAMAnD,EAAYyB,WAAW9F,UAAU2H,WAAa,SAAShJ,EAAQ6I,GAC7Djc,KAAKmc,WAAW/I,EAAQ6I,EAAMpC,KAC9B7Z,KAAKmc,WAAW/I,EAAS,EAAG6I,EAAMnC,KACpC,EAMAhB,EAAYyB,WAAW9F,UAAUkM,YAAc,SAASvN,EAAQ6I,GAC5Djc,KAAK0gB,YAAYtN,EAAQ6I,EAAMpC,KAC/B7Z,KAAK0gB,YAAYtN,EAAS,EAAG6I,EAAMnC,KACvC,EAMAhB,EAAYyB,WAAW9F,UAAU4H,aAAe,SAASjJ,EAAQ6I,GAC/DnD,EAAYW,QAAQ,GAAKwC,EACzBjc,KAAKmc,WAAW/I,EAAQ0F,EAAYU,MAAM,GAC5C,EAMAV,EAAYyB,WAAW9F,UAAU6H,aAAe,SAASlJ,EAAQ6I,GAC/DnD,EAAYY,QAAQ,GAAKuC,EACzBjc,KAAKmc,WAAW/I,EAAQ0F,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,IAC3E3Z,KAAKmc,WAAW/I,EAAS,EAAG0F,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,GACjF,EAQAb,EAAYyB,WAAW9F,UAAUmM,oBAAsB,WACrD,GAAI5gB,KAAK8f,OAAOzmB,OAAS2G,KAAK+f,UAAYjH,EAAYI,WAClDJ,EAAYK,uBACd,MAAM,IAAI3a,MACN,kEAGN,IADA,IAAIqiB,EAAS,GACJ3pB,EAAI,EAAGA,EAAI4hB,EAAYK,uBAAwBjiB,IACtD2pB,GAAUjkB,OAAOC,aACbmD,KAAKggB,SAAShgB,KAAK+f,UAAYjH,EAAYI,WAAahiB,IAE9D,OAAO2pB,CACT,EAUA/H,EAAYyB,WAAW9F,UAAUqM,SAAW,SAASC,EAAQC,GAC3D,IAAIrG,EAASoG,EAAS/gB,KAAKqf,UAAU0B,GACrC,OAAOC,EAAgBhhB,KAAKwe,UAAU7D,GAAU3a,KAAKwe,UAAU7D,EAASqG,GAAiB,CAC3F,EASAlI,EAAYyB,WAAW9F,UAAUwM,QAAU,SAASvqB,EAAG0c,GAGrD,OAFA1c,EAAEqqB,OAAS3N,EAASpT,KAAKqf,UAAUjM,GACnC1c,EAAE2O,GAAKrF,KACAtJ,CACT,EAeAoiB,EAAYyB,WAAW9F,UAAUyM,SAAW,SAAS9N,EAAQ+N,GAC3D/N,GAAUpT,KAAKqf,UAAUjM,GAEzB,IAAI/Z,EAAS2G,KAAKqf,UAAUjM,GACxByN,EAAS,GACT3pB,EAAI,EAIR,GAFAkc,GAAU0F,EAAYI,WAElBiI,IAAiBrI,EAAYO,SAASC,WACxC,OAAOtZ,KAAK8f,OAAOnjB,SAASyW,EAAQA,EAAS/Z,GAG/C,KAAOnC,EAAImC,GAAQ,CACjB,IAAIumB,EAGA9oB,EAAIkJ,KAAKigB,UAAU7M,EAASlc,KAChC,GAAIJ,EAAI,IACN8oB,EAAY9oB,MACP,CACL,IAAIsB,EAAI4H,KAAKigB,UAAU7M,EAASlc,KAChC,GAAIJ,EAAI,IACN8oB,GACQ,GAAJ9oB,IAAa,EACV,GAAJsB,MACE,CACL,IAAIZ,EAAIwI,KAAKigB,UAAU7M,EAASlc,KAE9B0oB,EADE9oB,EAAI,KAEE,GAAJA,IAAa,IACT,GAAJsB,IAAa,EACV,GAAJZ,GAIK,EAAJV,IAAa,IACT,GAAJsB,IAAa,IACT,GAAJZ,IAAa,EACV,GALCwI,KAAKigB,UAAU7M,EAASlc,IAOpC,CACF,CAGI0oB,EAAY,MACdiB,GAAUjkB,OAAOC,aAAa+iB,IAE9BA,GAAa,MACbiB,GAAUjkB,OAAOC,aACK,OAAnB+iB,GAAa,IACkB,OAAnB,KAAZA,IAEP,CAEA,OAAOiB,CACT,EAOA/H,EAAYyB,WAAW9F,UAAU2M,WAAa,SAAShO,GACrD,OAAOA,EAASpT,KAAKqf,UAAUjM,EACjC,EAQA0F,EAAYyB,WAAW9F,UAAU4M,SAAW,SAASjO,GACnD,OAAOA,EAASpT,KAAKqf,UAAUjM,GAAU0F,EAAYI,UACvD,EAQAJ,EAAYyB,WAAW9F,UAAU6M,aAAe,SAASlO,GACvD,OAAOpT,KAAKqf,UAAUjM,EAASpT,KAAKqf,UAAUjM,GAChD,EAMA0F,EAAYyB,WAAW9F,UAAU8M,iBAAmB,SAASC,GAC3D,GAAIA,EAAMnoB,QAAUyf,EAAYK,uBAC9B,MAAM,IAAI3a,MAAM,+CACAsa,EAAYK,wBAE9B,IAAK,IAAIjiB,EAAI,EAAGA,EAAI4hB,EAAYK,uBAAwBjiB,IACtD,GAAIsqB,EAAMxkB,WAAW9F,IAAM8I,KAAKggB,SAAShgB,KAAK+f,UAAYjH,EAAYI,WAAahiB,GACjF,OAAO,EAGX,OAAO,CACT,EASA4hB,EAAYyB,WAAW9F,UAAUoL,WAAa,SAAShG,EAAKC,GAC1D,OAAOhB,EAAYc,KAAKG,OAAOF,EAAKC,EACtC,C,4BCnuCApN,EAAQ+U,YAAa,EACrB,IAAIC,EAAsB,WACtB,SAASA,EAAKC,GACV,IAAKA,EACD,MAAM,IAAIC,UAAU,2CAExB5hB,KAAKic,MAAQyF,EAAKG,MACdF,GAAQD,EAAKI,OAAOH,KACpB3hB,KAAKic,MAAQ0F,EAErB,CA2CA,OA1CAD,EAAKI,OAAS,SAAUH,GACpB,IAAI1F,EAAQ0F,EAAKpY,WACjB,OAAOoY,IAASA,aAAgBD,GAAQA,EAAKK,UAAUzN,KAAK2H,GAChE,EACAyF,EAAK3H,OAAS,WACV,OAAO,IAAI2H,EAAK,CAACA,EAAKM,IAAI,GAAIN,EAAKM,IAAI,GAAIN,EAAKM,IAAI,GAAIN,EAAKM,IAAI,GAAIN,EAAKM,IAAI,IAAI5N,KAAK,KAC3F,EACAsN,EAAKO,YAAc,WACf,OAAO,IAAIP,EAAK,YACpB,EACAA,EAAKQ,MAAQ,SAAUP,GACnB,OAAO,IAAID,EAAKC,EACpB,EACAD,EAAKS,IAAM,WACP,MAAO,CAACT,EAAKM,IAAI,GAAIN,EAAKM,IAAI,GAAIN,EAAKM,IAAI,GAAIN,EAAKM,IAAI,GAAIN,EAAKM,IAAI,IAAI5N,KAAK,IAClF,EACAsN,EAAKM,IAAM,SAAUI,GAEjB,IADA,IAAIC,EAAM,GACDnrB,EAAI,EAAGA,EAAIkrB,EAAOlrB,IAEvBmrB,IAA+B,OAArB,EAAIhb,KAAKib,UAAuB,GAAG/Y,SAAS,IAAIqB,UAAU,GAExE,OAAOyX,CACX,EACAX,EAAKjN,UAAUyF,OAAS,SAAUC,GAG9B,OAAOuH,EAAKI,OAAO3H,IAAUna,KAAKic,QAAU9B,EAAM5Q,UACtD,EACAmY,EAAKjN,UAAU8N,QAAU,WACrB,OAAOviB,KAAKic,QAAUyF,EAAKG,KAC/B,EACAH,EAAKjN,UAAUlL,SAAW,WACtB,OAAOvJ,KAAKic,KAChB,EACAyF,EAAKjN,UAAU+N,OAAS,WACpB,MAAO,CACHvG,MAAOjc,KAAKic,MAEpB,EACAyF,EAAKK,UAAY,IAAIrX,OAAO,iEAAkE,KAC9FgX,EAAKG,MAAQ,uCACNH,CACX,CArDyB,GAsDzBhV,EAAQgV,KAAOA,C,WCxDf1U,EAAON,QAAUkN,EAKjB,IAAI6I,EAAO,KAEX,IACEA,EAAO,IAAIvmB,YAAYwmB,SAAS,IAAIxmB,YAAYymB,OAAO,IAAIzpB,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,CAAC,GAAGwT,OAGX,CAFE,MAAO3W,GAET,CAYA,SAAS6jB,EAAKC,EAAKC,EAAM8I,GAMrB5iB,KAAK6Z,IAAY,EAANA,EAMX7Z,KAAK8Z,KAAc,EAAPA,EAMZ9Z,KAAK4iB,WAAaA,CACtB,CAmCA,SAASC,EAAOnF,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,WACnC,CAZA9D,EAAKnF,UAAUqO,WAEfhrB,OAAOirB,eAAenJ,EAAKnF,UAAW,aAAc,CAAEwH,OAAO,IAkB7DrC,EAAKiJ,OAASA,EAOd,IAAIG,EAAY,CAAC,EAObC,EAAa,CAAC,EAQlB,SAASC,EAAQjH,EAAO2G,GACpB,IAAIlF,EAAKyF,EAAWC,EACpB,OAAIR,GAEIQ,EAAS,IADbnH,KAAW,IACgBA,EAAQ,OAC/BkH,EAAYF,EAAWhH,IAEZkH,GAEfzF,EAAM2F,EAASpH,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5CmH,IACAH,EAAWhH,GAASyB,GACjBA,IAGH0F,GAAU,MADdnH,GAAS,IACqBA,EAAQ,OAClCkH,EAAYH,EAAU/G,IAEXkH,GAEfzF,EAAM2F,EAASpH,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtCmH,IACAJ,EAAU/G,GAASyB,GAChBA,EAEf,CAiBA,SAAS4F,EAAWrH,EAAO2G,GACvB,GAAI5M,MAAMiG,GACN,OAAO2G,EAAWW,EAAQvJ,EAC9B,GAAI4I,EAAU,CACV,GAAI3G,EAAQ,EACR,OAAOsH,EACX,GAAItH,GAASuH,EACT,OAAOC,CACf,KAAO,CACH,GAAIxH,IAAUyH,EACV,OAAOC,EACX,GAAI1H,EAAQ,GAAKyH,EACb,OAAOE,CACf,CACA,OAAI3H,EAAQ,EACDqH,GAAYrH,EAAO2G,GAAUiB,MACjCR,EAAUpH,EAAQ6H,EAAkB,EAAI7H,EAAQ6H,EAAkB,EAAGlB,EAChF,CAkBA,SAASS,EAASU,EAASC,EAAUpB,GACjC,OAAO,IAAIhJ,EAAKmK,EAASC,EAAUpB,EACvC,CA7CAhJ,EAAKsJ,QAAUA,EAkCftJ,EAAK0J,WAAaA,EAsBlB1J,EAAKyJ,SAAWA,EAShB,IAAIY,EAAU5c,KAAK+O,IASnB,SAAS8N,EAAWC,EAAKvB,EAAUwB,GAC/B,GAAmB,IAAfD,EAAI9qB,OACJ,MAAMmF,MAAM,gBAChB,GAAY,QAAR2lB,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAOnK,EASX,GARwB,iBAAb4I,GAEPwB,EAAQxB,EACRA,GAAW,GAEXA,IAAcA,GAElBwB,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SAErB,IAAI3sB,EACJ,IAAKA,EAAIysB,EAAI7pB,QAAQ,MAAQ,EACzB,MAAMkE,MAAM,mBACX,GAAU,IAAN9G,EACL,OAAOwsB,EAAWC,EAAIvZ,UAAU,GAAIgY,EAAUwB,GAAOP,MAQzD,IAHA,IAAIS,EAAehB,EAAWW,EAAQG,EAAO,IAEzCvD,EAAS7G,EACJ9iB,EAAI,EAAGA,EAAIitB,EAAI9qB,OAAQnC,GAAK,EAAG,CACpC,IAAIkhB,EAAO/Q,KAAK4E,IAAI,EAAGkY,EAAI9qB,OAASnC,GAChC+kB,EAAQsI,SAASJ,EAAIvZ,UAAU1T,EAAGA,EAAIkhB,GAAOgM,GACjD,GAAIhM,EAAO,EAAG,CACV,IAAIoM,EAAQlB,EAAWW,EAAQG,EAAOhM,IACtCyI,EAASA,EAAO4D,IAAID,GAAOE,IAAIpB,EAAWrH,GAC9C,MAEI4E,GADAA,EAASA,EAAO4D,IAAIH,IACJI,IAAIpB,EAAWrH,GAEvC,CAEA,OADA4E,EAAO+B,SAAWA,EACX/B,CACX,CAmBA,SAAS8D,EAAUxP,EAAKyN,GACpB,MAAmB,iBAARzN,EACAmO,EAAWnO,EAAKyN,GACR,iBAARzN,EACA+O,EAAW/O,EAAKyN,GAEpBS,EAASlO,EAAI0E,IAAK1E,EAAI2E,KAA0B,kBAAb8I,EAAyBA,EAAWzN,EAAIyN,SACtF,CAhBAhJ,EAAKsK,WAAaA,EAyBlBtK,EAAK+K,UAAYA,EAUjB,IAcIb,EAAiBc,WAOjBpB,EAAiBM,EAAiBA,EAOlCJ,EAAiBF,EAAiB,EAOlCqB,EAAa3B,EA5BI,GAAK,IAkCtBlJ,EAAOkJ,EAAQ,GAMnBtJ,EAAKI,KAAOA,EAMZ,IAAIuJ,EAAQL,EAAQ,GAAG,GAMvBtJ,EAAK2J,MAAQA,EAMb,IAAIuB,EAAM5B,EAAQ,GAMlBtJ,EAAKkL,IAAMA,EAMX,IAAIC,EAAO7B,EAAQ,GAAG,GAMtBtJ,EAAKmL,KAAOA,EAMZ,IAAIC,EAAU9B,GAAS,GAMvBtJ,EAAKoL,QAAUA,EAMf,IAAIpB,EAAYP,GAAS,EAAc,YAAc,GAMrDzJ,EAAKgK,UAAYA,EAMjB,IAAIH,EAAqBJ,GAAS,GAAc,GAAc,GAM9DzJ,EAAK6J,mBAAqBA,EAM1B,IAAIE,EAAYN,EAAS,GAAG,YAAc,GAM1CzJ,EAAK+J,UAAYA,EAMjB,IAAIsB,EAAgBrL,EAAKnF,UAMzBwQ,EAAcC,MAAQ,WAClB,OAAOllB,KAAK4iB,SAAW5iB,KAAK6Z,MAAQ,EAAI7Z,KAAK6Z,GACjD,EAMAoL,EAAcE,SAAW,WACrB,OAAInlB,KAAK4iB,UACI5iB,KAAK8Z,OAAS,GAAKgK,GAAmB9jB,KAAK6Z,MAAQ,GACzD7Z,KAAK8Z,KAAOgK,GAAkB9jB,KAAK6Z,MAAQ,EACtD,EASAoL,EAAc1b,SAAW,SAAkB6a,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SACrB,GAAIrkB,KAAKolB,SACL,MAAO,IACX,GAAIplB,KAAKqlB,aAAc,CACnB,GAAIrlB,KAAKslB,GAAG3B,GAAY,CAGpB,IAAI4B,EAAYjC,EAAWc,GACvBoB,EAAMxlB,KAAKwlB,IAAID,GACfE,EAAOD,EAAIf,IAAIc,GAAWG,IAAI1lB,MAClC,OAAOwlB,EAAIjc,SAAS6a,GAASqB,EAAKP,QAAQ3b,SAAS6a,EACvD,CACI,MAAO,IAAMpkB,KAAK6jB,MAAMta,SAAS6a,EACzC,CAOA,IAHA,IAAIE,EAAehB,EAAWW,EAAQG,EAAO,GAAIpkB,KAAK4iB,UAClD+C,EAAM3lB,KACN6gB,EAAS,KACA,CACT,IAAI+E,EAASD,EAAIH,IAAIlB,GAEjBuB,GADSF,EAAID,IAAIE,EAAOnB,IAAIH,IAAeY,UAAY,GACvC3b,SAAS6a,GAE7B,IADAuB,EAAMC,GACER,SACJ,OAAOS,EAAShF,EAEhB,KAAOgF,EAAOxsB,OAAS,GACnBwsB,EAAS,IAAMA,EACnBhF,EAAS,GAAKgF,EAAShF,CAE/B,CACJ,EAMAoE,EAAca,YAAc,WACxB,OAAO9lB,KAAK8Z,IAChB,EAMAmL,EAAcc,oBAAsB,WAChC,OAAO/lB,KAAK8Z,OAAS,CACzB,EAMAmL,EAAce,WAAa,WACvB,OAAOhmB,KAAK6Z,GAChB,EAMAoL,EAAcgB,mBAAqB,WAC/B,OAAOjmB,KAAK6Z,MAAQ,CACxB,EAMAoL,EAAciB,cAAgB,WAC1B,GAAIlmB,KAAKqlB,aACL,OAAOrlB,KAAKslB,GAAG3B,GAAa,GAAK3jB,KAAK6jB,MAAMqC,gBAEhD,IADA,IAAI/Q,EAAmB,GAAbnV,KAAK8Z,KAAY9Z,KAAK8Z,KAAO9Z,KAAK6Z,IACnCsM,EAAM,GAAIA,EAAM,GACK,IAArBhR,EAAO,GAAKgR,GADOA,KAG5B,OAAoB,GAAbnmB,KAAK8Z,KAAYqM,EAAM,GAAKA,EAAM,CAC7C,EAMAlB,EAAcG,OAAS,WACnB,OAAqB,IAAdplB,KAAK8Z,MAA2B,IAAb9Z,KAAK6Z,GACnC,EAMAoL,EAAcmB,IAAMnB,EAAcG,OAMlCH,EAAcI,WAAa,WACvB,OAAQrlB,KAAK4iB,UAAY5iB,KAAK8Z,KAAO,CACzC,EAMAmL,EAAcoB,WAAa,WACvB,OAAOrmB,KAAK4iB,UAAY5iB,KAAK8Z,MAAQ,CACzC,EAMAmL,EAAcqB,MAAQ,WAClB,OAA0B,IAAP,EAAXtmB,KAAK6Z,IACjB,EAMAoL,EAAcsB,OAAS,WACnB,OAA0B,IAAP,EAAXvmB,KAAK6Z,IACjB,EAOAoL,EAAc/K,OAAS,SAAgBC,GAGnC,OAFK0I,EAAO1I,KACRA,EAAQwK,EAAUxK,KAClBna,KAAK4iB,WAAazI,EAAMyI,UAAa5iB,KAAK8Z,OAAS,IAAQ,GAAMK,EAAML,OAAS,IAAQ,IAErF9Z,KAAK8Z,OAASK,EAAML,MAAQ9Z,KAAK6Z,MAAQM,EAAMN,GAC1D,EAQAoL,EAAcK,GAAKL,EAAc/K,OAOjC+K,EAAcuB,UAAY,SAAmBrM,GACzC,OAAQna,KAAKslB,GAAmBnL,EACpC,EAQA8K,EAAcwB,IAAMxB,EAAcuB,UAQlCvB,EAAc5lB,GAAK4lB,EAAcuB,UAOjCvB,EAAcyB,SAAW,SAAkBvM,GACvC,OAAOna,KAAK2mB,KAAqBxM,GAAS,CAC9C,EAQA8K,EAAc2B,GAAK3B,EAAcyB,SAOjCzB,EAAc4B,gBAAkB,SAAyB1M,GACrD,OAAOna,KAAK2mB,KAAqBxM,IAAU,CAC/C,EAQA8K,EAAc6B,IAAM7B,EAAc4B,gBAQlC5B,EAAcxjB,GAAKwjB,EAAc4B,gBAOjC5B,EAAc8B,YAAc,SAAqB5M,GAC7C,OAAOna,KAAK2mB,KAAqBxM,GAAS,CAC9C,EAQA8K,EAAc+B,GAAK/B,EAAc8B,YAOjC9B,EAAcgC,mBAAqB,SAA4B9M,GAC3D,OAAOna,KAAK2mB,KAAqBxM,IAAU,CAC/C,EAQA8K,EAAciC,IAAMjC,EAAcgC,mBAQlChC,EAActgB,GAAKsgB,EAAcgC,mBAQjChC,EAAckC,QAAU,SAAiBhN,GAGrC,GAFK0I,EAAO1I,KACRA,EAAQwK,EAAUxK,IAClBna,KAAKslB,GAAGnL,GACR,OAAO,EACX,IAAIiN,EAAUpnB,KAAKqlB,aACfgC,EAAWlN,EAAMkL,aACrB,OAAI+B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENrnB,KAAK4iB,SAGFzI,EAAML,OAAS,EAAM9Z,KAAK8Z,OAAS,GAAOK,EAAML,OAAS9Z,KAAK8Z,MAASK,EAAMN,MAAQ,EAAM7Z,KAAK6Z,MAAQ,GAAO,EAAI,EAFhH7Z,KAAK0lB,IAAIvL,GAAOkL,cAAgB,EAAI,CAGnD,EASAJ,EAAc0B,KAAO1B,EAAckC,QAMnClC,EAAcqC,OAAS,WACnB,OAAKtnB,KAAK4iB,UAAY5iB,KAAKslB,GAAG3B,GACnBA,EACJ3jB,KAAKunB,MAAM7C,IAAII,EAC1B,EAOAG,EAAcpB,IAAMoB,EAAcqC,OAOlCrC,EAAcP,IAAM,SAAa8C,GACxB3E,EAAO2E,KACRA,EAAS7C,EAAU6C,IAIvB,IAAIC,EAAMznB,KAAK8Z,OAAS,GACpB4N,EAAkB,MAAZ1nB,KAAK8Z,KACX6N,EAAM3nB,KAAK6Z,MAAQ,GACnB+N,EAAiB,MAAX5nB,KAAK6Z,IAEXgO,EAAML,EAAO1N,OAAS,GACtBgO,EAAoB,MAAdN,EAAO1N,KACbiO,EAAMP,EAAO3N,MAAQ,GAGrBmO,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAO3N,QAIF,GAGfoO,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAENxE,GANP6E,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+CjoB,KAAK4iB,SAC/D,EAOAqC,EAAcmD,SAAW,SAAkBC,GAGvC,OAFKxF,EAAOwF,KACRA,EAAa1D,EAAU0D,IACpBroB,KAAK0kB,IAAI2D,EAAWxE,MAC/B,EAQAoB,EAAcS,IAAMT,EAAcmD,SAOlCnD,EAAcqD,SAAW,SAAkBC,GACvC,GAAIvoB,KAAKolB,SACL,OAAOpL,EAKX,GAJK6I,EAAO0F,KACRA,EAAa5D,EAAU4D,IAGvB9F,EAKA,OAAOY,EAJGZ,EAAKgC,IAAIzkB,KAAK6Z,IACL7Z,KAAK8Z,KACLyO,EAAW1O,IACX0O,EAAWzO,MACT2I,EAAK+F,WAAYxoB,KAAK4iB,UAG/C,GAAI2F,EAAWnD,SACX,OAAOpL,EACX,GAAIha,KAAKslB,GAAG3B,GACR,OAAO4E,EAAWjC,QAAU3C,EAAY3J,EAC5C,GAAIuO,EAAWjD,GAAG3B,GACd,OAAO3jB,KAAKsmB,QAAU3C,EAAY3J,EAEtC,GAAIha,KAAKqlB,aACL,OAAIkD,EAAWlD,aACJrlB,KAAK6jB,MAAMY,IAAI8D,EAAW1E,OAE1B7jB,KAAK6jB,MAAMY,IAAI8D,GAAY1E,MACnC,GAAI0E,EAAWlD,aAClB,OAAOrlB,KAAKykB,IAAI8D,EAAW1E,OAAOA,MAGtC,GAAI7jB,KAAK4mB,GAAG/B,IAAe0D,EAAW3B,GAAG/B,GACrC,OAAOvB,EAAWtjB,KAAKmlB,WAAaoD,EAAWpD,WAAYnlB,KAAK4iB,UAKpE,IAAI6E,EAAMznB,KAAK8Z,OAAS,GACpB4N,EAAkB,MAAZ1nB,KAAK8Z,KACX6N,EAAM3nB,KAAK6Z,MAAQ,GACnB+N,EAAiB,MAAX5nB,KAAK6Z,IAEXgO,EAAMU,EAAWzO,OAAS,GAC1BgO,EAAwB,MAAlBS,EAAWzO,KACjBiO,EAAMQ,EAAW1O,MAAQ,GACzB4O,EAAuB,MAAjBF,EAAW1O,IAEjBmO,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1CxE,GAZP6E,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+CjoB,KAAK4iB,SAC/D,EAQAqC,EAAcR,IAAMQ,EAAcqD,SAQlCrD,EAAcyD,OAAS,SAAgBC,GAGnC,GAFK9F,EAAO8F,KACRA,EAAUhE,EAAUgE,IACpBA,EAAQvD,SACR,MAAM5mB,MAAM,oBAaZ,IAWAoqB,EAAQjD,EAAKkD,EArBjB,GAAIpG,EAIA,OAAKziB,KAAK4iB,WACS,aAAf5iB,KAAK8Z,OACY,IAAjB6O,EAAQ9O,MAAgC,IAAlB8O,EAAQ7O,KAU3BuJ,GANIrjB,KAAK4iB,SAAWH,EAAKqG,MAAQrG,EAAKsG,OACzC/oB,KAAK6Z,IACL7Z,KAAK8Z,KACL6O,EAAQ9O,IACR8O,EAAQ7O,MAES2I,EAAK+F,WAAYxoB,KAAK4iB,UARhC5iB,KAWf,GAAIA,KAAKolB,SACL,OAAOplB,KAAK4iB,SAAWW,EAAQvJ,EAEnC,GAAKha,KAAK4iB,SA6BH,CAKH,GAFK+F,EAAQ/F,WACT+F,EAAUA,EAAQK,cAClBL,EAAQ3B,GAAGhnB,MACX,OAAOujB,EACX,GAAIoF,EAAQ3B,GAAGhnB,KAAKipB,KAAK,IACrB,OAAOlE,EACX8D,EAAMtF,CACV,KAvCoB,CAGhB,GAAIvjB,KAAKslB,GAAG3B,GACR,OAAIgF,EAAQrD,GAAGR,IAAQ6D,EAAQrD,GAAGN,GACvBrB,EACFgF,EAAQrD,GAAG3B,GACTmB,GAIP8D,EADe5oB,KAAKkpB,IAAI,GACN1D,IAAImD,GAASQ,IAAI,IACxB7D,GAAGtL,GACH2O,EAAQtD,aAAeP,EAAME,GAEpCW,EAAM3lB,KAAK0lB,IAAIiD,EAAQlE,IAAImE,IAC3BC,EAAMD,EAAOlE,IAAIiB,EAAIH,IAAImD,KAI9B,GAAIA,EAAQrD,GAAG3B,GAClB,OAAO3jB,KAAK4iB,SAAWW,EAAQvJ,EACnC,GAAIha,KAAKqlB,aACL,OAAIsD,EAAQtD,aACDrlB,KAAK6jB,MAAM2B,IAAImD,EAAQ9E,OAC3B7jB,KAAK6jB,MAAM2B,IAAImD,GAAS9E,MAC5B,GAAI8E,EAAQtD,aACf,OAAOrlB,KAAKwlB,IAAImD,EAAQ9E,OAAOA,MACnCgF,EAAM7O,CACV,CAkBA,IADA2L,EAAM3lB,KACC2lB,EAAIuB,IAAIyB,IAAU,CAGrBC,EAASvhB,KAAKC,IAAI,EAAGD,KAAKwD,MAAM8a,EAAIR,WAAawD,EAAQxD,aAWzD,IAPA,IAAIiE,EAAO/hB,KAAKuM,KAAKvM,KAAKjM,IAAIwtB,GAAUvhB,KAAK8O,KACzCkT,EAASD,GAAQ,GAAM,EAAInF,EAAQ,EAAGmF,EAAO,IAI7CE,EAAYhG,EAAWsF,GACvBW,EAAYD,EAAU7E,IAAIkE,GACvBY,EAAUlE,cAAgBkE,EAAUvC,GAAGrB,IAG1C4D,GADAD,EAAYhG,EADZsF,GAAUS,EACqBrpB,KAAK4iB,WACd6B,IAAIkE,GAK1BW,EAAUlE,WACVkE,EAAYxE,GAEhB+D,EAAMA,EAAInE,IAAI4E,GACd3D,EAAMA,EAAID,IAAI6D,EAClB,CACA,OAAOV,CACX,EAQA5D,EAAcO,IAAMP,EAAcyD,OAOlCzD,EAAcuE,OAAS,SAAgBb,GAKnC,OAJK9F,EAAO8F,KACRA,EAAUhE,EAAUgE,IAGpBlG,EAOOY,GANIrjB,KAAK4iB,SAAWH,EAAKgH,MAAQhH,EAAKiH,OACzC1pB,KAAK6Z,IACL7Z,KAAK8Z,KACL6O,EAAQ9O,IACR8O,EAAQ7O,MAES2I,EAAK+F,WAAYxoB,KAAK4iB,UAGxC5iB,KAAK0lB,IAAI1lB,KAAKwlB,IAAImD,GAASlE,IAAIkE,GAC1C,EAQA1D,EAAcjN,IAAMiN,EAAcuE,OAQlCvE,EAAcU,IAAMV,EAAcuE,OAMlCvE,EAAcsC,IAAM,WAChB,OAAOlE,GAAUrjB,KAAK6Z,KAAM7Z,KAAK8Z,KAAM9Z,KAAK4iB,SAChD,EAOAqC,EAAc0E,IAAM,SAAaxP,GAG7B,OAFK0I,EAAO1I,KACRA,EAAQwK,EAAUxK,IACfkJ,EAASrjB,KAAK6Z,IAAMM,EAAMN,IAAK7Z,KAAK8Z,KAAOK,EAAML,KAAM9Z,KAAK4iB,SACvE,EAOAqC,EAAc2E,GAAK,SAAYzP,GAG3B,OAFK0I,EAAO1I,KACRA,EAAQwK,EAAUxK,IACfkJ,EAASrjB,KAAK6Z,IAAMM,EAAMN,IAAK7Z,KAAK8Z,KAAOK,EAAML,KAAM9Z,KAAK4iB,SACvE,EAOAqC,EAAc4E,IAAM,SAAa1P,GAG7B,OAFK0I,EAAO1I,KACRA,EAAQwK,EAAUxK,IACfkJ,EAASrjB,KAAK6Z,IAAMM,EAAMN,IAAK7Z,KAAK8Z,KAAOK,EAAML,KAAM9Z,KAAK4iB,SACvE,EAOAqC,EAAc6E,UAAY,SAAmBC,GAGzC,OAFIlH,EAAOkH,KACPA,EAAUA,EAAQ7E,SACE,IAAnB6E,GAAW,IACL/pB,KACF+pB,EAAU,GACR1G,EAASrjB,KAAK6Z,KAAOkQ,EAAU/pB,KAAK8Z,MAAQiQ,EAAY/pB,KAAK6Z,MAAS,GAAKkQ,EAAW/pB,KAAK4iB,UAE3FS,EAAS,EAAGrjB,KAAK6Z,KAAQkQ,EAAU,GAAK/pB,KAAK4iB,SAC5D,EAQAqC,EAAckE,IAAMlE,EAAc6E,UAOlC7E,EAAc+E,WAAa,SAAoBD,GAG3C,OAFIlH,EAAOkH,KACPA,EAAUA,EAAQ7E,SACE,IAAnB6E,GAAW,IACL/pB,KACF+pB,EAAU,GACR1G,EAAUrjB,KAAK6Z,MAAQkQ,EAAY/pB,KAAK8Z,MAAS,GAAKiQ,EAAW/pB,KAAK8Z,MAAQiQ,EAAS/pB,KAAK4iB,UAE5FS,EAASrjB,KAAK8Z,MAASiQ,EAAU,GAAK/pB,KAAK8Z,MAAQ,EAAI,GAAK,EAAG9Z,KAAK4iB,SACnF,EAQAqC,EAAciE,IAAMjE,EAAc+E,WAOlC/E,EAAcgF,mBAAqB,SAA4BF,GAI3D,GAHIlH,EAAOkH,KACPA,EAAUA,EAAQ7E,SAEN,IADhB6E,GAAW,IAEP,OAAO/pB,KAEP,IAAI8Z,EAAO9Z,KAAK8Z,KAChB,OAAIiQ,EAAU,GAEH1G,EADGrjB,KAAK6Z,MACUkQ,EAAYjQ,GAAS,GAAKiQ,EAAWjQ,IAASiQ,EAAS/pB,KAAK4iB,UAE9ES,EADY,KAAZ0G,EACSjQ,EAEAA,IAAUiQ,EAAU,GAFd,EAAG/pB,KAAK4iB,SAI1C,EAQAqC,EAAcgE,KAAOhE,EAAcgF,mBAQnChF,EAAciF,MAAQjF,EAAcgF,mBAMpChF,EAAckF,SAAW,WACrB,OAAKnqB,KAAK4iB,SAEHS,EAASrjB,KAAK6Z,IAAK7Z,KAAK8Z,MAAM,GAD1B9Z,IAEf,EAMAilB,EAAc+D,WAAa,WACvB,OAAIhpB,KAAK4iB,SACE5iB,KACJqjB,EAASrjB,KAAK6Z,IAAK7Z,KAAK8Z,MAAM,EACzC,EAOAmL,EAAcmF,QAAU,SAAiB3oB,GACrC,OAAOA,EAAKzB,KAAKqqB,YAAcrqB,KAAKsqB,WACxC,EAMArF,EAAcoF,UAAY,WACtB,IAAIxS,EAAK7X,KAAK8Z,KACVlC,EAAK5X,KAAK6Z,IACd,MAAO,CACS,IAAZjC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GAEf,EAMAoN,EAAcqF,UAAY,WACtB,IAAIzS,EAAK7X,KAAK8Z,KACVlC,EAAK5X,KAAK6Z,IACd,MAAO,CACHhC,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EAER,EASAgC,EAAK2Q,UAAY,SAAmBhP,EAAOqH,EAAUnhB,GACjD,OAAOA,EAAKmY,EAAK4Q,YAAYjP,EAAOqH,GAAYhJ,EAAK6Q,YAAYlP,EAAOqH,EAC5E,EAQAhJ,EAAK4Q,YAAc,SAAqBjP,EAAOqH,GAC3C,OAAO,IAAIhJ,EACP2B,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZqH,EAER,EAQAhJ,EAAK6Q,YAAc,SAAqBlP,EAAOqH,GAC3C,OAAO,IAAIhJ,EACP2B,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNqH,EAER,C,8BCvyCA,IA6BY8H,EAAiB/nB,EAdrBgoB,EAfJC,EAAY,EAAQ,MAGpBC,EAAUD,EAAUE,OAAQC,EAAUH,EAAUI,OAAQC,EAAQL,EAAUM,KAG1EC,EAAQP,EAAUQ,MAAe,UAAMR,EAAUQ,MAAe,QAAI,CAAC,GAEzED,EAAMR,OAOEA,EAAO,CAAC,GAaPU,SACGX,EAAa,CAAC,GAAG/nB,EAAS7K,OAAOiiB,OAAO2Q,IACrCA,EAAW,GAAK,kBAAoB,EAC3C/nB,EAAO+nB,EAAW,GAAK,yBAA2B,EAClD/nB,EAAO+nB,EAAW,GAAK,yBAA2B,EAClD/nB,EAAO+nB,EAAW,GAAK,wBAA0B,EACjD/nB,EAAO+nB,EAAW,GAAK,wBAA0B,EACjD/nB,EAAO+nB,EAAW,GAAK,cAAgB,EAChC/nB,GAGXgoB,EAAKW,eAAiB,WA8BlB,SAASA,EAAeC,GAMpB,GALAvrB,KAAKwrB,OAAS,GACdxrB,KAAKyrB,KAAO,GACZzrB,KAAK0rB,QAAU,GACf1rB,KAAK2rB,QAAU,GACf3rB,KAAK4rB,OAAS,GACVL,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAmqBA,OA3pBAo0B,EAAe7W,UAAUxU,KAAO,GAQhCqrB,EAAe7W,UAAUoX,YAAc,GAQvCP,EAAe7W,UAAUqX,UAAY,GAQrCR,EAAe7W,UAAUsX,KAAO,EAQhCT,EAAe7W,UAAUld,EAAI,EAQ7B+zB,EAAe7W,UAAUvd,EAAI+zB,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAQ3EiI,EAAe7W,UAAUrd,EAAI6zB,EAAMe,UAAU,IAQ7CV,EAAe7W,UAAU/d,EAAI,KAQ7B40B,EAAe7W,UAAUzc,EAAI,KAQ7BszB,EAAe7W,UAAU+W,OAASP,EAAMgB,WAQxCX,EAAe7W,UAAUgX,KAAOR,EAAMgB,WAQtCX,EAAe7W,UAAUiX,QAAUT,EAAMgB,WAQzCX,EAAe7W,UAAUkX,QAAUV,EAAMgB,WAQzCX,EAAe7W,UAAUmX,OAASX,EAAMgB,WAUxCX,EAAevR,OAAS,SAAgBwR,GACpC,OAAO,IAAID,EAAeC,EAC9B,EAWAD,EAAevX,OAAS,SAAgB7T,EAASgsB,GAe7C,GAdKA,IACDA,EAASnB,EAAQhR,UACD,MAAhB7Z,EAAQD,MAAgBC,EAAQisB,eAAe,SAC/CD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQD,MAC3C,MAAbC,EAAQ3I,GAAa2I,EAAQisB,eAAe,MAC5CD,EAAOE,OAA8B,IAAIC,MAAMnsB,EAAQ3I,GAC1C,MAAb2I,EAAQhJ,GAAagJ,EAAQisB,eAAe,MAC5CD,EAAOE,OAA8B,IAAIE,MAAMpsB,EAAQhJ,GAC1C,MAAbgJ,EAAQ9I,GAAa8I,EAAQisB,eAAe,MAC5CD,EAAOE,OAA8B,IAAI7Q,MAAMrb,EAAQ9I,GAC1C,MAAb8I,EAAQxJ,GAAawJ,EAAQisB,eAAe,MAC5ChB,EAAMR,KAAK4B,YAAYxY,OAAO7T,EAAQxJ,EAAGw1B,EAAOE,OAA8B,IAAII,QAAQC,SAC7E,MAAbvsB,EAAQlI,GAAakI,EAAQisB,eAAe,MAC5ChB,EAAMR,KAAK+B,WAAW3Y,OAAO7T,EAAQlI,EAAGk0B,EAAOE,OAA8B,IAAII,QAAQC,SACvE,MAAlBvsB,EAAQsrB,QAAkBtrB,EAAQsrB,OAAOnyB,OAAQ,CACjD6yB,EAAOE,OAA8B,IAAII,OACzC,IAAK,IAAIt1B,EAAI,EAAGA,EAAIgJ,EAAQsrB,OAAOnyB,SAAUnC,EACzCg1B,EAAOG,MAAMnsB,EAAQsrB,OAAOt0B,IAChCg1B,EAAOO,QACX,CACA,GAAoB,MAAhBvsB,EAAQurB,MAAgBvrB,EAAQurB,KAAKpyB,OAAQ,CAE7C,IADA6yB,EAAOE,OAA8B,IAAII,OAChCt1B,EAAI,EAAGA,EAAIgJ,EAAQurB,KAAKpyB,SAAUnC,EACvCg1B,EAAOI,MAAMpsB,EAAQurB,KAAKv0B,IAC9Bg1B,EAAOO,QACX,CACA,GAAuB,MAAnBvsB,EAAQwrB,SAAmBxrB,EAAQwrB,QAAQryB,OAC3C,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQwrB,QAAQryB,SAAUnC,EAC1Cg1B,EAAOE,OAA8B,IAAI7Q,MAAMrb,EAAQwrB,QAAQx0B,IACvE,GAAuB,MAAnBgJ,EAAQyrB,SAAmBzrB,EAAQyrB,QAAQtyB,OAC3C,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQyrB,QAAQtyB,SAAUnC,EAC1Ci0B,EAAMR,KAAK4B,YAAYxY,OAAO7T,EAAQyrB,QAAQz0B,GAAIg1B,EAAOE,OAA+B,IAAII,QAAQC,SAC5G,GAAsB,MAAlBvsB,EAAQ0rB,QAAkB1rB,EAAQ0rB,OAAOvyB,OACzC,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQ0rB,OAAOvyB,SAAUnC,EACzCi0B,EAAMR,KAAK+B,WAAW3Y,OAAO7T,EAAQ0rB,OAAO10B,GAAIg1B,EAAOE,OAA+B,IAAII,QAAQC,SAO1G,OANyB,MAArBvsB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,cACpDD,EAAOE,OAA+B,KAAK1Y,OAAOxT,EAAQ4rB,WAC1C,MAAhB5rB,EAAQ6rB,MAAgB7rB,EAAQisB,eAAe,SAC/CD,EAAOE,OAA+B,KAAK5S,MAAMtZ,EAAQ6rB,MAClC,MAAvB7rB,EAAQ2rB,aAAuB3rB,EAAQisB,eAAe,gBACtDD,EAAOE,OAA+B,KAAK1Y,OAAOxT,EAAQ2rB,aACvDK,CACX,EAWAZ,EAAeqB,gBAAkB,SAAyBzsB,EAASgsB,GAC/D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAnB,EAAe7uB,OAAS,SAAgBmwB,EAAQvzB,GACtCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAKW,eACrFsB,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQD,KAAO2sB,EAAOlZ,SACtB,MACJ,KAAK,GACDxT,EAAQ2rB,YAAce,EAAOlZ,SAC7B,MACJ,KAAK,GACDxT,EAAQ4rB,UAAYc,EAAOlZ,SAC3B,MACJ,KAAK,GACDxT,EAAQ6rB,KAAOa,EAAOpT,QACtB,MACJ,KAAK,EACDtZ,EAAQ3I,EAAIq1B,EAAOP,QACnB,MACJ,KAAK,EACDnsB,EAAQhJ,EAAI01B,EAAON,QACnB,MACJ,KAAK,EACDpsB,EAAQ9I,EAAIw1B,EAAOrR,QACnB,MACJ,KAAK,EACDrb,EAAQxJ,EAAIy0B,EAAMR,KAAK4B,YAAY9vB,OAAOmwB,EAAQA,EAAOR,UACzD,MACJ,KAAK,EACDlsB,EAAQlI,EAAImzB,EAAMR,KAAK+B,WAAWjwB,OAAOmwB,EAAQA,EAAOR,UACxD,MACJ,KAAK,EAGD,GAFMlsB,EAAQsrB,QAAUtrB,EAAQsrB,OAAOnyB,SACnC6G,EAAQsrB,OAAS,IACH,IAAP,EAANqB,GAED,IADA,IAAIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQsrB,OAAO9qB,KAAKksB,EAAOP,cAE/BnsB,EAAQsrB,OAAO9qB,KAAKksB,EAAOP,SAC/B,MACJ,KAAK,EAGD,GAFMnsB,EAAQurB,MAAQvrB,EAAQurB,KAAKpyB,SAC/B6G,EAAQurB,KAAO,IACD,IAAP,EAANoB,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQurB,KAAK/qB,KAAKksB,EAAON,cAE7BpsB,EAAQurB,KAAK/qB,KAAKksB,EAAON,SAC7B,MACJ,KAAK,EACKpsB,EAAQwrB,SAAWxrB,EAAQwrB,QAAQryB,SACrC6G,EAAQwrB,QAAU,IACtBxrB,EAAQwrB,QAAQhrB,KAAKksB,EAAOrR,SAC5B,MACJ,KAAK,GACKrb,EAAQyrB,SAAWzrB,EAAQyrB,QAAQtyB,SACrC6G,EAAQyrB,QAAU,IACtBzrB,EAAQyrB,QAAQjrB,KAAKyqB,EAAMR,KAAK4B,YAAY9vB,OAAOmwB,EAAQA,EAAOR,WAClE,MACJ,KAAK,GACKlsB,EAAQ0rB,QAAU1rB,EAAQ0rB,OAAOvyB,SACnC6G,EAAQ0rB,OAAS,IACrB1rB,EAAQ0rB,OAAOlrB,KAAKyqB,EAAMR,KAAK+B,WAAWjwB,OAAOmwB,EAAQA,EAAOR,WAChE,MACJ,QACIQ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAorB,EAAe0B,gBAAkB,SAAyBJ,GAGtD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAd,EAAe2B,OAAS,SAAgB/sB,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQD,MAAgBC,EAAQisB,eAAe,UAC1ClB,EAAMiC,SAAShtB,EAAQD,MACxB,MAAO,wBACf,GAA2B,MAAvBC,EAAQ2rB,aAAuB3rB,EAAQisB,eAAe,iBACjDlB,EAAMiC,SAAShtB,EAAQ2rB,aACxB,MAAO,+BACf,GAAyB,MAArB3rB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eAC/ClB,EAAMiC,SAAShtB,EAAQ4rB,WACxB,MAAO,6BACf,GAAoB,MAAhB5rB,EAAQ6rB,MAAgB7rB,EAAQisB,eAAe,QAC/C,OAAQjsB,EAAQ6rB,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,IAGT,GAAiB,MAAb7rB,EAAQ3I,GAAa2I,EAAQisB,eAAe,MACnB,iBAAdjsB,EAAQ3I,EACf,MAAO,qBACf,GAAiB,MAAb2I,EAAQhJ,GAAagJ,EAAQisB,eAAe,QACvClB,EAAMkC,UAAUjtB,EAAQhJ,IAAQgJ,EAAQhJ,GAAK+zB,EAAMkC,UAAUjtB,EAAQhJ,EAAE2iB,MAAQoR,EAAMkC,UAAUjtB,EAAQhJ,EAAE4iB,OAC1G,MAAO,2BACf,GAAiB,MAAb5Z,EAAQ9I,GAAa8I,EAAQisB,eAAe,QACtCjsB,EAAQ9I,GAAiC,iBAArB8I,EAAQ9I,EAAEiC,QAAuB4xB,EAAMiC,SAAShtB,EAAQ9I,IAC9E,MAAO,qBACf,GAAiB,MAAb8I,EAAQxJ,GAAawJ,EAAQisB,eAAe,OACxCnyB,EAAQmxB,EAAMR,KAAK4B,YAAYU,OAAO/sB,EAAQxJ,IAE9C,MAAO,KAAOsD,EAEtB,GAAiB,MAAbkG,EAAQlI,GAAakI,EAAQisB,eAAe,OACxCnyB,EAAQmxB,EAAMR,KAAK+B,WAAWO,OAAO/sB,EAAQlI,IAE7C,MAAO,KAAOgC,EAEtB,GAAsB,MAAlBkG,EAAQsrB,QAAkBtrB,EAAQisB,eAAe,UAAW,CAC5D,IAAKnhB,MAAMoiB,QAAQltB,EAAQsrB,QACvB,MAAO,yBACX,IAAK,IAAIt0B,EAAI,EAAGA,EAAIgJ,EAAQsrB,OAAOnyB,SAAUnC,EACzC,GAAiC,iBAAtBgJ,EAAQsrB,OAAOt0B,GACtB,MAAO,2BACnB,CACA,GAAoB,MAAhBgJ,EAAQurB,MAAgBvrB,EAAQisB,eAAe,QAAS,CACxD,IAAKnhB,MAAMoiB,QAAQltB,EAAQurB,MACvB,MAAO,uBACX,IAASv0B,EAAI,EAAGA,EAAIgJ,EAAQurB,KAAKpyB,SAAUnC,EACvC,KAAK+zB,EAAMkC,UAAUjtB,EAAQurB,KAAKv0B,KAASgJ,EAAQurB,KAAKv0B,IAAM+zB,EAAMkC,UAAUjtB,EAAQurB,KAAKv0B,GAAG2iB,MAAQoR,EAAMkC,UAAUjtB,EAAQurB,KAAKv0B,GAAG4iB,OAClI,MAAO,+BACnB,CACA,GAAuB,MAAnB5Z,EAAQwrB,SAAmBxrB,EAAQisB,eAAe,WAAY,CAC9D,IAAKnhB,MAAMoiB,QAAQltB,EAAQwrB,SACvB,MAAO,0BACX,IAASx0B,EAAI,EAAGA,EAAIgJ,EAAQwrB,QAAQryB,SAAUnC,EAC1C,KAAMgJ,EAAQwrB,QAAQx0B,IAA2C,iBAA9BgJ,EAAQwrB,QAAQx0B,GAAGmC,QAAuB4xB,EAAMiC,SAAShtB,EAAQwrB,QAAQx0B,KACxG,MAAO,4BACnB,CACA,GAAuB,MAAnBgJ,EAAQyrB,SAAmBzrB,EAAQisB,eAAe,WAAY,CAC9D,IAAKnhB,MAAMoiB,QAAQltB,EAAQyrB,SACvB,MAAO,0BACX,IAASz0B,EAAI,EAAGA,EAAIgJ,EAAQyrB,QAAQtyB,SAAUnC,EAE1C,GADI8C,EAAQmxB,EAAMR,KAAK4B,YAAYU,OAAO/sB,EAAQyrB,QAAQz0B,IAEtD,MAAO,WAAa8C,CAEhC,CACA,GAAsB,MAAlBkG,EAAQ0rB,QAAkB1rB,EAAQisB,eAAe,UAAW,CAC5D,IAAKnhB,MAAMoiB,QAAQltB,EAAQ0rB,QACvB,MAAO,yBACX,IAAS10B,EAAI,EAAGA,EAAIgJ,EAAQ0rB,OAAOvyB,SAAUnC,EAAG,CAC5C,IAAI8C,EACJ,GADIA,EAAQmxB,EAAMR,KAAK+B,WAAWO,OAAO/sB,EAAQ0rB,OAAO10B,IAEpD,MAAO,UAAY8C,CAC3B,CACJ,CACA,OAAO,IACX,EAUAsxB,EAAe+B,WAAa,SAAoBC,GAC5C,GAAIA,aAAkBnC,EAAMR,KAAKW,eAC7B,OAAOgC,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAKW,eAO7B,OANmB,MAAfgC,EAAOrtB,OACPC,EAAQD,KAAOrD,OAAO0wB,EAAOrtB,OACP,MAAtBqtB,EAAOzB,cACP3rB,EAAQ2rB,YAAcjvB,OAAO0wB,EAAOzB,cAChB,MAApByB,EAAOxB,YACP5rB,EAAQ4rB,UAAYlvB,OAAO0wB,EAAOxB,YAC9BwB,EAAOvB,MACf,IAAK,YACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,MACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACD7rB,EAAQ6rB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,GACD7rB,EAAQ6rB,KAAO,GAmBnB,GAhBgB,MAAZuB,EAAO/1B,IACP2I,EAAQ3I,EAAIgQ,OAAO+lB,EAAO/1B,IACd,MAAZ+1B,EAAOp2B,IACH+zB,EAAMrR,MACL1Z,EAAQhJ,EAAI+zB,EAAMrR,KAAK+K,UAAU2I,EAAOp2B,IAAI0rB,UAAW,EAC/B,iBAAb0K,EAAOp2B,EACnBgJ,EAAQhJ,EAAIqtB,SAAS+I,EAAOp2B,EAAG,IACN,iBAAbo2B,EAAOp2B,EACnBgJ,EAAQhJ,EAAIo2B,EAAOp2B,EACM,iBAAbo2B,EAAOp2B,IACnBgJ,EAAQhJ,EAAI,IAAI+zB,EAAMsC,SAASD,EAAOp2B,EAAE2iB,MAAQ,EAAGyT,EAAOp2B,EAAE4iB,OAAS,GAAGqL,aAChE,MAAZmI,EAAOl2B,IACiB,iBAAbk2B,EAAOl2B,EACd6zB,EAAMxX,OAAOhX,OAAO6wB,EAAOl2B,EAAG8I,EAAQ9I,EAAI6zB,EAAMe,UAAUf,EAAMxX,OAAOpa,OAAOi0B,EAAOl2B,IAAK,GACrFk2B,EAAOl2B,EAAEiC,SACd6G,EAAQ9I,EAAIk2B,EAAOl2B,IACX,MAAZk2B,EAAO52B,EAAW,CAClB,GAAwB,iBAAb42B,EAAO52B,EACd,MAAMkrB,UAAU,2CACpB1hB,EAAQxJ,EAAIy0B,EAAMR,KAAK4B,YAAYc,WAAWC,EAAO52B,EACzD,CACA,GAAgB,MAAZ42B,EAAOt1B,EAAW,CAClB,GAAwB,iBAAbs1B,EAAOt1B,EACd,MAAM4pB,UAAU,2CACpB1hB,EAAQlI,EAAImzB,EAAMR,KAAK+B,WAAWW,WAAWC,EAAOt1B,EACxD,CACA,GAAIs1B,EAAO9B,OAAQ,CACf,IAAKxgB,MAAMoiB,QAAQE,EAAO9B,QACtB,MAAM5J,UAAU,+CACpB1hB,EAAQsrB,OAAS,GACjB,IAAK,IAAIt0B,EAAI,EAAGA,EAAIo2B,EAAO9B,OAAOnyB,SAAUnC,EACxCgJ,EAAQsrB,OAAOt0B,GAAKqQ,OAAO+lB,EAAO9B,OAAOt0B,GACjD,CACA,GAAIo2B,EAAO7B,KAAM,CACb,IAAKzgB,MAAMoiB,QAAQE,EAAO7B,MACtB,MAAM7J,UAAU,6CAEpB,IADA1hB,EAAQurB,KAAO,GACNv0B,EAAI,EAAGA,EAAIo2B,EAAO7B,KAAKpyB,SAAUnC,EAClC+zB,EAAMrR,MACL1Z,EAAQurB,KAAKv0B,GAAK+zB,EAAMrR,KAAK+K,UAAU2I,EAAO7B,KAAKv0B,KAAK0rB,UAAW,EACrC,iBAAnB0K,EAAO7B,KAAKv0B,GACxBgJ,EAAQurB,KAAKv0B,GAAKqtB,SAAS+I,EAAO7B,KAAKv0B,GAAI,IACZ,iBAAnBo2B,EAAO7B,KAAKv0B,GACxBgJ,EAAQurB,KAAKv0B,GAAKo2B,EAAO7B,KAAKv0B,GACC,iBAAnBo2B,EAAO7B,KAAKv0B,KACxBgJ,EAAQurB,KAAKv0B,GAAK,IAAI+zB,EAAMsC,SAASD,EAAO7B,KAAKv0B,GAAG2iB,MAAQ,EAAGyT,EAAO7B,KAAKv0B,GAAG4iB,OAAS,GAAGqL,WACtG,CACA,GAAImI,EAAO5B,QAAS,CAChB,IAAK1gB,MAAMoiB,QAAQE,EAAO5B,SACtB,MAAM9J,UAAU,gDAEpB,IADA1hB,EAAQwrB,QAAU,GACTx0B,EAAI,EAAGA,EAAIo2B,EAAO5B,QAAQryB,SAAUnC,EACR,iBAAtBo2B,EAAO5B,QAAQx0B,GACtB+zB,EAAMxX,OAAOhX,OAAO6wB,EAAO5B,QAAQx0B,GAAIgJ,EAAQwrB,QAAQx0B,GAAK+zB,EAAMe,UAAUf,EAAMxX,OAAOpa,OAAOi0B,EAAO5B,QAAQx0B,KAAM,GAChHo2B,EAAO5B,QAAQx0B,GAAGmC,SACvB6G,EAAQwrB,QAAQx0B,GAAKo2B,EAAO5B,QAAQx0B,GAChD,CACA,GAAIo2B,EAAO3B,QAAS,CAChB,IAAK3gB,MAAMoiB,QAAQE,EAAO3B,SACtB,MAAM/J,UAAU,gDAEpB,IADA1hB,EAAQyrB,QAAU,GACTz0B,EAAI,EAAGA,EAAIo2B,EAAO3B,QAAQtyB,SAAUnC,EAAG,CAC5C,GAAiC,iBAAtBo2B,EAAO3B,QAAQz0B,GACtB,MAAM0qB,UAAU,iDACpB1hB,EAAQyrB,QAAQz0B,GAAKi0B,EAAMR,KAAK4B,YAAYc,WAAWC,EAAO3B,QAAQz0B,GAC1E,CACJ,CACA,GAAIo2B,EAAO1B,OAAQ,CACf,IAAK5gB,MAAMoiB,QAAQE,EAAO1B,QACtB,MAAMhK,UAAU,+CAEpB,IADA1hB,EAAQ0rB,OAAS,GACR10B,EAAI,EAAGA,EAAIo2B,EAAO1B,OAAOvyB,SAAUnC,EAAG,CAC3C,GAAgC,iBAArBo2B,EAAO1B,OAAO10B,GACrB,MAAM0qB,UAAU,gDACpB1hB,EAAQ0rB,OAAO10B,GAAKi0B,EAAMR,KAAK+B,WAAWW,WAAWC,EAAO1B,OAAO10B,GACvE,CACJ,CACA,OAAOgJ,CACX,EAWAorB,EAAekC,SAAW,SAAkBttB,EAASutB,GAC5CA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAQd,IAPIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAO9B,OAAS,GAChB8B,EAAO7B,KAAO,GACd6B,EAAO5B,QAAU,GACjB4B,EAAO3B,QAAU,GACjB2B,EAAO1B,OAAS,IAEhB6B,EAAQE,SAAU,CAGlB,GAFAL,EAAOrtB,KAAO,GACdqtB,EAAO/1B,EAAI,EACP0zB,EAAMrR,KAAM,CACZ,IAAIgU,EAAO,IAAI3C,EAAMrR,KAAK,EAAG,GAAG,GAChC0T,EAAOp2B,EAAIu2B,EAAQI,QAAUjxB,OAASgxB,EAAKrkB,WAAakkB,EAAQI,QAAUtmB,OAASqmB,EAAKzI,WAAayI,CACzG,MACIN,EAAOp2B,EAAIu2B,EAAQI,QAAUjxB,OAAS,IAAM,EAC5C6wB,EAAQlS,QAAU3e,OAClB0wB,EAAOl2B,EAAI,IAEXk2B,EAAOl2B,EAAI,GACPq2B,EAAQlS,QAAUvQ,QAClBsiB,EAAOl2B,EAAI6zB,EAAMe,UAAUsB,EAAOl2B,KAE1Ck2B,EAAO52B,EAAI,KACX42B,EAAOt1B,EAAI,KACXs1B,EAAOxB,UAAY,GACnBwB,EAAOvB,KAAO0B,EAAQK,QAAUlxB,OAAS,YAAc,EACvD0wB,EAAOzB,YAAc,EACzB,CAgBA,GAfoB,MAAhB3rB,EAAQD,MAAgBC,EAAQisB,eAAe,UAC/CmB,EAAOrtB,KAAOC,EAAQD,MACT,MAAbC,EAAQ3I,GAAa2I,EAAQisB,eAAe,OAC5CmB,EAAO/1B,EAAIk2B,EAAQM,OAASC,SAAS9tB,EAAQ3I,GAAKqF,OAAOsD,EAAQ3I,GAAK2I,EAAQ3I,GACjE,MAAb2I,EAAQhJ,GAAagJ,EAAQisB,eAAe,OACnB,iBAAdjsB,EAAQhJ,EACfo2B,EAAOp2B,EAAIu2B,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQhJ,GAAKgJ,EAAQhJ,EAElEo2B,EAAOp2B,EAAIu2B,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQhJ,GAAKu2B,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQhJ,EAAE2iB,MAAQ,EAAG3Z,EAAQhJ,EAAE4iB,OAAS,GAAGqL,WAAajlB,EAAQhJ,GAC3L,MAAbgJ,EAAQ9I,GAAa8I,EAAQisB,eAAe,OAC5CmB,EAAOl2B,EAAIq2B,EAAQlS,QAAU3e,OAASquB,EAAMxX,OAAOM,OAAO7T,EAAQ9I,EAAG,EAAG8I,EAAQ9I,EAAEiC,QAAUo0B,EAAQlS,QAAUvQ,MAAQA,MAAMyJ,UAAUlb,MAAMgT,KAAKrM,EAAQ9I,GAAK8I,EAAQ9I,GACzJ,MAAb8I,EAAQxJ,GAAawJ,EAAQisB,eAAe,OAC5CmB,EAAO52B,EAAIy0B,EAAMR,KAAK4B,YAAYiB,SAASttB,EAAQxJ,EAAG+2B,IACzC,MAAbvtB,EAAQlI,GAAakI,EAAQisB,eAAe,OAC5CmB,EAAOt1B,EAAImzB,EAAMR,KAAK+B,WAAWc,SAASttB,EAAQlI,EAAGy1B,IACrDvtB,EAAQsrB,QAAUtrB,EAAQsrB,OAAOnyB,OAAQ,CACzCi0B,EAAO9B,OAAS,GAChB,IAAK,IAAI1uB,EAAI,EAAGA,EAAIoD,EAAQsrB,OAAOnyB,SAAUyD,EACzCwwB,EAAO9B,OAAO1uB,GAAK2wB,EAAQM,OAASC,SAAS9tB,EAAQsrB,OAAO1uB,IAAMF,OAAOsD,EAAQsrB,OAAO1uB,IAAMoD,EAAQsrB,OAAO1uB,EACrH,CACA,GAAIoD,EAAQurB,MAAQvrB,EAAQurB,KAAKpyB,OAE7B,IADAi0B,EAAO7B,KAAO,GACL3uB,EAAI,EAAGA,EAAIoD,EAAQurB,KAAKpyB,SAAUyD,EACR,iBAApBoD,EAAQurB,KAAK3uB,GACpBwwB,EAAO7B,KAAK3uB,GAAK2wB,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQurB,KAAK3uB,IAAMoD,EAAQurB,KAAK3uB,GAEnFwwB,EAAO7B,KAAK3uB,GAAK2wB,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQurB,KAAK3uB,IAAM2wB,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQurB,KAAK3uB,GAAG+c,MAAQ,EAAG3Z,EAAQurB,KAAK3uB,GAAGgd,OAAS,GAAGqL,WAAajlB,EAAQurB,KAAK3uB,GAE7O,GAAIoD,EAAQwrB,SAAWxrB,EAAQwrB,QAAQryB,OAEnC,IADAi0B,EAAO5B,QAAU,GACR5uB,EAAI,EAAGA,EAAIoD,EAAQwrB,QAAQryB,SAAUyD,EAC1CwwB,EAAO5B,QAAQ5uB,GAAK2wB,EAAQlS,QAAU3e,OAASquB,EAAMxX,OAAOM,OAAO7T,EAAQwrB,QAAQ5uB,GAAI,EAAGoD,EAAQwrB,QAAQ5uB,GAAGzD,QAAUo0B,EAAQlS,QAAUvQ,MAAQA,MAAMyJ,UAAUlb,MAAMgT,KAAKrM,EAAQwrB,QAAQ5uB,IAAMoD,EAAQwrB,QAAQ5uB,GAE1N,GAAIoD,EAAQyrB,SAAWzrB,EAAQyrB,QAAQtyB,OAEnC,IADAi0B,EAAO3B,QAAU,GACR7uB,EAAI,EAAGA,EAAIoD,EAAQyrB,QAAQtyB,SAAUyD,EAC1CwwB,EAAO3B,QAAQ7uB,GAAKquB,EAAMR,KAAK4B,YAAYiB,SAASttB,EAAQyrB,QAAQ7uB,GAAI2wB,GAEhF,GAAIvtB,EAAQ0rB,QAAU1rB,EAAQ0rB,OAAOvyB,OAEjC,IADAi0B,EAAO1B,OAAS,GACP9uB,EAAI,EAAGA,EAAIoD,EAAQ0rB,OAAOvyB,SAAUyD,EACzCwwB,EAAO1B,OAAO9uB,GAAKquB,EAAMR,KAAK+B,WAAWc,SAASttB,EAAQ0rB,OAAO9uB,GAAI2wB,GAQ7E,OANyB,MAArBvtB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eACpDmB,EAAOxB,UAAY5rB,EAAQ4rB,WACX,MAAhB5rB,EAAQ6rB,MAAgB7rB,EAAQisB,eAAe,UAC/CmB,EAAOvB,KAAO0B,EAAQK,QAAUlxB,OAASuuB,EAAMR,KAAKW,eAAe2C,cAAc/tB,EAAQ6rB,MAAQ7rB,EAAQ6rB,MAClF,MAAvB7rB,EAAQ2rB,aAAuB3rB,EAAQisB,eAAe,iBACtDmB,EAAOzB,YAAc3rB,EAAQ2rB,aAC1ByB,CACX,EASAhC,EAAe7W,UAAU+N,OAAS,WAC9B,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAkBA7C,EAAe2C,cAAgB,WAC3B,IAAIvD,EAAa,CAAC,EAAG/nB,EAAS7K,OAAOiiB,OAAO2Q,GAY5C,OAXA/nB,EAAO+nB,EAAW,GAAK,aAAe,EACtC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,OAAS,EAChC/nB,EAAO+nB,EAAW,GAAK,UAAY,EACnC/nB,EAAO+nB,EAAW,GAAK,UAAY,EACnC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,UAAY,EACnC/nB,EAAO+nB,EAAW,GAAK,QAAU,EACjC/nB,EAAO+nB,EAAW,GAAK,WAAa,EACpC/nB,EAAO+nB,EAAW,GAAK,WAAa,EACpC/nB,EAAO+nB,EAAW,IAAM,UAAY,GAC7B/nB,CACV,CAd8B,GAgBxB2oB,CACV,CA5sBqB,GA8sBtBX,EAAKyD,eAAiB,WAmBlB,SAASA,EAAe7C,GACpB,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAkNA,OA1MAk3B,EAAe3Z,UAAUxU,KAAO,GAQhCmuB,EAAe3Z,UAAUsX,KAAO,KAQhCqC,EAAe3Z,UAAUqX,UAAY,GAUrCsC,EAAerU,OAAS,SAAgBwR,GACpC,OAAO,IAAI6C,EAAe7C,EAC9B,EAWA6C,EAAera,OAAS,SAAgB7T,EAASgsB,GAS7C,OARKA,IACDA,EAASnB,EAAQhR,UACD,MAAhB7Z,EAAQD,MAAgBC,EAAQisB,eAAe,SAC/CD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQD,MACxC,MAAhBC,EAAQ6rB,MAAgB7rB,EAAQisB,eAAe,SAC/ChB,EAAMR,KAAK0D,UAAUta,OAAO7T,EAAQ6rB,KAAMG,EAAOE,OAA8B,IAAII,QAAQC,SACtE,MAArBvsB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,cACpDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQ4rB,WACrDI,CACX,EAWAkC,EAAezB,gBAAkB,SAAyBzsB,EAASgsB,GAC/D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaA2B,EAAe3xB,OAAS,SAAgBmwB,EAAQvzB,GACtCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAKyD,eACrFxB,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQD,KAAO2sB,EAAOlZ,SACtB,MACJ,KAAK,EACDxT,EAAQ6rB,KAAOZ,EAAMR,KAAK0D,UAAU5xB,OAAOmwB,EAAQA,EAAOR,UAC1D,MACJ,KAAK,EACDlsB,EAAQ4rB,UAAYc,EAAOlZ,SAC3B,MACJ,QACIkZ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAkuB,EAAepB,gBAAkB,SAAyBJ,GAGtD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAgC,EAAenB,OAAS,SAAgB/sB,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQD,MAAgBC,EAAQisB,eAAe,UAC1ClB,EAAMiC,SAAShtB,EAAQD,MACxB,MAAO,wBACf,GAAoB,MAAhBC,EAAQ6rB,MAAgB7rB,EAAQisB,eAAe,QAAS,CACxD,IAAInyB,EAAQmxB,EAAMR,KAAK0D,UAAUpB,OAAO/sB,EAAQ6rB,MAChD,GAAI/xB,EACA,MAAO,QAAUA,CACzB,CACA,OAAyB,MAArBkG,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eAC/ClB,EAAMiC,SAAShtB,EAAQ4rB,WACjB,6BACR,IACX,EAUAsC,EAAef,WAAa,SAAoBC,GAC5C,GAAIA,aAAkBnC,EAAMR,KAAKyD,eAC7B,OAAOd,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAKyD,eAG7B,GAFmB,MAAfd,EAAOrtB,OACPC,EAAQD,KAAOrD,OAAO0wB,EAAOrtB,OACd,MAAfqtB,EAAOvB,KAAc,CACrB,GAA2B,iBAAhBuB,EAAOvB,KACd,MAAMnK,UAAU,8CACpB1hB,EAAQ6rB,KAAOZ,EAAMR,KAAK0D,UAAUhB,WAAWC,EAAOvB,KAC1D,CAGA,OAFwB,MAApBuB,EAAOxB,YACP5rB,EAAQ4rB,UAAYlvB,OAAO0wB,EAAOxB,YAC/B5rB,CACX,EAWAkuB,EAAeZ,SAAW,SAAkBttB,EAASutB,GAC5CA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAYd,OAXIG,EAAQE,WACRL,EAAOrtB,KAAO,GACdqtB,EAAOvB,KAAO,KACduB,EAAOxB,UAAY,IAEH,MAAhB5rB,EAAQD,MAAgBC,EAAQisB,eAAe,UAC/CmB,EAAOrtB,KAAOC,EAAQD,MACN,MAAhBC,EAAQ6rB,MAAgB7rB,EAAQisB,eAAe,UAC/CmB,EAAOvB,KAAOZ,EAAMR,KAAK0D,UAAUb,SAASttB,EAAQ6rB,KAAM0B,IACrC,MAArBvtB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eACpDmB,EAAOxB,UAAY5rB,EAAQ4rB,WACxBwB,CACX,EASAc,EAAe3Z,UAAU+N,OAAS,WAC9B,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOC,CACV,CA3OqB,GA6OtBzD,EAAK2D,UAAY,WAuBb,SAASA,EAAU/C,GAIf,GAHAvrB,KAAKuuB,MAAQ,GACbvuB,KAAKwuB,OAAS,GACdxuB,KAAKyuB,UAAY,GACblD,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAqVA,OA7UAo3B,EAAU7Z,UAAU8Z,MAAQtD,EAAMgB,WAQlCqC,EAAU7Z,UAAU+Z,OAASvD,EAAMgB,WAQnCqC,EAAU7Z,UAAUxU,KAAO,GAQ3BquB,EAAU7Z,UAAUia,OAAS,GAQ7BJ,EAAU7Z,UAAUka,OAAS,GAQ7BL,EAAU7Z,UAAUga,UAAYxD,EAAMgB,WAQtCqC,EAAU7Z,UAAUqX,UAAY,GAUhCwC,EAAUvU,OAAS,SAAgBwR,GAC/B,OAAO,IAAI+C,EAAU/C,EACzB,EAWA+C,EAAUva,OAAS,SAAgB7T,EAASgsB,GAGxC,GAFKA,IACDA,EAASnB,EAAQhR,UACA,MAAjB7Z,EAAQquB,OAAiBruB,EAAQquB,MAAMl1B,OACvC,IAAK,IAAInC,EAAI,EAAGA,EAAIgJ,EAAQquB,MAAMl1B,SAAUnC,EACxCg1B,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQquB,MAAMr3B,IACtE,GAAsB,MAAlBgJ,EAAQsuB,QAAkBtuB,EAAQsuB,OAAOn1B,OACzC,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQsuB,OAAOn1B,SAAUnC,EACzCg1B,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQsuB,OAAOt3B,IAKvE,GAJoB,MAAhBgJ,EAAQD,MAAgBC,EAAQisB,eAAe,SAC/CD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQD,MACtC,MAAlBC,EAAQwuB,QAAkBxuB,EAAQisB,eAAe,WACjDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQwuB,QACnC,MAArBxuB,EAAQuuB,WAAqBvuB,EAAQuuB,UAAUp1B,OAC/C,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQuuB,UAAUp1B,SAAUnC,EAC5Ci0B,EAAMR,KAAKW,eAAevX,OAAO7T,EAAQuuB,UAAUv3B,GAAIg1B,EAAOE,OAA8B,IAAII,QAAQC,SAKhH,OAJyB,MAArBvsB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,cACpDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQ4rB,WACtC,MAAlB5rB,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,WACjDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQyuB,QACrDzC,CACX,EAWAoC,EAAU3B,gBAAkB,SAAyBzsB,EAASgsB,GAC1D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaA6B,EAAU7xB,OAAS,SAAgBmwB,EAAQvzB,GACjCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK2D,UACrF1B,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACK3sB,EAAQquB,OAASruB,EAAQquB,MAAMl1B,SACjC6G,EAAQquB,MAAQ,IACpBruB,EAAQquB,MAAM7tB,KAAKksB,EAAOlZ,UAC1B,MACJ,KAAK,EACKxT,EAAQsuB,QAAUtuB,EAAQsuB,OAAOn1B,SACnC6G,EAAQsuB,OAAS,IACrBtuB,EAAQsuB,OAAO9tB,KAAKksB,EAAOlZ,UAC3B,MACJ,KAAK,EACDxT,EAAQD,KAAO2sB,EAAOlZ,SACtB,MACJ,KAAK,EACDxT,EAAQwuB,OAAS9B,EAAOlZ,SACxB,MACJ,KAAK,EACDxT,EAAQyuB,OAAS/B,EAAOlZ,SACxB,MACJ,KAAK,EACKxT,EAAQuuB,WAAavuB,EAAQuuB,UAAUp1B,SACzC6G,EAAQuuB,UAAY,IACxBvuB,EAAQuuB,UAAU/tB,KAAKyqB,EAAMR,KAAKW,eAAe7uB,OAAOmwB,EAAQA,EAAOR,WACvE,MACJ,KAAK,EACDlsB,EAAQ4rB,UAAYc,EAAOlZ,SAC3B,MACJ,QACIkZ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAouB,EAAUtB,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAkC,EAAUrB,OAAS,SAAgB/sB,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQquB,OAAiBruB,EAAQisB,eAAe,SAAU,CAC1D,IAAKnhB,MAAMoiB,QAAQltB,EAAQquB,OACvB,MAAO,wBACX,IAAK,IAAIr3B,EAAI,EAAGA,EAAIgJ,EAAQquB,MAAMl1B,SAAUnC,EACxC,IAAK+zB,EAAMiC,SAAShtB,EAAQquB,MAAMr3B,IAC9B,MAAO,0BACnB,CACA,GAAsB,MAAlBgJ,EAAQsuB,QAAkBtuB,EAAQisB,eAAe,UAAW,CAC5D,IAAKnhB,MAAMoiB,QAAQltB,EAAQsuB,QACvB,MAAO,yBACX,IAASt3B,EAAI,EAAGA,EAAIgJ,EAAQsuB,OAAOn1B,SAAUnC,EACzC,IAAK+zB,EAAMiC,SAAShtB,EAAQsuB,OAAOt3B,IAC/B,MAAO,2BACnB,CACA,GAAoB,MAAhBgJ,EAAQD,MAAgBC,EAAQisB,eAAe,UAC1ClB,EAAMiC,SAAShtB,EAAQD,MACxB,MAAO,wBACf,GAAsB,MAAlBC,EAAQwuB,QAAkBxuB,EAAQisB,eAAe,YAC5ClB,EAAMiC,SAAShtB,EAAQwuB,QACxB,MAAO,0BACf,GAAsB,MAAlBxuB,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,YAC5ClB,EAAMiC,SAAShtB,EAAQyuB,QACxB,MAAO,0BACf,GAAyB,MAArBzuB,EAAQuuB,WAAqBvuB,EAAQisB,eAAe,aAAc,CAClE,IAAKnhB,MAAMoiB,QAAQltB,EAAQuuB,WACvB,MAAO,4BACX,IAASv3B,EAAI,EAAGA,EAAIgJ,EAAQuuB,UAAUp1B,SAAUnC,EAAG,CAC/C,IAAI8C,EAAQmxB,EAAMR,KAAKW,eAAe2B,OAAO/sB,EAAQuuB,UAAUv3B,IAC/D,GAAI8C,EACA,MAAO,aAAeA,CAC9B,CACJ,CACA,OAAyB,MAArBkG,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eAC/ClB,EAAMiC,SAAShtB,EAAQ4rB,WACjB,6BACR,IACX,EAUAwC,EAAUjB,WAAa,SAAoBC,GACvC,GAAIA,aAAkBnC,EAAMR,KAAK2D,UAC7B,OAAOhB,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK2D,UAC7B,GAAIhB,EAAOiB,MAAO,CACd,IAAKvjB,MAAMoiB,QAAQE,EAAOiB,OACtB,MAAM3M,UAAU,yCACpB1hB,EAAQquB,MAAQ,GAChB,IAAK,IAAIr3B,EAAI,EAAGA,EAAIo2B,EAAOiB,MAAMl1B,SAAUnC,EACvCgJ,EAAQquB,MAAMr3B,GAAK0F,OAAO0wB,EAAOiB,MAAMr3B,GAC/C,CACA,GAAIo2B,EAAOkB,OAAQ,CACf,IAAKxjB,MAAMoiB,QAAQE,EAAOkB,QACtB,MAAM5M,UAAU,0CAEpB,IADA1hB,EAAQsuB,OAAS,GACRt3B,EAAI,EAAGA,EAAIo2B,EAAOkB,OAAOn1B,SAAUnC,EACxCgJ,EAAQsuB,OAAOt3B,GAAK0F,OAAO0wB,EAAOkB,OAAOt3B,GACjD,CAOA,GANmB,MAAfo2B,EAAOrtB,OACPC,EAAQD,KAAOrD,OAAO0wB,EAAOrtB,OACZ,MAAjBqtB,EAAOoB,SACPxuB,EAAQwuB,OAAS9xB,OAAO0wB,EAAOoB,SACd,MAAjBpB,EAAOqB,SACPzuB,EAAQyuB,OAAS/xB,OAAO0wB,EAAOqB,SAC/BrB,EAAOmB,UAAW,CAClB,IAAKzjB,MAAMoiB,QAAQE,EAAOmB,WACtB,MAAM7M,UAAU,6CAEpB,IADA1hB,EAAQuuB,UAAY,GACXv3B,EAAI,EAAGA,EAAIo2B,EAAOmB,UAAUp1B,SAAUnC,EAAG,CAC9C,GAAmC,iBAAxBo2B,EAAOmB,UAAUv3B,GACxB,MAAM0qB,UAAU,8CACpB1hB,EAAQuuB,UAAUv3B,GAAKi0B,EAAMR,KAAKW,eAAe+B,WAAWC,EAAOmB,UAAUv3B,GACjF,CACJ,CAGA,OAFwB,MAApBo2B,EAAOxB,YACP5rB,EAAQ4rB,UAAYlvB,OAAO0wB,EAAOxB,YAC/B5rB,CACX,EAWAouB,EAAUd,SAAW,SAAkBttB,EAASutB,GACvCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAYd,IAXIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOiB,MAAQ,GACfjB,EAAOkB,OAAS,GAChBlB,EAAOmB,UAAY,IAEnBhB,EAAQE,WACRL,EAAOrtB,KAAO,GACdqtB,EAAOoB,OAAS,GAChBpB,EAAOxB,UAAY,GACnBwB,EAAOqB,OAAS,IAEhBzuB,EAAQquB,OAASruB,EAAQquB,MAAMl1B,OAAQ,CACvCi0B,EAAOiB,MAAQ,GACf,IAAK,IAAIzxB,EAAI,EAAGA,EAAIoD,EAAQquB,MAAMl1B,SAAUyD,EACxCwwB,EAAOiB,MAAMzxB,GAAKoD,EAAQquB,MAAMzxB,EACxC,CACA,GAAIoD,EAAQsuB,QAAUtuB,EAAQsuB,OAAOn1B,OAEjC,IADAi0B,EAAOkB,OAAS,GACP1xB,EAAI,EAAGA,EAAIoD,EAAQsuB,OAAOn1B,SAAUyD,EACzCwwB,EAAOkB,OAAO1xB,GAAKoD,EAAQsuB,OAAO1xB,GAM1C,GAJoB,MAAhBoD,EAAQD,MAAgBC,EAAQisB,eAAe,UAC/CmB,EAAOrtB,KAAOC,EAAQD,MACJ,MAAlBC,EAAQwuB,QAAkBxuB,EAAQisB,eAAe,YACjDmB,EAAOoB,OAASxuB,EAAQwuB,QACxBxuB,EAAQuuB,WAAavuB,EAAQuuB,UAAUp1B,OAEvC,IADAi0B,EAAOmB,UAAY,GACV3xB,EAAI,EAAGA,EAAIoD,EAAQuuB,UAAUp1B,SAAUyD,EAC5CwwB,EAAOmB,UAAU3xB,GAAKquB,EAAMR,KAAKW,eAAekC,SAASttB,EAAQuuB,UAAU3xB,GAAI2wB,GAMvF,OAJyB,MAArBvtB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eACpDmB,EAAOxB,UAAY5rB,EAAQ4rB,WACT,MAAlB5rB,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,YACjDmB,EAAOqB,OAASzuB,EAAQyuB,QACrBrB,CACX,EASAgB,EAAU7Z,UAAU+N,OAAS,WACzB,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOG,CACV,CArXgB,GAuXjB3D,EAAKiE,WAAa,WAyBd,SAASA,EAAWrD,GAGhB,GAFAvrB,KAAK6uB,YAAc,GACnB7uB,KAAK8uB,cAAgB,GACjBvD,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAsZA,OA9YA03B,EAAWna,UAAUsa,UAAY9D,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAQ/EuL,EAAWna,UAAUoa,YAAc5D,EAAMgB,WAQzC2C,EAAWna,UAAUua,aAAe,GAQpCJ,EAAWna,UAAUwa,gBAAkB,GAQvCL,EAAWna,UAAUka,OAAS,GAQ9BC,EAAWna,UAAUya,aAAejE,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAQlFuL,EAAWna,UAAUqX,UAAY,GAQjC8C,EAAWna,UAAU0a,MAAQ,KAQ7BP,EAAWna,UAAUqa,cAAgB7D,EAAMgB,WAU3C2C,EAAW7U,OAAS,SAAgBwR,GAChC,OAAO,IAAIqD,EAAWrD,EAC1B,EAWAqD,EAAW7a,OAAS,SAAgB7T,EAASgsB,GAiBzC,GAhBKA,IACDA,EAASnB,EAAQhR,UACI,MAArB7Z,EAAQ6uB,WAAqB7uB,EAAQisB,eAAe,cACpDD,EAAOE,OAA8B,GAAGE,MAAMpsB,EAAQ6uB,WAC9B,MAAxB7uB,EAAQ8uB,cAAwB9uB,EAAQisB,eAAe,iBACvDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQ8uB,cAC7B,MAA3B9uB,EAAQ+uB,iBAA2B/uB,EAAQisB,eAAe,oBAC1DD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQ+uB,iBACtC,MAAlB/uB,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,WACjDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQyuB,QAChC,MAAxBzuB,EAAQgvB,cAAwBhvB,EAAQisB,eAAe,iBACvDD,EAAOE,OAA8B,IAAIE,MAAMpsB,EAAQgvB,cAClC,MAArBhvB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,cACpDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQ4rB,WACvC,MAAjB5rB,EAAQivB,OAAiBjvB,EAAQisB,eAAe,UAChDhB,EAAMR,KAAK+B,WAAW3Y,OAAO7T,EAAQivB,MAAOjD,EAAOE,OAA8B,IAAII,QAAQC,SACtE,MAAvBvsB,EAAQ2uB,aAAuB3uB,EAAQ2uB,YAAYx1B,OACnD,IAAK,IAAInC,EAAI,EAAGA,EAAIgJ,EAAQ2uB,YAAYx1B,SAAUnC,EAC9Ci0B,EAAMR,KAAKyE,mBAAmBrb,OAAO7T,EAAQ2uB,YAAY33B,GAAIg1B,EAAOE,OAA8B,IAAII,QAAQC,SACtH,GAA6B,MAAzBvsB,EAAQ4uB,eAAyB5uB,EAAQ4uB,cAAcz1B,OACvD,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQ4uB,cAAcz1B,SAAUnC,EAChDi0B,EAAMR,KAAK0E,uBAAuBtb,OAAO7T,EAAQ4uB,cAAc53B,GAAIg1B,EAAOE,OAA+B,KAAKI,QAAQC,SAC9H,OAAOP,CACX,EAWA0C,EAAWjC,gBAAkB,SAAyBzsB,EAASgsB,GAC3D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAmC,EAAWnyB,OAAS,SAAgBmwB,EAAQvzB,GAClCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAKiE,WACrFhC,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQ6uB,UAAYnC,EAAON,QAC3B,MACJ,KAAK,EACKpsB,EAAQ2uB,aAAe3uB,EAAQ2uB,YAAYx1B,SAC7C6G,EAAQ2uB,YAAc,IAC1B3uB,EAAQ2uB,YAAYnuB,KAAKyqB,EAAMR,KAAKyE,mBAAmB3yB,OAAOmwB,EAAQA,EAAOR,WAC7E,MACJ,KAAK,EACDlsB,EAAQ8uB,aAAepC,EAAOlZ,SAC9B,MACJ,KAAK,EACDxT,EAAQ+uB,gBAAkBrC,EAAOlZ,SACjC,MACJ,KAAK,EACDxT,EAAQyuB,OAAS/B,EAAOlZ,SACxB,MACJ,KAAK,EACDxT,EAAQgvB,aAAetC,EAAON,QAC9B,MACJ,KAAK,EACDpsB,EAAQ4rB,UAAYc,EAAOlZ,SAC3B,MACJ,KAAK,EACDxT,EAAQivB,MAAQhE,EAAMR,KAAK+B,WAAWjwB,OAAOmwB,EAAQA,EAAOR,UAC5D,MACJ,KAAK,GACKlsB,EAAQ4uB,eAAiB5uB,EAAQ4uB,cAAcz1B,SACjD6G,EAAQ4uB,cAAgB,IAC5B5uB,EAAQ4uB,cAAcpuB,KAAKyqB,EAAMR,KAAK0E,uBAAuB5yB,OAAOmwB,EAAQA,EAAOR,WACnF,MACJ,QACIQ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYA0uB,EAAW5B,gBAAkB,SAAyBJ,GAGlD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAwC,EAAW3B,OAAS,SAAgB/sB,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQ6uB,WAAqB7uB,EAAQisB,eAAe,gBAC/ClB,EAAMkC,UAAUjtB,EAAQ6uB,YAAgB7uB,EAAQ6uB,WAAa9D,EAAMkC,UAAUjtB,EAAQ6uB,UAAUlV,MAAQoR,EAAMkC,UAAUjtB,EAAQ6uB,UAAUjV,OAC1I,MAAO,mCACf,GAA2B,MAAvB5Z,EAAQ2uB,aAAuB3uB,EAAQisB,eAAe,eAAgB,CACtE,IAAKnhB,MAAMoiB,QAAQltB,EAAQ2uB,aACvB,MAAO,8BACX,IAAK,IAAI33B,EAAI,EAAGA,EAAIgJ,EAAQ2uB,YAAYx1B,SAAUnC,EAE9C,GADI8C,EAAQmxB,EAAMR,KAAKyE,mBAAmBnC,OAAO/sB,EAAQ2uB,YAAY33B,IAEjE,MAAO,eAAiB8C,CAEpC,CACA,GAA4B,MAAxBkG,EAAQ8uB,cAAwB9uB,EAAQisB,eAAe,kBAClDlB,EAAMiC,SAAShtB,EAAQ8uB,cACxB,MAAO,gCACf,GAA+B,MAA3B9uB,EAAQ+uB,iBAA2B/uB,EAAQisB,eAAe,qBACrDlB,EAAMiC,SAAShtB,EAAQ+uB,iBACxB,MAAO,mCACf,GAAsB,MAAlB/uB,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,YAC5ClB,EAAMiC,SAAShtB,EAAQyuB,QACxB,MAAO,0BACf,GAA4B,MAAxBzuB,EAAQgvB,cAAwBhvB,EAAQisB,eAAe,mBAClDlB,EAAMkC,UAAUjtB,EAAQgvB,eAAmBhvB,EAAQgvB,cAAgBjE,EAAMkC,UAAUjtB,EAAQgvB,aAAarV,MAAQoR,EAAMkC,UAAUjtB,EAAQgvB,aAAapV,OACtJ,MAAO,sCACf,GAAyB,MAArB5Z,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eAC/ClB,EAAMiC,SAAShtB,EAAQ4rB,WACxB,MAAO,6BACf,GAAqB,MAAjB5rB,EAAQivB,OAAiBjvB,EAAQisB,eAAe,WAC5CnyB,EAAQmxB,EAAMR,KAAK+B,WAAWO,OAAO/sB,EAAQivB,QAE7C,MAAO,SAAWn1B,EAE1B,GAA6B,MAAzBkG,EAAQ4uB,eAAyB5uB,EAAQisB,eAAe,iBAAkB,CAC1E,IAAKnhB,MAAMoiB,QAAQltB,EAAQ4uB,eACvB,MAAO,gCACX,IAAS53B,EAAI,EAAGA,EAAIgJ,EAAQ4uB,cAAcz1B,SAAUnC,EAAG,CACnD,IAAI8C,EACJ,GADIA,EAAQmxB,EAAMR,KAAK0E,uBAAuBpC,OAAO/sB,EAAQ4uB,cAAc53B,IAEvE,MAAO,iBAAmB8C,CAClC,CACJ,CACA,OAAO,IACX,EAUA40B,EAAWvB,WAAa,SAAoBC,GACxC,GAAIA,aAAkBnC,EAAMR,KAAKiE,WAC7B,OAAOtB,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAKiE,WAU7B,GATwB,MAApBtB,EAAOyB,YACH9D,EAAMrR,MACL1Z,EAAQ6uB,UAAY9D,EAAMrR,KAAK+K,UAAU2I,EAAOyB,YAAYnM,UAAW,EACvC,iBAArB0K,EAAOyB,UACnB7uB,EAAQ6uB,UAAYxK,SAAS+I,EAAOyB,UAAW,IACd,iBAArBzB,EAAOyB,UACnB7uB,EAAQ6uB,UAAYzB,EAAOyB,UACM,iBAArBzB,EAAOyB,YACnB7uB,EAAQ6uB,UAAY,IAAI9D,EAAMsC,SAASD,EAAOyB,UAAUlV,MAAQ,EAAGyT,EAAOyB,UAAUjV,OAAS,GAAGqL,aACpGmI,EAAOuB,YAAa,CACpB,IAAK7jB,MAAMoiB,QAAQE,EAAOuB,aACtB,MAAMjN,UAAU,gDACpB1hB,EAAQ2uB,YAAc,GACtB,IAAK,IAAI33B,EAAI,EAAGA,EAAIo2B,EAAOuB,YAAYx1B,SAAUnC,EAAG,CAChD,GAAqC,iBAA1Bo2B,EAAOuB,YAAY33B,GAC1B,MAAM0qB,UAAU,iDACpB1hB,EAAQ2uB,YAAY33B,GAAKi0B,EAAMR,KAAKyE,mBAAmB/B,WAAWC,EAAOuB,YAAY33B,GACzF,CACJ,CAkBA,GAjB2B,MAAvBo2B,EAAO0B,eACP9uB,EAAQ8uB,aAAepyB,OAAO0wB,EAAO0B,eACX,MAA1B1B,EAAO2B,kBACP/uB,EAAQ+uB,gBAAkBryB,OAAO0wB,EAAO2B,kBACvB,MAAjB3B,EAAOqB,SACPzuB,EAAQyuB,OAAS/xB,OAAO0wB,EAAOqB,SACR,MAAvBrB,EAAO4B,eACHjE,EAAMrR,MACL1Z,EAAQgvB,aAAejE,EAAMrR,KAAK+K,UAAU2I,EAAO4B,eAAetM,UAAW,EAC1C,iBAAxB0K,EAAO4B,aACnBhvB,EAAQgvB,aAAe3K,SAAS+I,EAAO4B,aAAc,IACjB,iBAAxB5B,EAAO4B,aACnBhvB,EAAQgvB,aAAe5B,EAAO4B,aACM,iBAAxB5B,EAAO4B,eACnBhvB,EAAQgvB,aAAe,IAAIjE,EAAMsC,SAASD,EAAO4B,aAAarV,MAAQ,EAAGyT,EAAO4B,aAAapV,OAAS,GAAGqL,aACzF,MAApBmI,EAAOxB,YACP5rB,EAAQ4rB,UAAYlvB,OAAO0wB,EAAOxB,YAClB,MAAhBwB,EAAO6B,MAAe,CACtB,GAA4B,iBAAjB7B,EAAO6B,MACd,MAAMvN,UAAU,2CACpB1hB,EAAQivB,MAAQhE,EAAMR,KAAK+B,WAAWW,WAAWC,EAAO6B,MAC5D,CACA,GAAI7B,EAAOwB,cAAe,CACtB,IAAK9jB,MAAMoiB,QAAQE,EAAOwB,eACtB,MAAMlN,UAAU,kDAEpB,IADA1hB,EAAQ4uB,cAAgB,GACf53B,EAAI,EAAGA,EAAIo2B,EAAOwB,cAAcz1B,SAAUnC,EAAG,CAClD,GAAuC,iBAA5Bo2B,EAAOwB,cAAc53B,GAC5B,MAAM0qB,UAAU,mDACpB1hB,EAAQ4uB,cAAc53B,GAAKi0B,EAAMR,KAAK0E,uBAAuBhC,WAAWC,EAAOwB,cAAc53B,GACjG,CACJ,CACA,OAAOgJ,CACX,EAWA0uB,EAAWpB,SAAW,SAAkBttB,EAASutB,GACxCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAKd,IAJIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOuB,YAAc,GACrBvB,EAAOwB,cAAgB,IAEvBrB,EAAQE,SAAU,CAClB,GAAI1C,EAAMrR,KAAM,CACZ,IAAIgU,EAAO,IAAI3C,EAAMrR,KAAK,EAAG,GAAG,GAChC0T,EAAOyB,UAAYtB,EAAQI,QAAUjxB,OAASgxB,EAAKrkB,WAAakkB,EAAQI,QAAUtmB,OAASqmB,EAAKzI,WAAayI,CACjH,MACIN,EAAOyB,UAAYtB,EAAQI,QAAUjxB,OAAS,IAAM,EACxD0wB,EAAO0B,aAAe,GACtB1B,EAAO2B,gBAAkB,GACzB3B,EAAOqB,OAAS,GACZ1D,EAAMrR,MACFgU,EAAO,IAAI3C,EAAMrR,KAAK,EAAG,GAAG,GAChC0T,EAAO4B,aAAezB,EAAQI,QAAUjxB,OAASgxB,EAAKrkB,WAAakkB,EAAQI,QAAUtmB,OAASqmB,EAAKzI,WAAayI,GAEhHN,EAAO4B,aAAezB,EAAQI,QAAUjxB,OAAS,IAAM,EAC3D0wB,EAAOxB,UAAY,GACnBwB,EAAO6B,MAAQ,IACnB,CAqBA,GApByB,MAArBjvB,EAAQ6uB,WAAqB7uB,EAAQisB,eAAe,eACnB,iBAAtBjsB,EAAQ6uB,UACfzB,EAAOyB,UAAYtB,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQ6uB,WAAa7uB,EAAQ6uB,UAElFzB,EAAOyB,UAAYtB,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQ6uB,WAAatB,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQ6uB,UAAUlV,MAAQ,EAAG3Z,EAAQ6uB,UAAUjV,OAAS,GAAGqL,WAAajlB,EAAQ6uB,WAChN,MAAxB7uB,EAAQ8uB,cAAwB9uB,EAAQisB,eAAe,kBACvDmB,EAAO0B,aAAe9uB,EAAQ8uB,cACH,MAA3B9uB,EAAQ+uB,iBAA2B/uB,EAAQisB,eAAe,qBAC1DmB,EAAO2B,gBAAkB/uB,EAAQ+uB,iBACf,MAAlB/uB,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,YACjDmB,EAAOqB,OAASzuB,EAAQyuB,QACA,MAAxBzuB,EAAQgvB,cAAwBhvB,EAAQisB,eAAe,kBACnB,iBAAzBjsB,EAAQgvB,aACf5B,EAAO4B,aAAezB,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQgvB,cAAgBhvB,EAAQgvB,aAExF5B,EAAO4B,aAAezB,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQgvB,cAAgBzB,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQgvB,aAAarV,MAAQ,EAAG3Z,EAAQgvB,aAAapV,OAAS,GAAGqL,WAAajlB,EAAQgvB,cAC/N,MAArBhvB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eACpDmB,EAAOxB,UAAY5rB,EAAQ4rB,WACV,MAAjB5rB,EAAQivB,OAAiBjvB,EAAQisB,eAAe,WAChDmB,EAAO6B,MAAQhE,EAAMR,KAAK+B,WAAWc,SAASttB,EAAQivB,MAAO1B,IAC7DvtB,EAAQ2uB,aAAe3uB,EAAQ2uB,YAAYx1B,OAAQ,CACnDi0B,EAAOuB,YAAc,GACrB,IAAK,IAAI/xB,EAAI,EAAGA,EAAIoD,EAAQ2uB,YAAYx1B,SAAUyD,EAC9CwwB,EAAOuB,YAAY/xB,GAAKquB,EAAMR,KAAKyE,mBAAmB5B,SAASttB,EAAQ2uB,YAAY/xB,GAAI2wB,EAC/F,CACA,GAAIvtB,EAAQ4uB,eAAiB5uB,EAAQ4uB,cAAcz1B,OAE/C,IADAi0B,EAAOwB,cAAgB,GACdhyB,EAAI,EAAGA,EAAIoD,EAAQ4uB,cAAcz1B,SAAUyD,EAChDwwB,EAAOwB,cAAchyB,GAAKquB,EAAMR,KAAK0E,uBAAuB7B,SAASttB,EAAQ4uB,cAAchyB,GAAI2wB,GAEvG,OAAOH,CACX,EASAsB,EAAWna,UAAU+N,OAAS,WAC1B,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOS,CACV,CAvbiB,GAyblBjE,EAAK0E,uBAAyB,WAkB1B,SAASA,EAAuB9D,GAC5B,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAwLA,OAhLAm4B,EAAuB5a,UAAU6a,IAAM,GAQvCD,EAAuB5a,UAAUwH,MAAQ,GAUzCoT,EAAuBtV,OAAS,SAAgBwR,GAC5C,OAAO,IAAI8D,EAAuB9D,EACtC,EAWA8D,EAAuBtb,OAAS,SAAgB7T,EAASgsB,GAOrD,OANKA,IACDA,EAASnB,EAAQhR,UACF,MAAf7Z,EAAQovB,KAAepvB,EAAQisB,eAAe,QAC9CD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQovB,KACvC,MAAjBpvB,EAAQ+b,OAAiB/b,EAAQisB,eAAe,UAChDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQ+b,OACrDiQ,CACX,EAWAmD,EAAuB1C,gBAAkB,SAAyBzsB,EAASgsB,GACvE,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaA4C,EAAuB5yB,OAAS,SAAgBmwB,EAAQvzB,GAC9CuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK0E,uBACrFzC,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQovB,IAAM1C,EAAOlZ,SACrB,MACJ,KAAK,EACDxT,EAAQ+b,MAAQ2Q,EAAOlZ,SACvB,MACJ,QACIkZ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAmvB,EAAuBrC,gBAAkB,SAAyBJ,GAG9D,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAiD,EAAuBpC,OAAS,SAAgB/sB,GAC5C,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACQ,MAAfA,EAAQovB,KAAepvB,EAAQisB,eAAe,SACzClB,EAAMiC,SAAShtB,EAAQovB,KACjB,uBACM,MAAjBpvB,EAAQ+b,OAAiB/b,EAAQisB,eAAe,WAC3ClB,EAAMiC,SAAShtB,EAAQ+b,OACjB,yBACR,IACX,EAUAoT,EAAuBhC,WAAa,SAAoBC,GACpD,GAAIA,aAAkBnC,EAAMR,KAAK0E,uBAC7B,OAAO/B,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK0E,uBAK7B,OAJkB,MAAd/B,EAAOgC,MACPpvB,EAAQovB,IAAM1yB,OAAO0wB,EAAOgC,MACZ,MAAhBhC,EAAOrR,QACP/b,EAAQ+b,MAAQrf,OAAO0wB,EAAOrR,QAC3B/b,CACX,EAWAmvB,EAAuB7B,SAAW,SAAkBttB,EAASutB,GACpDA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EASd,OARIG,EAAQE,WACRL,EAAOgC,IAAM,GACbhC,EAAOrR,MAAQ,IAEA,MAAf/b,EAAQovB,KAAepvB,EAAQisB,eAAe,SAC9CmB,EAAOgC,IAAMpvB,EAAQovB,KACJ,MAAjBpvB,EAAQ+b,OAAiB/b,EAAQisB,eAAe,WAChDmB,EAAOrR,MAAQ/b,EAAQ+b,OACpBqR,CACX,EASA+B,EAAuB5a,UAAU+N,OAAS,WACtC,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOkB,CACV,CAhN6B,GAkN9B1E,EAAK4E,iBAAmB,WAkBpB,SAASA,EAAiBhE,GAEtB,GADAvrB,KAAKwvB,0BAA4B,GAC7BjE,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CA4MA,OApMAq4B,EAAiB9a,UAAUgb,WAAa,GAQxCF,EAAiB9a,UAAU+a,0BAA4BvE,EAAMgB,WAU7DsD,EAAiBxV,OAAS,SAAgBwR,GACtC,OAAO,IAAIgE,EAAiBhE,EAChC,EAWAgE,EAAiBxb,OAAS,SAAgB7T,EAASgsB,GAK/C,GAJKA,IACDA,EAASnB,EAAQhR,UACK,MAAtB7Z,EAAQuvB,YAAsBvvB,EAAQisB,eAAe,eACrDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQuvB,YACnB,MAArCvvB,EAAQsvB,2BAAqCtvB,EAAQsvB,0BAA0Bn2B,OAC/E,IAAK,IAAInC,EAAI,EAAGA,EAAIgJ,EAAQsvB,0BAA0Bn2B,SAAUnC,EAC5Di0B,EAAMR,KAAK0E,uBAAuBtb,OAAO7T,EAAQsvB,0BAA0Bt4B,GAAIg1B,EAAOE,OAA8B,IAAII,QAAQC,SACxI,OAAOP,CACX,EAWAqD,EAAiB5C,gBAAkB,SAAyBzsB,EAASgsB,GACjE,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaA8C,EAAiB9yB,OAAS,SAAgBmwB,EAAQvzB,GACxCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK4E,iBACrF3C,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQuvB,WAAa7C,EAAOlZ,SAC5B,MACJ,KAAK,EACKxT,EAAQsvB,2BAA6BtvB,EAAQsvB,0BAA0Bn2B,SACzE6G,EAAQsvB,0BAA4B,IACxCtvB,EAAQsvB,0BAA0B9uB,KAAKyqB,EAAMR,KAAK0E,uBAAuB5yB,OAAOmwB,EAAQA,EAAOR,WAC/F,MACJ,QACIQ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAqvB,EAAiBvC,gBAAkB,SAAyBJ,GAGxD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAmD,EAAiBtC,OAAS,SAAgB/sB,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQuvB,YAAsBvvB,EAAQisB,eAAe,gBAChDlB,EAAMiC,SAAShtB,EAAQuvB,YACxB,MAAO,8BACf,GAAyC,MAArCvvB,EAAQsvB,2BAAqCtvB,EAAQisB,eAAe,6BAA8B,CAClG,IAAKnhB,MAAMoiB,QAAQltB,EAAQsvB,2BACvB,MAAO,4CACX,IAAK,IAAIt4B,EAAI,EAAGA,EAAIgJ,EAAQsvB,0BAA0Bn2B,SAAUnC,EAAG,CAC/D,IAAI8C,EAAQmxB,EAAMR,KAAK0E,uBAAuBpC,OAAO/sB,EAAQsvB,0BAA0Bt4B,IACvF,GAAI8C,EACA,MAAO,6BAA+BA,CAC9C,CACJ,CACA,OAAO,IACX,EAUAu1B,EAAiBlC,WAAa,SAAoBC,GAC9C,GAAIA,aAAkBnC,EAAMR,KAAK4E,iBAC7B,OAAOjC,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK4E,iBAG7B,GAFyB,MAArBjC,EAAOmC,aACPvvB,EAAQuvB,WAAa7yB,OAAO0wB,EAAOmC,aACnCnC,EAAOkC,0BAA2B,CAClC,IAAKxkB,MAAMoiB,QAAQE,EAAOkC,2BACtB,MAAM5N,UAAU,oEACpB1hB,EAAQsvB,0BAA4B,GACpC,IAAK,IAAIt4B,EAAI,EAAGA,EAAIo2B,EAAOkC,0BAA0Bn2B,SAAUnC,EAAG,CAC9D,GAAmD,iBAAxCo2B,EAAOkC,0BAA0Bt4B,GACxC,MAAM0qB,UAAU,qEACpB1hB,EAAQsvB,0BAA0Bt4B,GAAKi0B,EAAMR,KAAK0E,uBAAuBhC,WAAWC,EAAOkC,0BAA0Bt4B,GACzH,CACJ,CACA,OAAOgJ,CACX,EAWAqvB,EAAiB/B,SAAW,SAAkBttB,EAASutB,GAC9CA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAOd,IANIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOkC,0BAA4B,IACnC/B,EAAQE,WACRL,EAAOmC,WAAa,IACE,MAAtBvvB,EAAQuvB,YAAsBvvB,EAAQisB,eAAe,gBACrDmB,EAAOmC,WAAavvB,EAAQuvB,YAC5BvvB,EAAQsvB,2BAA6BtvB,EAAQsvB,0BAA0Bn2B,OAAQ,CAC/Ei0B,EAAOkC,0BAA4B,GACnC,IAAK,IAAI1yB,EAAI,EAAGA,EAAIoD,EAAQsvB,0BAA0Bn2B,SAAUyD,EAC5DwwB,EAAOkC,0BAA0B1yB,GAAKquB,EAAMR,KAAK0E,uBAAuB7B,SAASttB,EAAQsvB,0BAA0B1yB,GAAI2wB,EAC/H,CACA,OAAOH,CACX,EASAiC,EAAiB9a,UAAU+N,OAAS,WAChC,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOoB,CACV,CArOuB,GAuOxB5E,EAAK+B,WAAa,WAwBd,SAASA,EAAWnB,GAOhB,GANAvrB,KAAKvH,KAAO,GACZuH,KAAK0vB,YAAc,GACnB1vB,KAAKuuB,MAAQ,GACbvuB,KAAKwuB,OAAS,GACdxuB,KAAK2vB,UAAY,GACjB3vB,KAAK4vB,uBAAyB,GAC1BrE,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAgbA,OAxaAw1B,EAAWjY,UAAUhc,KAAOwyB,EAAMgB,WAQlCS,EAAWjY,UAAUxU,KAAO,GAQ5BysB,EAAWjY,UAAUib,YAAczE,EAAMgB,WAQzCS,EAAWjY,UAAUqX,UAAY,GAQjCY,EAAWjY,UAAU8Z,MAAQtD,EAAMgB,WAQnCS,EAAWjY,UAAU+Z,OAASvD,EAAMgB,WAQpCS,EAAWjY,UAAUkb,UAAY1E,EAAMgB,WAQvCS,EAAWjY,UAAUmb,uBAAyB3E,EAAMgB,WAUpDS,EAAW3S,OAAS,SAAgBwR,GAChC,OAAO,IAAImB,EAAWnB,EAC1B,EAWAmB,EAAW3Y,OAAS,SAAgB7T,EAASgsB,GAGzC,GAFKA,IACDA,EAASnB,EAAQhR,UACD,MAAhB7Z,EAAQzH,MAAgByH,EAAQzH,KAAKY,OACrC,IAAK,IAAInC,EAAI,EAAGA,EAAIgJ,EAAQzH,KAAKY,SAAUnC,EACvCi0B,EAAMR,KAAK2D,UAAUva,OAAO7T,EAAQzH,KAAKvB,GAAIg1B,EAAOE,OAA8B,IAAII,QAAQC,SAGtG,GAFoB,MAAhBvsB,EAAQD,MAAgBC,EAAQisB,eAAe,SAC/CD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQD,MACjC,MAAvBC,EAAQwvB,aAAuBxvB,EAAQwvB,YAAYr2B,OACnD,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQwvB,YAAYr2B,SAAUnC,EAC9Ci0B,EAAMR,KAAK4B,YAAYxY,OAAO7T,EAAQwvB,YAAYx4B,GAAIg1B,EAAOE,OAA8B,IAAII,QAAQC,SAG/G,GAFyB,MAArBvsB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,cACpDD,EAAOE,OAA+B,IAAI1Y,OAAOxT,EAAQ4rB,WACxC,MAAjB5rB,EAAQquB,OAAiBruB,EAAQquB,MAAMl1B,OACvC,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQquB,MAAMl1B,SAAUnC,EACxCi0B,EAAMR,KAAKyD,eAAera,OAAO7T,EAAQquB,MAAMr3B,GAAIg1B,EAAOE,OAA+B,IAAII,QAAQC,SAC7G,GAAsB,MAAlBvsB,EAAQsuB,QAAkBtuB,EAAQsuB,OAAOn1B,OACzC,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQsuB,OAAOn1B,SAAUnC,EACzCi0B,EAAMR,KAAKyD,eAAera,OAAO7T,EAAQsuB,OAAOt3B,GAAIg1B,EAAOE,OAA+B,IAAII,QAAQC,SAC9G,GAAyB,MAArBvsB,EAAQyvB,WAAqBzvB,EAAQyvB,UAAUt2B,OAC/C,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQyvB,UAAUt2B,SAAUnC,EAC5Ci0B,EAAMR,KAAKyD,eAAera,OAAO7T,EAAQyvB,UAAUz4B,GAAIg1B,EAAOE,OAA+B,KAAKI,QAAQC,SAClH,GAAsC,MAAlCvsB,EAAQ0vB,wBAAkC1vB,EAAQ0vB,uBAAuBv2B,OACzE,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQ0vB,uBAAuBv2B,SAAUnC,EACzDi0B,EAAMR,KAAK4E,iBAAiBxb,OAAO7T,EAAQ0vB,uBAAuB14B,GAAIg1B,EAAOE,OAA+B,KAAKI,QAAQC,SACjI,OAAOP,CACX,EAWAQ,EAAWC,gBAAkB,SAAyBzsB,EAASgsB,GAC3D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAC,EAAWjwB,OAAS,SAAgBmwB,EAAQvzB,GAClCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK+B,WACrFE,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACK3sB,EAAQzH,MAAQyH,EAAQzH,KAAKY,SAC/B6G,EAAQzH,KAAO,IACnByH,EAAQzH,KAAKiI,KAAKyqB,EAAMR,KAAK2D,UAAU7xB,OAAOmwB,EAAQA,EAAOR,WAC7D,MACJ,KAAK,EACDlsB,EAAQD,KAAO2sB,EAAOlZ,SACtB,MACJ,KAAK,EACKxT,EAAQwvB,aAAexvB,EAAQwvB,YAAYr2B,SAC7C6G,EAAQwvB,YAAc,IAC1BxvB,EAAQwvB,YAAYhvB,KAAKyqB,EAAMR,KAAK4B,YAAY9vB,OAAOmwB,EAAQA,EAAOR,WACtE,MACJ,KAAK,GACDlsB,EAAQ4rB,UAAYc,EAAOlZ,SAC3B,MACJ,KAAK,GACKxT,EAAQquB,OAASruB,EAAQquB,MAAMl1B,SACjC6G,EAAQquB,MAAQ,IACpBruB,EAAQquB,MAAM7tB,KAAKyqB,EAAMR,KAAKyD,eAAe3xB,OAAOmwB,EAAQA,EAAOR,WACnE,MACJ,KAAK,GACKlsB,EAAQsuB,QAAUtuB,EAAQsuB,OAAOn1B,SACnC6G,EAAQsuB,OAAS,IACrBtuB,EAAQsuB,OAAO9tB,KAAKyqB,EAAMR,KAAKyD,eAAe3xB,OAAOmwB,EAAQA,EAAOR,WACpE,MACJ,KAAK,GACKlsB,EAAQyvB,WAAazvB,EAAQyvB,UAAUt2B,SACzC6G,EAAQyvB,UAAY,IACxBzvB,EAAQyvB,UAAUjvB,KAAKyqB,EAAMR,KAAKyD,eAAe3xB,OAAOmwB,EAAQA,EAAOR,WACvE,MACJ,KAAK,GACKlsB,EAAQ0vB,wBAA0B1vB,EAAQ0vB,uBAAuBv2B,SACnE6G,EAAQ0vB,uBAAyB,IACrC1vB,EAAQ0vB,uBAAuBlvB,KAAKyqB,EAAMR,KAAK4E,iBAAiB9yB,OAAOmwB,EAAQA,EAAOR,WACtF,MACJ,QACIQ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAwsB,EAAWM,gBAAkB,SAAyBJ,GAGlD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAM,EAAWO,OAAS,SAAgB/sB,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQzH,MAAgByH,EAAQisB,eAAe,QAAS,CACxD,IAAKnhB,MAAMoiB,QAAQltB,EAAQzH,MACvB,MAAO,uBACX,IAAK,IAAIvB,EAAI,EAAGA,EAAIgJ,EAAQzH,KAAKY,SAAUnC,EAEvC,GADI8C,EAAQmxB,EAAMR,KAAK2D,UAAUrB,OAAO/sB,EAAQzH,KAAKvB,IAEjD,MAAO,QAAU8C,CAE7B,CACA,GAAoB,MAAhBkG,EAAQD,MAAgBC,EAAQisB,eAAe,UAC1ClB,EAAMiC,SAAShtB,EAAQD,MACxB,MAAO,wBACf,GAA2B,MAAvBC,EAAQwvB,aAAuBxvB,EAAQisB,eAAe,eAAgB,CACtE,IAAKnhB,MAAMoiB,QAAQltB,EAAQwvB,aACvB,MAAO,8BACX,IAASx4B,EAAI,EAAGA,EAAIgJ,EAAQwvB,YAAYr2B,SAAUnC,EAE9C,GADI8C,EAAQmxB,EAAMR,KAAK4B,YAAYU,OAAO/sB,EAAQwvB,YAAYx4B,IAE1D,MAAO,eAAiB8C,CAEpC,CACA,GAAyB,MAArBkG,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eAC/ClB,EAAMiC,SAAShtB,EAAQ4rB,WACxB,MAAO,6BACf,GAAqB,MAAjB5rB,EAAQquB,OAAiBruB,EAAQisB,eAAe,SAAU,CAC1D,IAAKnhB,MAAMoiB,QAAQltB,EAAQquB,OACvB,MAAO,wBACX,IAASr3B,EAAI,EAAGA,EAAIgJ,EAAQquB,MAAMl1B,SAAUnC,EAExC,GADI8C,EAAQmxB,EAAMR,KAAKyD,eAAenB,OAAO/sB,EAAQquB,MAAMr3B,IAEvD,MAAO,SAAW8C,CAE9B,CACA,GAAsB,MAAlBkG,EAAQsuB,QAAkBtuB,EAAQisB,eAAe,UAAW,CAC5D,IAAKnhB,MAAMoiB,QAAQltB,EAAQsuB,QACvB,MAAO,yBACX,IAASt3B,EAAI,EAAGA,EAAIgJ,EAAQsuB,OAAOn1B,SAAUnC,EAEzC,GADI8C,EAAQmxB,EAAMR,KAAKyD,eAAenB,OAAO/sB,EAAQsuB,OAAOt3B,IAExD,MAAO,UAAY8C,CAE/B,CACA,GAAyB,MAArBkG,EAAQyvB,WAAqBzvB,EAAQisB,eAAe,aAAc,CAClE,IAAKnhB,MAAMoiB,QAAQltB,EAAQyvB,WACvB,MAAO,4BACX,IAASz4B,EAAI,EAAGA,EAAIgJ,EAAQyvB,UAAUt2B,SAAUnC,EAE5C,GADI8C,EAAQmxB,EAAMR,KAAKyD,eAAenB,OAAO/sB,EAAQyvB,UAAUz4B,IAE3D,MAAO,aAAe8C,CAElC,CACA,GAAsC,MAAlCkG,EAAQ0vB,wBAAkC1vB,EAAQisB,eAAe,0BAA2B,CAC5F,IAAKnhB,MAAMoiB,QAAQltB,EAAQ0vB,wBACvB,MAAO,yCACX,IAAS14B,EAAI,EAAGA,EAAIgJ,EAAQ0vB,uBAAuBv2B,SAAUnC,EAAG,CAC5D,IAAI8C,EACJ,GADIA,EAAQmxB,EAAMR,KAAK4E,iBAAiBtC,OAAO/sB,EAAQ0vB,uBAAuB14B,IAE1E,MAAO,0BAA4B8C,CAC3C,CACJ,CACA,OAAO,IACX,EAUA0yB,EAAWW,WAAa,SAAoBC,GACxC,GAAIA,aAAkBnC,EAAMR,KAAK+B,WAC7B,OAAOY,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK+B,WAC7B,GAAIY,EAAO70B,KAAM,CACb,IAAKuS,MAAMoiB,QAAQE,EAAO70B,MACtB,MAAMmpB,UAAU,yCACpB1hB,EAAQzH,KAAO,GACf,IAAK,IAAIvB,EAAI,EAAGA,EAAIo2B,EAAO70B,KAAKY,SAAUnC,EAAG,CACzC,GAA8B,iBAAnBo2B,EAAO70B,KAAKvB,GACnB,MAAM0qB,UAAU,0CACpB1hB,EAAQzH,KAAKvB,GAAKi0B,EAAMR,KAAK2D,UAAUjB,WAAWC,EAAO70B,KAAKvB,GAClE,CACJ,CAGA,GAFmB,MAAfo2B,EAAOrtB,OACPC,EAAQD,KAAOrD,OAAO0wB,EAAOrtB,OAC7BqtB,EAAOoC,YAAa,CACpB,IAAK1kB,MAAMoiB,QAAQE,EAAOoC,aACtB,MAAM9N,UAAU,gDAEpB,IADA1hB,EAAQwvB,YAAc,GACbx4B,EAAI,EAAGA,EAAIo2B,EAAOoC,YAAYr2B,SAAUnC,EAAG,CAChD,GAAqC,iBAA1Bo2B,EAAOoC,YAAYx4B,GAC1B,MAAM0qB,UAAU,iDACpB1hB,EAAQwvB,YAAYx4B,GAAKi0B,EAAMR,KAAK4B,YAAYc,WAAWC,EAAOoC,YAAYx4B,GAClF,CACJ,CAGA,GAFwB,MAApBo2B,EAAOxB,YACP5rB,EAAQ4rB,UAAYlvB,OAAO0wB,EAAOxB,YAClCwB,EAAOiB,MAAO,CACd,IAAKvjB,MAAMoiB,QAAQE,EAAOiB,OACtB,MAAM3M,UAAU,0CAEpB,IADA1hB,EAAQquB,MAAQ,GACPr3B,EAAI,EAAGA,EAAIo2B,EAAOiB,MAAMl1B,SAAUnC,EAAG,CAC1C,GAA+B,iBAApBo2B,EAAOiB,MAAMr3B,GACpB,MAAM0qB,UAAU,2CACpB1hB,EAAQquB,MAAMr3B,GAAKi0B,EAAMR,KAAKyD,eAAef,WAAWC,EAAOiB,MAAMr3B,GACzE,CACJ,CACA,GAAIo2B,EAAOkB,OAAQ,CACf,IAAKxjB,MAAMoiB,QAAQE,EAAOkB,QACtB,MAAM5M,UAAU,2CAEpB,IADA1hB,EAAQsuB,OAAS,GACRt3B,EAAI,EAAGA,EAAIo2B,EAAOkB,OAAOn1B,SAAUnC,EAAG,CAC3C,GAAgC,iBAArBo2B,EAAOkB,OAAOt3B,GACrB,MAAM0qB,UAAU,4CACpB1hB,EAAQsuB,OAAOt3B,GAAKi0B,EAAMR,KAAKyD,eAAef,WAAWC,EAAOkB,OAAOt3B,GAC3E,CACJ,CACA,GAAIo2B,EAAOqC,UAAW,CAClB,IAAK3kB,MAAMoiB,QAAQE,EAAOqC,WACtB,MAAM/N,UAAU,8CAEpB,IADA1hB,EAAQyvB,UAAY,GACXz4B,EAAI,EAAGA,EAAIo2B,EAAOqC,UAAUt2B,SAAUnC,EAAG,CAC9C,GAAmC,iBAAxBo2B,EAAOqC,UAAUz4B,GACxB,MAAM0qB,UAAU,+CACpB1hB,EAAQyvB,UAAUz4B,GAAKi0B,EAAMR,KAAKyD,eAAef,WAAWC,EAAOqC,UAAUz4B,GACjF,CACJ,CACA,GAAIo2B,EAAOsC,uBAAwB,CAC/B,IAAK5kB,MAAMoiB,QAAQE,EAAOsC,wBACtB,MAAMhO,UAAU,2DAEpB,IADA1hB,EAAQ0vB,uBAAyB,GACxB14B,EAAI,EAAGA,EAAIo2B,EAAOsC,uBAAuBv2B,SAAUnC,EAAG,CAC3D,GAAgD,iBAArCo2B,EAAOsC,uBAAuB14B,GACrC,MAAM0qB,UAAU,4DACpB1hB,EAAQ0vB,uBAAuB14B,GAAKi0B,EAAMR,KAAK4E,iBAAiBlC,WAAWC,EAAOsC,uBAAuB14B,GAC7G,CACJ,CACA,OAAOgJ,CACX,EAWAwsB,EAAWc,SAAW,SAAkBttB,EAASutB,GACxCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAad,IAZIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAO70B,KAAO,GACd60B,EAAOoC,YAAc,GACrBpC,EAAOiB,MAAQ,GACfjB,EAAOkB,OAAS,GAChBlB,EAAOqC,UAAY,GACnBrC,EAAOsC,uBAAyB,IAEhCnC,EAAQE,WACRL,EAAOrtB,KAAO,GACdqtB,EAAOxB,UAAY,IAEnB5rB,EAAQzH,MAAQyH,EAAQzH,KAAKY,OAAQ,CACrCi0B,EAAO70B,KAAO,GACd,IAAK,IAAIqE,EAAI,EAAGA,EAAIoD,EAAQzH,KAAKY,SAAUyD,EACvCwwB,EAAO70B,KAAKqE,GAAKquB,EAAMR,KAAK2D,UAAUd,SAASttB,EAAQzH,KAAKqE,GAAI2wB,EACxE,CAGA,GAFoB,MAAhBvtB,EAAQD,MAAgBC,EAAQisB,eAAe,UAC/CmB,EAAOrtB,KAAOC,EAAQD,MACtBC,EAAQwvB,aAAexvB,EAAQwvB,YAAYr2B,OAE3C,IADAi0B,EAAOoC,YAAc,GACZ5yB,EAAI,EAAGA,EAAIoD,EAAQwvB,YAAYr2B,SAAUyD,EAC9CwwB,EAAOoC,YAAY5yB,GAAKquB,EAAMR,KAAK4B,YAAYiB,SAASttB,EAAQwvB,YAAY5yB,GAAI2wB,GAIxF,GAFyB,MAArBvtB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eACpDmB,EAAOxB,UAAY5rB,EAAQ4rB,WAC3B5rB,EAAQquB,OAASruB,EAAQquB,MAAMl1B,OAE/B,IADAi0B,EAAOiB,MAAQ,GACNzxB,EAAI,EAAGA,EAAIoD,EAAQquB,MAAMl1B,SAAUyD,EACxCwwB,EAAOiB,MAAMzxB,GAAKquB,EAAMR,KAAKyD,eAAeZ,SAASttB,EAAQquB,MAAMzxB,GAAI2wB,GAE/E,GAAIvtB,EAAQsuB,QAAUtuB,EAAQsuB,OAAOn1B,OAEjC,IADAi0B,EAAOkB,OAAS,GACP1xB,EAAI,EAAGA,EAAIoD,EAAQsuB,OAAOn1B,SAAUyD,EACzCwwB,EAAOkB,OAAO1xB,GAAKquB,EAAMR,KAAKyD,eAAeZ,SAASttB,EAAQsuB,OAAO1xB,GAAI2wB,GAEjF,GAAIvtB,EAAQyvB,WAAazvB,EAAQyvB,UAAUt2B,OAEvC,IADAi0B,EAAOqC,UAAY,GACV7yB,EAAI,EAAGA,EAAIoD,EAAQyvB,UAAUt2B,SAAUyD,EAC5CwwB,EAAOqC,UAAU7yB,GAAKquB,EAAMR,KAAKyD,eAAeZ,SAASttB,EAAQyvB,UAAU7yB,GAAI2wB,GAEvF,GAAIvtB,EAAQ0vB,wBAA0B1vB,EAAQ0vB,uBAAuBv2B,OAEjE,IADAi0B,EAAOsC,uBAAyB,GACvB9yB,EAAI,EAAGA,EAAIoD,EAAQ0vB,uBAAuBv2B,SAAUyD,EACzDwwB,EAAOsC,uBAAuB9yB,GAAKquB,EAAMR,KAAK4E,iBAAiB/B,SAASttB,EAAQ0vB,uBAAuB9yB,GAAI2wB,GAEnH,OAAOH,CACX,EASAZ,EAAWjY,UAAU+N,OAAS,WAC1B,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOzB,CACV,CApdiB,GAsdlB/B,EAAK4B,YAAc,WA8Bf,SAASA,EAAYhB,GASjB,GARAvrB,KAAK6vB,KAAO,GACZ7vB,KAAK8vB,UAAY,GACjB9vB,KAAK+vB,UAAY,GACjB/vB,KAAKgwB,WAAa,GAClBhwB,KAAKiwB,UAAY,GACjBjwB,KAAKkwB,aAAe,GACpBlwB,KAAKmwB,WAAa,GAClBnwB,KAAKowB,WAAa,GACd7E,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAu8BA,OA/7BAq1B,EAAY9X,UAAUob,KAAO5E,EAAMgB,WAQnCM,EAAY9X,UAAU4b,SAAW,EAQjC9D,EAAY9X,UAAU6b,QAAU,KAQhC/D,EAAY9X,UAAUqb,UAAY7E,EAAMgB,WAQxCM,EAAY9X,UAAUsb,UAAY9E,EAAMgB,WAQxCM,EAAY9X,UAAUub,WAAa/E,EAAMgB,WAQzCM,EAAY9X,UAAUwb,UAAYhF,EAAMgB,WAQxCM,EAAY9X,UAAUxU,KAAO,GAQ7BssB,EAAY9X,UAAUqX,UAAY,GAQlCS,EAAY9X,UAAU8b,QAAUtF,EAAMe,UAAU,IAQhDO,EAAY9X,UAAUyb,aAAejF,EAAMgB,WAQ3CM,EAAY9X,UAAU+b,aAAe,EAQrCjE,EAAY9X,UAAU0b,WAAalF,EAAMgB,WAQzCM,EAAY9X,UAAU2b,WAAanF,EAAMgB,WAUzCM,EAAYxS,OAAS,SAAgBwR,GACjC,OAAO,IAAIgB,EAAYhB,EAC3B,EAWAgB,EAAYxY,OAAS,SAAgB7T,EAASgsB,GAG1C,GAFKA,IACDA,EAASnB,EAAQhR,UACD,MAAhB7Z,EAAQ2vB,MAAgB3vB,EAAQ2vB,KAAKx2B,OAAQ,CAC7C6yB,EAAOE,OAA8B,IAAII,OACzC,IAAK,IAAIt1B,EAAI,EAAGA,EAAIgJ,EAAQ2vB,KAAKx2B,SAAUnC,EACvCg1B,EAAOI,MAAMpsB,EAAQ2vB,KAAK34B,IAC9Bg1B,EAAOO,QACX,CAKA,GAJwB,MAApBvsB,EAAQmwB,UAAoBnwB,EAAQisB,eAAe,aACnDD,EAAOE,OAA8B,IAAI5S,MAAMtZ,EAAQmwB,UACpC,MAAnBnwB,EAAQowB,SAAmBpwB,EAAQisB,eAAe,YAClDhB,EAAMR,KAAK4B,YAAYkE,QAAQ1c,OAAO7T,EAAQowB,QAASpE,EAAOE,OAA8B,IAAII,QAAQC,SACnF,MAArBvsB,EAAQ4vB,WAAqB5vB,EAAQ4vB,UAAUz2B,OAAQ,CAEvD,IADA6yB,EAAOE,OAA8B,IAAII,OAChCt1B,EAAI,EAAGA,EAAIgJ,EAAQ4vB,UAAUz2B,SAAUnC,EAC5Cg1B,EAAOG,MAAMnsB,EAAQ4vB,UAAU54B,IACnCg1B,EAAOO,QACX,CACA,GAAyB,MAArBvsB,EAAQ6vB,WAAqB7vB,EAAQ6vB,UAAU12B,OAAQ,CAEvD,IADA6yB,EAAOE,OAA8B,IAAII,OAChCt1B,EAAI,EAAGA,EAAIgJ,EAAQ6vB,UAAU12B,SAAUnC,EAC5Cg1B,EAAO1S,MAAMtZ,EAAQ6vB,UAAU74B,IACnCg1B,EAAOO,QACX,CACA,GAA0B,MAAtBvsB,EAAQ8vB,YAAsB9vB,EAAQ8vB,WAAW32B,OACjD,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQ8vB,WAAW32B,SAAUnC,EAC7Cg1B,EAAOE,OAA8B,IAAI7Q,MAAMrb,EAAQ8vB,WAAW94B,IAC1E,GAAyB,MAArBgJ,EAAQ+vB,WAAqB/vB,EAAQ+vB,UAAU52B,OAAQ,CAEvD,IADA6yB,EAAOE,OAA8B,IAAII,OAChCt1B,EAAI,EAAGA,EAAIgJ,EAAQ+vB,UAAU52B,SAAUnC,EAC5Cg1B,EAAOI,MAAMpsB,EAAQ+vB,UAAU/4B,IACnCg1B,EAAOO,QACX,CAKA,GAJoB,MAAhBvsB,EAAQD,MAAgBC,EAAQisB,eAAe,SAC/CD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQD,MACrC,MAAnBC,EAAQqwB,SAAmBrwB,EAAQisB,eAAe,YAClDD,EAAOE,OAA8B,IAAI7Q,MAAMrb,EAAQqwB,SACjC,MAAtBrwB,EAAQiwB,YAAsBjwB,EAAQiwB,WAAW92B,OAAQ,CAEzD,IADA6yB,EAAOE,OAA+B,IAAII,OACjCt1B,EAAI,EAAGA,EAAIgJ,EAAQiwB,WAAW92B,SAAUnC,EAC7Cg1B,EAAOwE,OAAOxwB,EAAQiwB,WAAWj5B,IACrCg1B,EAAOO,QACX,CACA,GAA0B,MAAtBvsB,EAAQkwB,YAAsBlwB,EAAQkwB,WAAW/2B,OAAQ,CAEzD,IADA6yB,EAAOE,OAA+B,IAAII,OACjCt1B,EAAI,EAAGA,EAAIgJ,EAAQkwB,WAAW/2B,SAAUnC,EAC7Cg1B,EAAOyE,OAAOzwB,EAAQkwB,WAAWl5B,IACrCg1B,EAAOO,QACX,CAGA,GAFyB,MAArBvsB,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,cACpDD,EAAOE,OAA+B,IAAI1Y,OAAOxT,EAAQ4rB,WACjC,MAAxB5rB,EAAQgwB,cAAwBhwB,EAAQgwB,aAAa72B,OACrD,IAASnC,EAAI,EAAGA,EAAIgJ,EAAQgwB,aAAa72B,SAAUnC,EAC/Ci0B,EAAMR,KAAK0E,uBAAuBtb,OAAO7T,EAAQgwB,aAAah5B,GAAIg1B,EAAOE,OAA+B,KAAKI,QAAQC,SAG7H,OAF4B,MAAxBvsB,EAAQswB,cAAwBtwB,EAAQisB,eAAe,iBACvDD,EAAOE,OAA+B,KAAK5S,MAAMtZ,EAAQswB,cACtDtE,CACX,EAWAK,EAAYI,gBAAkB,SAAyBzsB,EAASgsB,GAC5D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAF,EAAY9vB,OAAS,SAAgBmwB,EAAQvzB,GACnCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK4B,YACrFK,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EAGD,GAFM3sB,EAAQ2vB,MAAQ3vB,EAAQ2vB,KAAKx2B,SAC/B6G,EAAQ2vB,KAAO,IACD,IAAP,EAANhD,GAED,IADA,IAAIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQ2vB,KAAKnvB,KAAKksB,EAAON,cAE7BpsB,EAAQ2vB,KAAKnvB,KAAKksB,EAAON,SAC7B,MACJ,KAAK,EACDpsB,EAAQmwB,SAAWzD,EAAOpT,QAC1B,MACJ,KAAK,EACDtZ,EAAQowB,QAAUnF,EAAMR,KAAK4B,YAAYkE,QAAQh0B,OAAOmwB,EAAQA,EAAOR,UACvE,MACJ,KAAK,EAGD,GAFMlsB,EAAQ4vB,WAAa5vB,EAAQ4vB,UAAUz2B,SACzC6G,EAAQ4vB,UAAY,IACN,IAAP,EAANjD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQ4vB,UAAUpvB,KAAKksB,EAAOP,cAElCnsB,EAAQ4vB,UAAUpvB,KAAKksB,EAAOP,SAClC,MACJ,KAAK,EAGD,GAFMnsB,EAAQ6vB,WAAa7vB,EAAQ6vB,UAAU12B,SACzC6G,EAAQ6vB,UAAY,IACN,IAAP,EAANlD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQ6vB,UAAUrvB,KAAKksB,EAAOpT,cAElCtZ,EAAQ6vB,UAAUrvB,KAAKksB,EAAOpT,SAClC,MACJ,KAAK,EACKtZ,EAAQ8vB,YAAc9vB,EAAQ8vB,WAAW32B,SAC3C6G,EAAQ8vB,WAAa,IACzB9vB,EAAQ8vB,WAAWtvB,KAAKksB,EAAOrR,SAC/B,MACJ,KAAK,EAGD,GAFMrb,EAAQ+vB,WAAa/vB,EAAQ+vB,UAAU52B,SACzC6G,EAAQ+vB,UAAY,IACN,IAAP,EAANpD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQ+vB,UAAUvvB,KAAKksB,EAAON,cAElCpsB,EAAQ+vB,UAAUvvB,KAAKksB,EAAON,SAClC,MACJ,KAAK,EACDpsB,EAAQD,KAAO2sB,EAAOlZ,SACtB,MACJ,KAAK,GACDxT,EAAQ4rB,UAAYc,EAAOlZ,SAC3B,MACJ,KAAK,EACDxT,EAAQqwB,QAAU3D,EAAOrR,QACzB,MACJ,KAAK,GACKrb,EAAQgwB,cAAgBhwB,EAAQgwB,aAAa72B,SAC/C6G,EAAQgwB,aAAe,IAC3BhwB,EAAQgwB,aAAaxvB,KAAKyqB,EAAMR,KAAK0E,uBAAuB5yB,OAAOmwB,EAAQA,EAAOR,WAClF,MACJ,KAAK,GACDlsB,EAAQswB,aAAe5D,EAAOpT,QAC9B,MACJ,KAAK,GAGD,GAFMtZ,EAAQiwB,YAAcjwB,EAAQiwB,WAAW92B,SAC3C6G,EAAQiwB,WAAa,IACP,IAAP,EAANtD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQiwB,WAAWzvB,KAAKksB,EAAO8D,eAEnCxwB,EAAQiwB,WAAWzvB,KAAKksB,EAAO8D,UACnC,MACJ,KAAK,GAGD,GAFMxwB,EAAQkwB,YAAclwB,EAAQkwB,WAAW/2B,SAC3C6G,EAAQkwB,WAAa,IACP,IAAP,EAANvD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOvX,IAC7BuX,EAAOvX,IAAMyX,GAChB5sB,EAAQkwB,WAAW1vB,KAAKksB,EAAO+D,eAEnCzwB,EAAQkwB,WAAW1vB,KAAKksB,EAAO+D,UACnC,MACJ,QACI/D,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAqsB,EAAYS,gBAAkB,SAAyBJ,GAGnD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAG,EAAYU,OAAS,SAAgB/sB,GACjC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQ2vB,MAAgB3vB,EAAQisB,eAAe,QAAS,CACxD,IAAKnhB,MAAMoiB,QAAQltB,EAAQ2vB,MACvB,MAAO,uBACX,IAAK,IAAI34B,EAAI,EAAGA,EAAIgJ,EAAQ2vB,KAAKx2B,SAAUnC,EACvC,KAAK+zB,EAAMkC,UAAUjtB,EAAQ2vB,KAAK34B,KAASgJ,EAAQ2vB,KAAK34B,IAAM+zB,EAAMkC,UAAUjtB,EAAQ2vB,KAAK34B,GAAG2iB,MAAQoR,EAAMkC,UAAUjtB,EAAQ2vB,KAAK34B,GAAG4iB,OAClI,MAAO,+BACnB,CACA,GAAwB,MAApB5Z,EAAQmwB,UAAoBnwB,EAAQisB,eAAe,cAC9ClB,EAAMkC,UAAUjtB,EAAQmwB,UACzB,MAAO,6BACf,GAAuB,MAAnBnwB,EAAQowB,SAAmBpwB,EAAQisB,eAAe,aAC9CnyB,EAAQmxB,EAAMR,KAAK4B,YAAYkE,QAAQxD,OAAO/sB,EAAQowB,UAEtD,MAAO,WAAat2B,EAE5B,GAAyB,MAArBkG,EAAQ4vB,WAAqB5vB,EAAQisB,eAAe,aAAc,CAClE,IAAKnhB,MAAMoiB,QAAQltB,EAAQ4vB,WACvB,MAAO,4BACX,IAAS54B,EAAI,EAAGA,EAAIgJ,EAAQ4vB,UAAUz2B,SAAUnC,EAC5C,GAAoC,iBAAzBgJ,EAAQ4vB,UAAU54B,GACzB,MAAO,8BACnB,CACA,GAAyB,MAArBgJ,EAAQ6vB,WAAqB7vB,EAAQisB,eAAe,aAAc,CAClE,IAAKnhB,MAAMoiB,QAAQltB,EAAQ6vB,WACvB,MAAO,4BACX,IAAS74B,EAAI,EAAGA,EAAIgJ,EAAQ6vB,UAAU12B,SAAUnC,EAC5C,IAAK+zB,EAAMkC,UAAUjtB,EAAQ6vB,UAAU74B,IACnC,MAAO,+BACnB,CACA,GAA0B,MAAtBgJ,EAAQ8vB,YAAsB9vB,EAAQisB,eAAe,cAAe,CACpE,IAAKnhB,MAAMoiB,QAAQltB,EAAQ8vB,YACvB,MAAO,6BACX,IAAS94B,EAAI,EAAGA,EAAIgJ,EAAQ8vB,WAAW32B,SAAUnC,EAC7C,KAAMgJ,EAAQ8vB,WAAW94B,IAA8C,iBAAjCgJ,EAAQ8vB,WAAW94B,GAAGmC,QAAuB4xB,EAAMiC,SAAShtB,EAAQ8vB,WAAW94B,KACjH,MAAO,+BACnB,CACA,GAAyB,MAArBgJ,EAAQ+vB,WAAqB/vB,EAAQisB,eAAe,aAAc,CAClE,IAAKnhB,MAAMoiB,QAAQltB,EAAQ+vB,WACvB,MAAO,4BACX,IAAS/4B,EAAI,EAAGA,EAAIgJ,EAAQ+vB,UAAU52B,SAAUnC,EAC5C,KAAK+zB,EAAMkC,UAAUjtB,EAAQ+vB,UAAU/4B,KAASgJ,EAAQ+vB,UAAU/4B,IAAM+zB,EAAMkC,UAAUjtB,EAAQ+vB,UAAU/4B,GAAG2iB,MAAQoR,EAAMkC,UAAUjtB,EAAQ+vB,UAAU/4B,GAAG4iB,OACtJ,MAAO,oCACnB,CACA,GAAoB,MAAhB5Z,EAAQD,MAAgBC,EAAQisB,eAAe,UAC1ClB,EAAMiC,SAAShtB,EAAQD,MACxB,MAAO,wBACf,GAAyB,MAArBC,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eAC/ClB,EAAMiC,SAAShtB,EAAQ4rB,WACxB,MAAO,6BACf,GAAuB,MAAnB5rB,EAAQqwB,SAAmBrwB,EAAQisB,eAAe,cAC5CjsB,EAAQqwB,SAA6C,iBAA3BrwB,EAAQqwB,QAAQl3B,QAAuB4xB,EAAMiC,SAAShtB,EAAQqwB,UAC1F,MAAO,2BACf,GAA4B,MAAxBrwB,EAAQgwB,cAAwBhwB,EAAQisB,eAAe,gBAAiB,CACxE,IAAKnhB,MAAMoiB,QAAQltB,EAAQgwB,cACvB,MAAO,+BACX,IAASh5B,EAAI,EAAGA,EAAIgJ,EAAQgwB,aAAa72B,SAAUnC,EAAG,CAClD,IAAI8C,EACJ,GADIA,EAAQmxB,EAAMR,KAAK0E,uBAAuBpC,OAAO/sB,EAAQgwB,aAAah5B,IAEtE,MAAO,gBAAkB8C,CACjC,CACJ,CACA,GAA4B,MAAxBkG,EAAQswB,cAAwBtwB,EAAQisB,eAAe,gBACvD,OAAQjsB,EAAQswB,cAChB,QACI,MAAO,oCACX,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtBtwB,EAAQiwB,YAAsBjwB,EAAQisB,eAAe,cAAe,CACpE,IAAKnhB,MAAMoiB,QAAQltB,EAAQiwB,YACvB,MAAO,6BACX,IAASj5B,EAAI,EAAGA,EAAIgJ,EAAQiwB,WAAW92B,SAAUnC,EAC7C,GAAqC,iBAA1BgJ,EAAQiwB,WAAWj5B,GAC1B,MAAO,+BACnB,CACA,GAA0B,MAAtBgJ,EAAQkwB,YAAsBlwB,EAAQisB,eAAe,cAAe,CACpE,IAAKnhB,MAAMoiB,QAAQltB,EAAQkwB,YACvB,MAAO,6BACX,IAASl5B,EAAI,EAAGA,EAAIgJ,EAAQkwB,WAAW/2B,SAAUnC,EAC7C,KAAK+zB,EAAMkC,UAAUjtB,EAAQkwB,WAAWl5B,KAASgJ,EAAQkwB,WAAWl5B,IAAM+zB,EAAMkC,UAAUjtB,EAAQkwB,WAAWl5B,GAAG2iB,MAAQoR,EAAMkC,UAAUjtB,EAAQkwB,WAAWl5B,GAAG4iB,OAC1J,MAAO,qCACnB,CACA,OAAO,IACX,EAUAyS,EAAYc,WAAa,SAAoBC,GACzC,GAAIA,aAAkBnC,EAAMR,KAAK4B,YAC7B,OAAOe,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK4B,YAC7B,GAAIe,EAAOuC,KAAM,CACb,IAAK7kB,MAAMoiB,QAAQE,EAAOuC,MACtB,MAAMjO,UAAU,0CACpB1hB,EAAQ2vB,KAAO,GACf,IAAK,IAAI34B,EAAI,EAAGA,EAAIo2B,EAAOuC,KAAKx2B,SAAUnC,EAClC+zB,EAAMrR,MACL1Z,EAAQ2vB,KAAK34B,GAAK+zB,EAAMrR,KAAK+K,UAAU2I,EAAOuC,KAAK34B,KAAK0rB,UAAW,EACrC,iBAAnB0K,EAAOuC,KAAK34B,GACxBgJ,EAAQ2vB,KAAK34B,GAAKqtB,SAAS+I,EAAOuC,KAAK34B,GAAI,IACZ,iBAAnBo2B,EAAOuC,KAAK34B,GACxBgJ,EAAQ2vB,KAAK34B,GAAKo2B,EAAOuC,KAAK34B,GACC,iBAAnBo2B,EAAOuC,KAAK34B,KACxBgJ,EAAQ2vB,KAAK34B,GAAK,IAAI+zB,EAAMsC,SAASD,EAAOuC,KAAK34B,GAAG2iB,MAAQ,EAAGyT,EAAOuC,KAAK34B,GAAG4iB,OAAS,GAAGqL,WACtG,CAGA,GAFuB,MAAnBmI,EAAO+C,WACPnwB,EAAQmwB,SAA6B,EAAlB/C,EAAO+C,UACR,MAAlB/C,EAAOgD,QAAiB,CACxB,GAA8B,iBAAnBhD,EAAOgD,QACd,MAAM1O,UAAU,8CACpB1hB,EAAQowB,QAAUnF,EAAMR,KAAK4B,YAAYkE,QAAQpD,WAAWC,EAAOgD,QACvE,CACA,GAAIhD,EAAOwC,UAAW,CAClB,IAAK9kB,MAAMoiB,QAAQE,EAAOwC,WACtB,MAAMlO,UAAU,+CAEpB,IADA1hB,EAAQ4vB,UAAY,GACX54B,EAAI,EAAGA,EAAIo2B,EAAOwC,UAAUz2B,SAAUnC,EAC3CgJ,EAAQ4vB,UAAU54B,GAAKqQ,OAAO+lB,EAAOwC,UAAU54B,GACvD,CACA,GAAIo2B,EAAOyC,UAAW,CAClB,IAAK/kB,MAAMoiB,QAAQE,EAAOyC,WACtB,MAAMnO,UAAU,+CAEpB,IADA1hB,EAAQ6vB,UAAY,GACX74B,EAAI,EAAGA,EAAIo2B,EAAOyC,UAAU12B,SAAUnC,EAC3CgJ,EAAQ6vB,UAAU74B,GAA2B,EAAtBo2B,EAAOyC,UAAU74B,EAChD,CACA,GAAIo2B,EAAO0C,WAAY,CACnB,IAAKhlB,MAAMoiB,QAAQE,EAAO0C,YACtB,MAAMpO,UAAU,gDAEpB,IADA1hB,EAAQ8vB,WAAa,GACZ94B,EAAI,EAAGA,EAAIo2B,EAAO0C,WAAW32B,SAAUnC,EACR,iBAAzBo2B,EAAO0C,WAAW94B,GACzB+zB,EAAMxX,OAAOhX,OAAO6wB,EAAO0C,WAAW94B,GAAIgJ,EAAQ8vB,WAAW94B,GAAK+zB,EAAMe,UAAUf,EAAMxX,OAAOpa,OAAOi0B,EAAO0C,WAAW94B,KAAM,GACzHo2B,EAAO0C,WAAW94B,GAAGmC,SAC1B6G,EAAQ8vB,WAAW94B,GAAKo2B,EAAO0C,WAAW94B,GACtD,CACA,GAAIo2B,EAAO2C,UAAW,CAClB,IAAKjlB,MAAMoiB,QAAQE,EAAO2C,WACtB,MAAMrO,UAAU,+CAEpB,IADA1hB,EAAQ+vB,UAAY,GACX/4B,EAAI,EAAGA,EAAIo2B,EAAO2C,UAAU52B,SAAUnC,EACvC+zB,EAAMrR,MACL1Z,EAAQ+vB,UAAU/4B,GAAK+zB,EAAMrR,KAAK+K,UAAU2I,EAAO2C,UAAU/4B,KAAK0rB,UAAW,EAC1C,iBAAxB0K,EAAO2C,UAAU/4B,GAC7BgJ,EAAQ+vB,UAAU/4B,GAAKqtB,SAAS+I,EAAO2C,UAAU/4B,GAAI,IACjB,iBAAxBo2B,EAAO2C,UAAU/4B,GAC7BgJ,EAAQ+vB,UAAU/4B,GAAKo2B,EAAO2C,UAAU/4B,GACJ,iBAAxBo2B,EAAO2C,UAAU/4B,KAC7BgJ,EAAQ+vB,UAAU/4B,GAAK,IAAI+zB,EAAMsC,SAASD,EAAO2C,UAAU/4B,GAAG2iB,MAAQ,EAAGyT,EAAO2C,UAAU/4B,GAAG4iB,OAAS,GAAGqL,WACrH,CAUA,GATmB,MAAfmI,EAAOrtB,OACPC,EAAQD,KAAOrD,OAAO0wB,EAAOrtB,OACT,MAApBqtB,EAAOxB,YACP5rB,EAAQ4rB,UAAYlvB,OAAO0wB,EAAOxB,YAChB,MAAlBwB,EAAOiD,UACuB,iBAAnBjD,EAAOiD,QACdtF,EAAMxX,OAAOhX,OAAO6wB,EAAOiD,QAASrwB,EAAQqwB,QAAUtF,EAAMe,UAAUf,EAAMxX,OAAOpa,OAAOi0B,EAAOiD,UAAW,GACvGjD,EAAOiD,QAAQl3B,SACpB6G,EAAQqwB,QAAUjD,EAAOiD,UAC7BjD,EAAO4C,aAAc,CACrB,IAAKllB,MAAMoiB,QAAQE,EAAO4C,cACtB,MAAMtO,UAAU,kDAEpB,IADA1hB,EAAQgwB,aAAe,GACdh5B,EAAI,EAAGA,EAAIo2B,EAAO4C,aAAa72B,SAAUnC,EAAG,CACjD,GAAsC,iBAA3Bo2B,EAAO4C,aAAah5B,GAC3B,MAAM0qB,UAAU,mDACpB1hB,EAAQgwB,aAAah5B,GAAKi0B,EAAMR,KAAK0E,uBAAuBhC,WAAWC,EAAO4C,aAAah5B,GAC/F,CACJ,CACA,OAAQo2B,EAAOkD,cACf,IAAK,UACL,KAAK,EACDtwB,EAAQswB,aAAe,EACvB,MACJ,IAAK,WACL,KAAK,EACDtwB,EAAQswB,aAAe,EAG3B,GAAIlD,EAAO6C,WAAY,CACnB,IAAKnlB,MAAMoiB,QAAQE,EAAO6C,YACtB,MAAMvO,UAAU,gDAEpB,IADA1hB,EAAQiwB,WAAa,GACZj5B,EAAI,EAAGA,EAAIo2B,EAAO6C,WAAW92B,SAAUnC,EAC5CgJ,EAAQiwB,WAAWj5B,GAAKqQ,OAAO+lB,EAAO6C,WAAWj5B,GACzD,CACA,GAAIo2B,EAAO8C,WAAY,CACnB,IAAKplB,MAAMoiB,QAAQE,EAAO8C,YACtB,MAAMxO,UAAU,gDAEpB,IADA1hB,EAAQkwB,WAAa,GACZl5B,EAAI,EAAGA,EAAIo2B,EAAO8C,WAAW/2B,SAAUnC,EACxC+zB,EAAMrR,MACL1Z,EAAQkwB,WAAWl5B,GAAK+zB,EAAMrR,KAAK+K,UAAU2I,EAAO8C,WAAWl5B,KAAK0rB,UAAW,EAC3C,iBAAzB0K,EAAO8C,WAAWl5B,GAC9BgJ,EAAQkwB,WAAWl5B,GAAKqtB,SAAS+I,EAAO8C,WAAWl5B,GAAI,IAClB,iBAAzBo2B,EAAO8C,WAAWl5B,GAC9BgJ,EAAQkwB,WAAWl5B,GAAKo2B,EAAO8C,WAAWl5B,GACL,iBAAzBo2B,EAAO8C,WAAWl5B,KAC9BgJ,EAAQkwB,WAAWl5B,GAAK,IAAI+zB,EAAMsC,SAASD,EAAO8C,WAAWl5B,GAAG2iB,MAAQ,EAAGyT,EAAO8C,WAAWl5B,GAAG4iB,OAAS,GAAGqL,UAAS,GACjI,CACA,OAAOjlB,CACX,EAWAqsB,EAAYiB,SAAW,SAAkBttB,EAASutB,GACzCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAyBd,IAxBIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOuC,KAAO,GACdvC,EAAOwC,UAAY,GACnBxC,EAAOyC,UAAY,GACnBzC,EAAO0C,WAAa,GACpB1C,EAAO2C,UAAY,GACnB3C,EAAO6C,WAAa,GACpB7C,EAAO8C,WAAa,GACpB9C,EAAO4C,aAAe,IAEtBzC,EAAQE,WACRL,EAAO+C,SAAW,EAClB/C,EAAOgD,QAAU,KACjBhD,EAAOrtB,KAAO,GACVwtB,EAAQlS,QAAU3e,OAClB0wB,EAAOiD,QAAU,IAEjBjD,EAAOiD,QAAU,GACb9C,EAAQlS,QAAUvQ,QAClBsiB,EAAOiD,QAAUtF,EAAMe,UAAUsB,EAAOiD,WAEhDjD,EAAOxB,UAAY,GACnBwB,EAAOkD,aAAe/C,EAAQK,QAAUlxB,OAAS,UAAY,GAE7DsD,EAAQ2vB,MAAQ3vB,EAAQ2vB,KAAKx2B,OAAQ,CACrCi0B,EAAOuC,KAAO,GACd,IAAK,IAAI/yB,EAAI,EAAGA,EAAIoD,EAAQ2vB,KAAKx2B,SAAUyD,EACR,iBAApBoD,EAAQ2vB,KAAK/yB,GACpBwwB,EAAOuC,KAAK/yB,GAAK2wB,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQ2vB,KAAK/yB,IAAMoD,EAAQ2vB,KAAK/yB,GAEnFwwB,EAAOuC,KAAK/yB,GAAK2wB,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQ2vB,KAAK/yB,IAAM2wB,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQ2vB,KAAK/yB,GAAG+c,MAAQ,EAAG3Z,EAAQ2vB,KAAK/yB,GAAGgd,OAAS,GAAGqL,WAAajlB,EAAQ2vB,KAAK/yB,EAC7O,CAKA,GAJwB,MAApBoD,EAAQmwB,UAAoBnwB,EAAQisB,eAAe,cACnDmB,EAAO+C,SAAWnwB,EAAQmwB,UACP,MAAnBnwB,EAAQowB,SAAmBpwB,EAAQisB,eAAe,aAClDmB,EAAOgD,QAAUnF,EAAMR,KAAK4B,YAAYkE,QAAQjD,SAASttB,EAAQowB,QAAS7C,IAC1EvtB,EAAQ4vB,WAAa5vB,EAAQ4vB,UAAUz2B,OAEvC,IADAi0B,EAAOwC,UAAY,GACVhzB,EAAI,EAAGA,EAAIoD,EAAQ4vB,UAAUz2B,SAAUyD,EAC5CwwB,EAAOwC,UAAUhzB,GAAK2wB,EAAQM,OAASC,SAAS9tB,EAAQ4vB,UAAUhzB,IAAMF,OAAOsD,EAAQ4vB,UAAUhzB,IAAMoD,EAAQ4vB,UAAUhzB,GAEjI,GAAIoD,EAAQ6vB,WAAa7vB,EAAQ6vB,UAAU12B,OAEvC,IADAi0B,EAAOyC,UAAY,GACVjzB,EAAI,EAAGA,EAAIoD,EAAQ6vB,UAAU12B,SAAUyD,EAC5CwwB,EAAOyC,UAAUjzB,GAAKoD,EAAQ6vB,UAAUjzB,GAEhD,GAAIoD,EAAQ8vB,YAAc9vB,EAAQ8vB,WAAW32B,OAEzC,IADAi0B,EAAO0C,WAAa,GACXlzB,EAAI,EAAGA,EAAIoD,EAAQ8vB,WAAW32B,SAAUyD,EAC7CwwB,EAAO0C,WAAWlzB,GAAK2wB,EAAQlS,QAAU3e,OAASquB,EAAMxX,OAAOM,OAAO7T,EAAQ8vB,WAAWlzB,GAAI,EAAGoD,EAAQ8vB,WAAWlzB,GAAGzD,QAAUo0B,EAAQlS,QAAUvQ,MAAQA,MAAMyJ,UAAUlb,MAAMgT,KAAKrM,EAAQ8vB,WAAWlzB,IAAMoD,EAAQ8vB,WAAWlzB,GAEzO,GAAIoD,EAAQ+vB,WAAa/vB,EAAQ+vB,UAAU52B,OAEvC,IADAi0B,EAAO2C,UAAY,GACVnzB,EAAI,EAAGA,EAAIoD,EAAQ+vB,UAAU52B,SAAUyD,EACR,iBAAzBoD,EAAQ+vB,UAAUnzB,GACzBwwB,EAAO2C,UAAUnzB,GAAK2wB,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQ+vB,UAAUnzB,IAAMoD,EAAQ+vB,UAAUnzB,GAElGwwB,EAAO2C,UAAUnzB,GAAK2wB,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQ+vB,UAAUnzB,IAAM2wB,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQ+vB,UAAUnzB,GAAG+c,MAAQ,EAAG3Z,EAAQ+vB,UAAUnzB,GAAGgd,OAAS,GAAGqL,WAAajlB,EAAQ+vB,UAAUnzB,GAMtQ,GAJoB,MAAhBoD,EAAQD,MAAgBC,EAAQisB,eAAe,UAC/CmB,EAAOrtB,KAAOC,EAAQD,MACH,MAAnBC,EAAQqwB,SAAmBrwB,EAAQisB,eAAe,aAClDmB,EAAOiD,QAAU9C,EAAQlS,QAAU3e,OAASquB,EAAMxX,OAAOM,OAAO7T,EAAQqwB,QAAS,EAAGrwB,EAAQqwB,QAAQl3B,QAAUo0B,EAAQlS,QAAUvQ,MAAQA,MAAMyJ,UAAUlb,MAAMgT,KAAKrM,EAAQqwB,SAAWrwB,EAAQqwB,SAC9LrwB,EAAQiwB,YAAcjwB,EAAQiwB,WAAW92B,OAEzC,IADAi0B,EAAO6C,WAAa,GACXrzB,EAAI,EAAGA,EAAIoD,EAAQiwB,WAAW92B,SAAUyD,EAC7CwwB,EAAO6C,WAAWrzB,GAAK2wB,EAAQM,OAASC,SAAS9tB,EAAQiwB,WAAWrzB,IAAMF,OAAOsD,EAAQiwB,WAAWrzB,IAAMoD,EAAQiwB,WAAWrzB,GAErI,GAAIoD,EAAQkwB,YAAclwB,EAAQkwB,WAAW/2B,OAEzC,IADAi0B,EAAO8C,WAAa,GACXtzB,EAAI,EAAGA,EAAIoD,EAAQkwB,WAAW/2B,SAAUyD,EACR,iBAA1BoD,EAAQkwB,WAAWtzB,GAC1BwwB,EAAO8C,WAAWtzB,GAAK2wB,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQkwB,WAAWtzB,IAAMoD,EAAQkwB,WAAWtzB,GAErGwwB,EAAO8C,WAAWtzB,GAAK2wB,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQkwB,WAAWtzB,IAAM2wB,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQkwB,WAAWtzB,GAAG+c,MAAQ,EAAG3Z,EAAQkwB,WAAWtzB,GAAGgd,OAAS,GAAGqL,UAAS,GAAQjlB,EAAQkwB,WAAWtzB,GAI/Q,GAFyB,MAArBoD,EAAQ4rB,WAAqB5rB,EAAQisB,eAAe,eACpDmB,EAAOxB,UAAY5rB,EAAQ4rB,WAC3B5rB,EAAQgwB,cAAgBhwB,EAAQgwB,aAAa72B,OAE7C,IADAi0B,EAAO4C,aAAe,GACbpzB,EAAI,EAAGA,EAAIoD,EAAQgwB,aAAa72B,SAAUyD,EAC/CwwB,EAAO4C,aAAapzB,GAAKquB,EAAMR,KAAK0E,uBAAuB7B,SAASttB,EAAQgwB,aAAapzB,GAAI2wB,GAIrG,OAF4B,MAAxBvtB,EAAQswB,cAAwBtwB,EAAQisB,eAAe,kBACvDmB,EAAOkD,aAAe/C,EAAQK,QAAUlxB,OAASuuB,EAAMR,KAAK4B,YAAYqE,aAAa1wB,EAAQswB,cAAgBtwB,EAAQswB,cAClHlD,CACX,EASAf,EAAY9X,UAAU+N,OAAS,WAC3B,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAwBA5B,EAAYsE,SAAW,WACnB,IAAInG,EAAa,CAAC,EAAG/nB,EAAS7K,OAAOiiB,OAAO2Q,GAkB5C,OAjBA/nB,EAAO+nB,EAAW,GAAK,aAAe,EACtC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,QAAU,EACjC/nB,EAAO+nB,EAAW,GAAK,UAAY,EACnC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,SAAW,EAClC/nB,EAAO+nB,EAAW,GAAK,UAAY,EACnC/nB,EAAO+nB,EAAW,GAAK,QAAU,EACjC/nB,EAAO+nB,EAAW,IAAM,WAAa,GACrC/nB,EAAO+nB,EAAW,IAAM,UAAY,GACpC/nB,EAAO+nB,EAAW,IAAM,UAAY,GACpC/nB,EAAO+nB,EAAW,IAAM,UAAY,GACpC/nB,EAAO+nB,EAAW,IAAM,aAAe,GACvC/nB,EAAO+nB,EAAW,IAAM,cAAgB,GACxC/nB,EAAO+nB,EAAW,IAAM,YAAc,GAC/B/nB,CACV,CApBsB,GAsBvB4pB,EAAYkE,QAAU,WAkBlB,SAASA,EAAQlF,GACb,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAoNA,OA5MAu5B,EAAQhc,UAAUqc,MAAQ7F,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAQxEoN,EAAQhc,UAAUR,IAAMgX,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAUtEoN,EAAQ1W,OAAS,SAAgBwR,GAC7B,OAAO,IAAIkF,EAAQlF,EACvB,EAWAkF,EAAQ1c,OAAS,SAAgB7T,EAASgsB,GAOtC,OANKA,IACDA,EAASnB,EAAQhR,UACA,MAAjB7Z,EAAQ4wB,OAAiB5wB,EAAQisB,eAAe,UAChDD,EAAOE,OAA8B,GAAGE,MAAMpsB,EAAQ4wB,OACvC,MAAf5wB,EAAQ+T,KAAe/T,EAAQisB,eAAe,QAC9CD,EAAOE,OAA8B,IAAIE,MAAMpsB,EAAQ+T,KACpDiY,CACX,EAWAuE,EAAQ9D,gBAAkB,SAAyBzsB,EAASgsB,GACxD,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAgE,EAAQh0B,OAAS,SAAgBmwB,EAAQvzB,GAC/BuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK4B,YAAYkE,QACjG7D,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQ4wB,MAAQlE,EAAON,QACvB,MACJ,KAAK,EACDpsB,EAAQ+T,IAAM2Y,EAAON,QACrB,MACJ,QACIM,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAuwB,EAAQzD,gBAAkB,SAAyBJ,GAG/C,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAqE,EAAQxD,OAAS,SAAgB/sB,GAC7B,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQ4wB,OAAiB5wB,EAAQisB,eAAe,YAC3ClB,EAAMkC,UAAUjtB,EAAQ4wB,QAAY5wB,EAAQ4wB,OAAS7F,EAAMkC,UAAUjtB,EAAQ4wB,MAAMjX,MAAQoR,EAAMkC,UAAUjtB,EAAQ4wB,MAAMhX,OACnH,+BACI,MAAf5Z,EAAQ+T,KAAe/T,EAAQisB,eAAe,UACzClB,EAAMkC,UAAUjtB,EAAQ+T,MAAU/T,EAAQ+T,KAAOgX,EAAMkC,UAAUjtB,EAAQ+T,IAAI4F,MAAQoR,EAAMkC,UAAUjtB,EAAQ+T,IAAI6F,OAC3G,6BACR,IACX,EAUA2W,EAAQpD,WAAa,SAAoBC,GACrC,GAAIA,aAAkBnC,EAAMR,KAAK4B,YAAYkE,QACzC,OAAOnD,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK4B,YAAYkE,QAmBzC,OAlBoB,MAAhBnD,EAAOwD,QACH7F,EAAMrR,MACL1Z,EAAQ4wB,MAAQ7F,EAAMrR,KAAK+K,UAAU2I,EAAOwD,QAAQlO,UAAW,EACnC,iBAAjB0K,EAAOwD,MACnB5wB,EAAQ4wB,MAAQvM,SAAS+I,EAAOwD,MAAO,IACV,iBAAjBxD,EAAOwD,MACnB5wB,EAAQ4wB,MAAQxD,EAAOwD,MACM,iBAAjBxD,EAAOwD,QACnB5wB,EAAQ4wB,MAAQ,IAAI7F,EAAMsC,SAASD,EAAOwD,MAAMjX,MAAQ,EAAGyT,EAAOwD,MAAMhX,OAAS,GAAGqL,aAC1E,MAAdmI,EAAOrZ,MACHgX,EAAMrR,MACL1Z,EAAQ+T,IAAMgX,EAAMrR,KAAK+K,UAAU2I,EAAOrZ,MAAM2O,UAAW,EACjC,iBAAf0K,EAAOrZ,IACnB/T,EAAQ+T,IAAMsQ,SAAS+I,EAAOrZ,IAAK,IACR,iBAAfqZ,EAAOrZ,IACnB/T,EAAQ+T,IAAMqZ,EAAOrZ,IACM,iBAAfqZ,EAAOrZ,MACnB/T,EAAQ+T,IAAM,IAAIgX,EAAMsC,SAASD,EAAOrZ,IAAI4F,MAAQ,EAAGyT,EAAOrZ,IAAI6F,OAAS,GAAGqL,aAC/EjlB,CACX,EAWAuwB,EAAQjD,SAAW,SAAkBttB,EAASutB,GACrCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EACd,GAAIG,EAAQE,SAAU,CAClB,GAAI1C,EAAMrR,KAAM,CACZ,IAAIgU,EAAO,IAAI3C,EAAMrR,KAAK,EAAG,GAAG,GAChC0T,EAAOwD,MAAQrD,EAAQI,QAAUjxB,OAASgxB,EAAKrkB,WAAakkB,EAAQI,QAAUtmB,OAASqmB,EAAKzI,WAAayI,CAC7G,MACIN,EAAOwD,MAAQrD,EAAQI,QAAUjxB,OAAS,IAAM,EAChDquB,EAAMrR,MACFgU,EAAO,IAAI3C,EAAMrR,KAAK,EAAG,GAAG,GAChC0T,EAAOrZ,IAAMwZ,EAAQI,QAAUjxB,OAASgxB,EAAKrkB,WAAakkB,EAAQI,QAAUtmB,OAASqmB,EAAKzI,WAAayI,GAEvGN,EAAOrZ,IAAMwZ,EAAQI,QAAUjxB,OAAS,IAAM,CACtD,CAWA,OAVqB,MAAjBsD,EAAQ4wB,OAAiB5wB,EAAQisB,eAAe,WACnB,iBAAlBjsB,EAAQ4wB,MACfxD,EAAOwD,MAAQrD,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQ4wB,OAAS5wB,EAAQ4wB,MAE1ExD,EAAOwD,MAAQrD,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQ4wB,OAASrD,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQ4wB,MAAMjX,MAAQ,EAAG3Z,EAAQ4wB,MAAMhX,OAAS,GAAGqL,WAAajlB,EAAQ4wB,OACzM,MAAf5wB,EAAQ+T,KAAe/T,EAAQisB,eAAe,SACnB,iBAAhBjsB,EAAQ+T,IACfqZ,EAAOrZ,IAAMwZ,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQ+T,KAAO/T,EAAQ+T,IAEtEqZ,EAAOrZ,IAAMwZ,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQ+T,KAAOwZ,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQ+T,IAAI4F,MAAQ,EAAG3Z,EAAQ+T,IAAI6F,OAAS,GAAGqL,WAAajlB,EAAQ+T,KAC7MqZ,CACX,EASAmD,EAAQhc,UAAU+N,OAAS,WACvB,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOsC,CACV,CA5OqB,GAqPtBlE,EAAYqE,aAAe,WACvB,IAAIlG,EAAa,CAAC,EAAG/nB,EAAS7K,OAAOiiB,OAAO2Q,GAG5C,OAFA/nB,EAAO+nB,EAAW,GAAK,WAAa,EACpC/nB,EAAO+nB,EAAW,GAAK,YAAc,EAC9B/nB,CACV,CAL0B,GAOpB4pB,CACV,CAn/BkB,GAq/BnB5B,EAAKoG,iBAAmB,WAiBpB,SAASA,EAAiBxF,GAEtB,GADAvrB,KAAKgxB,IAAM,GACPzF,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAgcA,OAxbA65B,EAAiBtc,UAAUuc,IAAM/F,EAAMgB,WAUvC8E,EAAiBhX,OAAS,SAAgBwR,GACtC,OAAO,IAAIwF,EAAiBxF,EAChC,EAWAwF,EAAiBhd,OAAS,SAAgB7T,EAASgsB,GAG/C,GAFKA,IACDA,EAASnB,EAAQhR,UACF,MAAf7Z,EAAQ8wB,KAAe9wB,EAAQ8wB,IAAI33B,OACnC,IAAK,IAAInC,EAAI,EAAGA,EAAIgJ,EAAQ8wB,IAAI33B,SAAUnC,EACtCi0B,EAAMR,KAAKoG,iBAAiBE,UAAUld,OAAO7T,EAAQ8wB,IAAI95B,GAAIg1B,EAAOE,OAA8B,IAAII,QAAQC,SACtH,OAAOP,CACX,EAWA6E,EAAiBpE,gBAAkB,SAAyBzsB,EAASgsB,GACjE,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAsE,EAAiBt0B,OAAS,SAAgBmwB,EAAQvzB,GACxCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAKoG,iBACrFnE,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACTS,IAAQ,GACX,GACK3sB,EAAQ8wB,KAAO9wB,EAAQ8wB,IAAI33B,SAC7B6G,EAAQ8wB,IAAM,IAClB9wB,EAAQ8wB,IAAItwB,KAAKyqB,EAAMR,KAAKoG,iBAAiBE,UAAUx0B,OAAOmwB,EAAQA,EAAOR,YAG7EQ,EAAOG,SAAe,EAANF,EAGxB,CACA,OAAO3sB,CACX,EAYA6wB,EAAiB/D,gBAAkB,SAAyBJ,GAGxD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUA2E,EAAiB9D,OAAS,SAAgB/sB,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAmB,MAAfA,EAAQ8wB,KAAe9wB,EAAQisB,eAAe,OAAQ,CACtD,IAAKnhB,MAAMoiB,QAAQltB,EAAQ8wB,KACvB,MAAO,sBACX,IAAK,IAAI95B,EAAI,EAAGA,EAAIgJ,EAAQ8wB,IAAI33B,SAAUnC,EAAG,CACzC,IAAI8C,EAAQmxB,EAAMR,KAAKoG,iBAAiBE,UAAUhE,OAAO/sB,EAAQ8wB,IAAI95B,IACrE,GAAI8C,EACA,MAAO,OAASA,CACxB,CACJ,CACA,OAAO,IACX,EAUA+2B,EAAiB1D,WAAa,SAAoBC,GAC9C,GAAIA,aAAkBnC,EAAMR,KAAKoG,iBAC7B,OAAOzD,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAKoG,iBAC7B,GAAIzD,EAAO0D,IAAK,CACZ,IAAKhmB,MAAMoiB,QAAQE,EAAO0D,KACtB,MAAMpP,UAAU,8CACpB1hB,EAAQ8wB,IAAM,GACd,IAAK,IAAI95B,EAAI,EAAGA,EAAIo2B,EAAO0D,IAAI33B,SAAUnC,EAAG,CACxC,GAA6B,iBAAlBo2B,EAAO0D,IAAI95B,GAClB,MAAM0qB,UAAU,+CACpB1hB,EAAQ8wB,IAAI95B,GAAKi0B,EAAMR,KAAKoG,iBAAiBE,UAAU5D,WAAWC,EAAO0D,IAAI95B,GACjF,CACJ,CACA,OAAOgJ,CACX,EAWA6wB,EAAiBvD,SAAW,SAAkBttB,EAASutB,GAC9CA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAGd,IAFIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAO0D,IAAM,IACb9wB,EAAQ8wB,KAAO9wB,EAAQ8wB,IAAI33B,OAAQ,CACnCi0B,EAAO0D,IAAM,GACb,IAAK,IAAIl0B,EAAI,EAAGA,EAAIoD,EAAQ8wB,IAAI33B,SAAUyD,EACtCwwB,EAAO0D,IAAIl0B,GAAKquB,EAAMR,KAAKoG,iBAAiBE,UAAUzD,SAASttB,EAAQ8wB,IAAIl0B,GAAI2wB,EACvF,CACA,OAAOH,CACX,EASAyD,EAAiBtc,UAAU+N,OAAS,WAChC,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEA4C,EAAiBE,UAAY,WAmBzB,SAASA,EAAU1F,GACf,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CA2BA,IAAIg6B,EAoNJ,OAvOAD,EAAUxc,UAAU0c,SAAWlG,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAQ7E4N,EAAUxc,UAAU2c,SAAW,GAQ/BH,EAAUxc,UAAU4c,WAAa,GAWjCv5B,OAAOirB,eAAekO,EAAUxc,UAAW,QAAS,CAChD7M,IAAKqjB,EAAMqG,YAAYJ,EAAe,CAAC,WAAY,aACnDjmB,IAAKggB,EAAMsG,YAAYL,KAW3BD,EAAUlX,OAAS,SAAgBwR,GAC/B,OAAO,IAAI0F,EAAU1F,EACzB,EAWA0F,EAAUld,OAAS,SAAgB7T,EAASgsB,GASxC,OARKA,IACDA,EAASnB,EAAQhR,UACG,MAApB7Z,EAAQixB,UAAoBjxB,EAAQisB,eAAe,aACnDD,EAAOE,OAA8B,GAAGE,MAAMpsB,EAAQixB,UAClC,MAApBjxB,EAAQkxB,UAAoBlxB,EAAQisB,eAAe,aACnDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQkxB,UAClC,MAAtBlxB,EAAQmxB,YAAsBnxB,EAAQisB,eAAe,eACrDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQmxB,YACrDnF,CACX,EAWA+E,EAAUtE,gBAAkB,SAAyBzsB,EAASgsB,GAC1D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAwE,EAAUx0B,OAAS,SAAgBmwB,EAAQvzB,GACjCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAKoG,iBAAiBE,UACtGrE,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQixB,SAAWvE,EAAON,QAC1B,MACJ,KAAK,EACDpsB,EAAQkxB,SAAWxE,EAAOlZ,SAC1B,MACJ,KAAK,EACDxT,EAAQmxB,WAAazE,EAAOlZ,SAC5B,MACJ,QACIkZ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYA+wB,EAAUjE,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUA6E,EAAUhE,OAAS,SAAgB/sB,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAIqrB,EAAa,CAAC,EAClB,GAAwB,MAApBrrB,EAAQixB,UAAoBjxB,EAAQisB,eAAe,cACnDZ,EAAWtP,MAAQ,IACdgP,EAAMkC,UAAUjtB,EAAQixB,WAAejxB,EAAQixB,UAAYlG,EAAMkC,UAAUjtB,EAAQixB,SAAStX,MAAQoR,EAAMkC,UAAUjtB,EAAQixB,SAASrX,QACtI,MAAO,kCAEf,GAAwB,MAApB5Z,EAAQkxB,UAAoBlxB,EAAQisB,eAAe,YAAa,CAChE,GAAyB,IAArBZ,EAAWtP,MACX,MAAO,yBAEX,GADAsP,EAAWtP,MAAQ,GACdgP,EAAMiC,SAAShtB,EAAQkxB,UACxB,MAAO,2BACf,CACA,OAA0B,MAAtBlxB,EAAQmxB,YAAsBnxB,EAAQisB,eAAe,gBAChDlB,EAAMiC,SAAShtB,EAAQmxB,YACjB,8BACR,IACX,EAUAJ,EAAU5D,WAAa,SAAoBC,GACvC,GAAIA,aAAkBnC,EAAMR,KAAKoG,iBAAiBE,UAC9C,OAAO3D,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAKoG,iBAAiBE,UAc9C,OAbuB,MAAnB3D,EAAO6D,WACHlG,EAAMrR,MACL1Z,EAAQixB,SAAWlG,EAAMrR,KAAK+K,UAAU2I,EAAO6D,WAAWvO,UAAW,EACtC,iBAApB0K,EAAO6D,SACnBjxB,EAAQixB,SAAW5M,SAAS+I,EAAO6D,SAAU,IACb,iBAApB7D,EAAO6D,SACnBjxB,EAAQixB,SAAW7D,EAAO6D,SACM,iBAApB7D,EAAO6D,WACnBjxB,EAAQixB,SAAW,IAAIlG,EAAMsC,SAASD,EAAO6D,SAAStX,MAAQ,EAAGyT,EAAO6D,SAASrX,OAAS,GAAGqL,aAC9E,MAAnBmI,EAAO8D,WACPlxB,EAAQkxB,SAAWx0B,OAAO0wB,EAAO8D,WACZ,MAArB9D,EAAO+D,aACPnxB,EAAQmxB,WAAaz0B,OAAO0wB,EAAO+D,aAChCnxB,CACX,EAWA+wB,EAAUzD,SAAW,SAAkBttB,EAASutB,GACvCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAkBd,OAjBIG,EAAQE,WACRL,EAAO+D,WAAa,IACA,MAApBnxB,EAAQixB,UAAoBjxB,EAAQisB,eAAe,cACnB,iBAArBjsB,EAAQixB,SACf7D,EAAO6D,SAAW1D,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQixB,UAAYjxB,EAAQixB,SAEhF7D,EAAO6D,SAAW1D,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQixB,UAAY1D,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQixB,SAAStX,MAAQ,EAAG3Z,EAAQixB,SAASrX,OAAS,GAAGqL,WAAajlB,EAAQixB,SAChO1D,EAAQ+D,SACRlE,EAAOrR,MAAQ,aAEC,MAApB/b,EAAQkxB,UAAoBlxB,EAAQisB,eAAe,cACnDmB,EAAO8D,SAAWlxB,EAAQkxB,SACtB3D,EAAQ+D,SACRlE,EAAOrR,MAAQ,aAEG,MAAtB/b,EAAQmxB,YAAsBnxB,EAAQisB,eAAe,gBACrDmB,EAAO+D,WAAanxB,EAAQmxB,YACzB/D,CACX,EASA2D,EAAUxc,UAAU+N,OAAS,WACzB,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEO8C,CACV,CAxQ4B,GA0QtBF,CACV,CAxduB,GA0dxBpG,EAAK0D,UAAY,WAkBb,SAASA,EAAU9C,GACf,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAmBA,IAAIg6B,EAoZJ,OA/ZA7C,EAAU5Z,UAAUgd,WAAa,KAQjCpD,EAAU5Z,UAAU4c,WAAa,GAWjCv5B,OAAOirB,eAAesL,EAAU5Z,UAAW,QAAS,CAChD7M,IAAKqjB,EAAMqG,YAAYJ,EAAe,CAAC,eACvCjmB,IAAKggB,EAAMsG,YAAYL,KAW3B7C,EAAUtU,OAAS,SAAgBwR,GAC/B,OAAO,IAAI8C,EAAU9C,EACzB,EAWA8C,EAAUta,OAAS,SAAgB7T,EAASgsB,GAOxC,OANKA,IACDA,EAASnB,EAAQhR,UACK,MAAtB7Z,EAAQuxB,YAAsBvxB,EAAQisB,eAAe,eACrDhB,EAAMR,KAAK0D,UAAUqD,OAAO3d,OAAO7T,EAAQuxB,WAAYvF,EAAOE,OAA8B,IAAII,QAAQC,SAClF,MAAtBvsB,EAAQmxB,YAAsBnxB,EAAQisB,eAAe,eACrDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQmxB,YACrDnF,CACX,EAWAmC,EAAU1B,gBAAkB,SAAyBzsB,EAASgsB,GAC1D,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaA4B,EAAU5xB,OAAS,SAAgBmwB,EAAQvzB,GACjCuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK0D,UACrFzB,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQuxB,WAAatG,EAAMR,KAAK0D,UAAUqD,OAAOj1B,OAAOmwB,EAAQA,EAAOR,UACvE,MACJ,KAAK,EACDlsB,EAAQmxB,WAAazE,EAAOlZ,SAC5B,MACJ,QACIkZ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAmuB,EAAUrB,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAiC,EAAUpB,OAAS,SAAgB/sB,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEX,GAA0B,MAAtBA,EAAQuxB,YAAsBvxB,EAAQisB,eAAe,cAAe,CAGhE,IAAInyB,EAAQmxB,EAAMR,KAAK0D,UAAUqD,OAAOzE,OAAO/sB,EAAQuxB,YACvD,GAAIz3B,EACA,MAAO,cAAgBA,CAEnC,CACA,OAA0B,MAAtBkG,EAAQmxB,YAAsBnxB,EAAQisB,eAAe,gBAChDlB,EAAMiC,SAAShtB,EAAQmxB,YACjB,8BACR,IACX,EAUAhD,EAAUhB,WAAa,SAAoBC,GACvC,GAAIA,aAAkBnC,EAAMR,KAAK0D,UAC7B,OAAOf,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK0D,UAC7B,GAAyB,MAArBf,EAAOmE,WAAoB,CAC3B,GAAiC,iBAAtBnE,EAAOmE,WACd,MAAM7P,UAAU,+CACpB1hB,EAAQuxB,WAAatG,EAAMR,KAAK0D,UAAUqD,OAAOrE,WAAWC,EAAOmE,WACvE,CAGA,OAFyB,MAArBnE,EAAO+D,aACPnxB,EAAQmxB,WAAaz0B,OAAO0wB,EAAO+D,aAChCnxB,CACX,EAWAmuB,EAAUb,SAAW,SAAkBttB,EAASutB,GACvCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EAUd,OATIG,EAAQE,WACRL,EAAO+D,WAAa,IACE,MAAtBnxB,EAAQuxB,YAAsBvxB,EAAQisB,eAAe,gBACrDmB,EAAOmE,WAAatG,EAAMR,KAAK0D,UAAUqD,OAAOlE,SAASttB,EAAQuxB,WAAYhE,GACzEA,EAAQ+D,SACRlE,EAAOrR,MAAQ,eAEG,MAAtB/b,EAAQmxB,YAAsBnxB,EAAQisB,eAAe,gBACrDmB,EAAO+D,WAAanxB,EAAQmxB,YACzB/D,CACX,EASAe,EAAU5Z,UAAU+N,OAAS,WACzB,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEAE,EAAUqD,OAAS,WAkBf,SAASA,EAAOnG,GACZ,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CA6LA,OArLAw6B,EAAOjd,UAAUkd,SAAW,EAQ5BD,EAAOjd,UAAUmd,MAAQ,KAUzBF,EAAO3X,OAAS,SAAgBwR,GAC5B,OAAO,IAAImG,EAAOnG,EACtB,EAWAmG,EAAO3d,OAAS,SAAgB7T,EAASgsB,GAOrC,OANKA,IACDA,EAASnB,EAAQhR,UACG,MAApB7Z,EAAQyxB,UAAoBzxB,EAAQisB,eAAe,aACnDD,EAAOE,OAA8B,GAAG5S,MAAMtZ,EAAQyxB,UACrC,MAAjBzxB,EAAQ0xB,OAAiB1xB,EAAQisB,eAAe,UAChDhB,EAAMR,KAAKoG,iBAAiBhd,OAAO7T,EAAQ0xB,MAAO1F,EAAOE,OAA8B,IAAII,QAAQC,SAChGP,CACX,EAWAwF,EAAO/E,gBAAkB,SAAyBzsB,EAASgsB,GACvD,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaAiF,EAAOj1B,OAAS,SAAgBmwB,EAAQvzB,GAC9BuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAK0D,UAAUqD,OAC/F9E,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQyxB,SAAW/E,EAAOpT,QAC1B,MACJ,KAAK,EACDtZ,EAAQ0xB,MAAQzG,EAAMR,KAAKoG,iBAAiBt0B,OAAOmwB,EAAQA,EAAOR,UAClE,MACJ,QACIQ,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAwxB,EAAO1E,gBAAkB,SAAyBJ,GAG9C,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAsF,EAAOzE,OAAS,SAAgB/sB,GAC5B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQyxB,UAAoBzxB,EAAQisB,eAAe,cAC9ClB,EAAMkC,UAAUjtB,EAAQyxB,UACzB,MAAO,6BACf,GAAqB,MAAjBzxB,EAAQ0xB,OAAiB1xB,EAAQisB,eAAe,SAAU,CAC1D,IAAInyB,EAAQmxB,EAAMR,KAAKoG,iBAAiB9D,OAAO/sB,EAAQ0xB,OACvD,GAAI53B,EACA,MAAO,SAAWA,CAC1B,CACA,OAAO,IACX,EAUA03B,EAAOrE,WAAa,SAAoBC,GACpC,GAAIA,aAAkBnC,EAAMR,KAAK0D,UAAUqD,OACvC,OAAOpE,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAK0D,UAAUqD,OAGvC,GAFuB,MAAnBpE,EAAOqE,WACPzxB,EAAQyxB,SAA6B,EAAlBrE,EAAOqE,UACV,MAAhBrE,EAAOsE,MAAe,CACtB,GAA4B,iBAAjBtE,EAAOsE,MACd,MAAMhQ,UAAU,iDACpB1hB,EAAQ0xB,MAAQzG,EAAMR,KAAKoG,iBAAiB1D,WAAWC,EAAOsE,MAClE,CACA,OAAO1xB,CACX,EAWAwxB,EAAOlE,SAAW,SAAkBttB,EAASutB,GACpCA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EASd,OARIG,EAAQE,WACRL,EAAOqE,SAAW,EAClBrE,EAAOsE,MAAQ,MAEK,MAApB1xB,EAAQyxB,UAAoBzxB,EAAQisB,eAAe,cACnDmB,EAAOqE,SAAWzxB,EAAQyxB,UACT,MAAjBzxB,EAAQ0xB,OAAiB1xB,EAAQisB,eAAe,WAChDmB,EAAOsE,MAAQzG,EAAMR,KAAKoG,iBAAiBvD,SAASttB,EAAQ0xB,MAAOnE,IAChEH,CACX,EASAoE,EAAOjd,UAAU+N,OAAS,WACtB,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOuD,CACV,CArNkB,GAuNZrD,CACV,CA/bgB,GAicjB1D,EAAKyE,mBAAqB,WAkBtB,SAASA,EAAmB7D,GACxB,GAAIA,EACA,IAAK,IAAIrT,EAAOpgB,OAAOogB,KAAKqT,GAAar0B,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,EACpC,MAAvBq0B,EAAWrT,EAAKhhB,MAChB8I,KAAKkY,EAAKhhB,IAAMq0B,EAAWrT,EAAKhhB,IAChD,CAsMA,OA9LAk4B,EAAmB3a,UAAUka,OAAS,GAQtCS,EAAmB3a,UAAUod,QAAU5G,EAAMrR,KAAOqR,EAAMrR,KAAKyJ,SAAS,EAAE,GAAE,GAAS,EAUrF+L,EAAmBrV,OAAS,SAAgBwR,GACxC,OAAO,IAAI6D,EAAmB7D,EAClC,EAWA6D,EAAmBrb,OAAS,SAAgB7T,EAASgsB,GAOjD,OANKA,IACDA,EAASnB,EAAQhR,UACC,MAAlB7Z,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,WACjDD,EAAOE,OAA8B,IAAI1Y,OAAOxT,EAAQyuB,QACrC,MAAnBzuB,EAAQ2xB,SAAmB3xB,EAAQisB,eAAe,YAClDD,EAAOE,OAA8B,IAAIE,MAAMpsB,EAAQ2xB,SACpD3F,CACX,EAWAkD,EAAmBzC,gBAAkB,SAAyBzsB,EAASgsB,GACnE,OAAOlsB,KAAK+T,OAAO7T,EAASgsB,GAAQO,QACxC,EAaA2C,EAAmB3yB,OAAS,SAAgBmwB,EAAQvzB,GAC1CuzB,aAAkB/B,IACpB+B,EAAS/B,EAAQ9Q,OAAO6S,IAE5B,IADA,IAAI3Y,OAAiBjB,IAAX3Z,EAAuBuzB,EAAOnU,IAAMmU,EAAOvX,IAAMhc,EAAQ6G,EAAU,IAAIirB,EAAMR,KAAKyE,mBACrFxC,EAAOvX,IAAMpB,GAAK,CACrB,IAAI4Y,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACD3sB,EAAQyuB,OAAS/B,EAAOlZ,SACxB,MACJ,KAAK,EACDxT,EAAQ2xB,QAAUjF,EAAON,QACzB,MACJ,QACIM,EAAOG,SAAe,EAANF,GAGxB,CACA,OAAO3sB,CACX,EAYAkvB,EAAmBpC,gBAAkB,SAAyBJ,GAG1D,OAFMA,aAAkB/B,IACpB+B,EAAS,IAAI/B,EAAQ+B,IAClB5sB,KAAKvD,OAAOmwB,EAAQA,EAAOR,SACtC,EAUAgD,EAAmBnC,OAAS,SAAgB/sB,GACxC,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACW,MAAlBA,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,YAC5ClB,EAAMiC,SAAShtB,EAAQyuB,QACjB,0BACQ,MAAnBzuB,EAAQ2xB,SAAmB3xB,EAAQisB,eAAe,cAC7ClB,EAAMkC,UAAUjtB,EAAQ2xB,UAAc3xB,EAAQ2xB,SAAW5G,EAAMkC,UAAUjtB,EAAQ2xB,QAAQhY,MAAQoR,EAAMkC,UAAUjtB,EAAQ2xB,QAAQ/X,OAC3H,iCACR,IACX,EAUAsV,EAAmB/B,WAAa,SAAoBC,GAChD,GAAIA,aAAkBnC,EAAMR,KAAKyE,mBAC7B,OAAO9B,EACX,IAAIptB,EAAU,IAAIirB,EAAMR,KAAKyE,mBAY7B,OAXqB,MAAjB9B,EAAOqB,SACPzuB,EAAQyuB,OAAS/xB,OAAO0wB,EAAOqB,SACb,MAAlBrB,EAAOuE,UACH5G,EAAMrR,MACL1Z,EAAQ2xB,QAAU5G,EAAMrR,KAAK+K,UAAU2I,EAAOuE,UAAUjP,UAAW,EACrC,iBAAnB0K,EAAOuE,QACnB3xB,EAAQ2xB,QAAUtN,SAAS+I,EAAOuE,QAAS,IACZ,iBAAnBvE,EAAOuE,QACnB3xB,EAAQ2xB,QAAUvE,EAAOuE,QACM,iBAAnBvE,EAAOuE,UACnB3xB,EAAQ2xB,QAAU,IAAI5G,EAAMsC,SAASD,EAAOuE,QAAQhY,MAAQ,EAAGyT,EAAOuE,QAAQ/X,OAAS,GAAGqL,aAC3FjlB,CACX,EAWAkvB,EAAmB5B,SAAW,SAAkBttB,EAASutB,GAChDA,IACDA,EAAU,CAAC,GACf,IAAIH,EAAS,CAAC,EACd,GAAIG,EAAQE,SAER,GADAL,EAAOqB,OAAS,GACZ1D,EAAMrR,KAAM,CACZ,IAAIgU,EAAO,IAAI3C,EAAMrR,KAAK,EAAG,GAAG,GAChC0T,EAAOuE,QAAUpE,EAAQI,QAAUjxB,OAASgxB,EAAKrkB,WAAakkB,EAAQI,QAAUtmB,OAASqmB,EAAKzI,WAAayI,CAC/G,MACIN,EAAOuE,QAAUpE,EAAQI,QAAUjxB,OAAS,IAAM,EAS1D,OAPsB,MAAlBsD,EAAQyuB,QAAkBzuB,EAAQisB,eAAe,YACjDmB,EAAOqB,OAASzuB,EAAQyuB,QACL,MAAnBzuB,EAAQ2xB,SAAmB3xB,EAAQisB,eAAe,aACnB,iBAApBjsB,EAAQ2xB,QACfvE,EAAOuE,QAAUpE,EAAQI,QAAUjxB,OAASA,OAAOsD,EAAQ2xB,SAAW3xB,EAAQ2xB,QAE9EvE,EAAOuE,QAAUpE,EAAQI,QAAUjxB,OAASquB,EAAMrR,KAAKnF,UAAUlL,SAASgD,KAAKrM,EAAQ2xB,SAAWpE,EAAQI,QAAUtmB,OAAS,IAAI0jB,EAAMsC,SAASrtB,EAAQ2xB,QAAQhY,MAAQ,EAAG3Z,EAAQ2xB,QAAQ/X,OAAS,GAAGqL,WAAajlB,EAAQ2xB,SAC7NvE,CACX,EASA8B,EAAmB3a,UAAU+N,OAAS,WAClC,OAAOxiB,KAAKkuB,YAAYV,SAASxtB,KAAM4qB,EAAUM,KAAKiD,cAC1D,EAEOiB,CACV,CA9NyB,GAgOnBzE,GAGX3d,EAAON,QAAUye,C,8BCpxJjBne,EAAON,QAAU,EAAjB,K,8BCFA,IAAIolB,EAAWplB,EA2Bf,SAASqlB,IACLD,EAAS5G,KAAK8G,aACdF,EAAS9G,OAAOgH,WAAWF,EAASG,cACpCH,EAAShH,OAAOkH,WAAWF,EAASI,aACxC,CAvBAJ,EAASK,MAAQ,UAGjBL,EAAS9G,OAAe,EAAQ,MAChC8G,EAASG,aAAe,EAAQ,MAChCH,EAAShH,OAAe,EAAQ,MAChCgH,EAASI,aAAe,EAAQ,KAGhCJ,EAAS5G,KAAe,EAAQ,MAChC4G,EAASM,IAAe,EAAQ,MAChCN,EAAS1G,MAAe,EAAQ,MAChC0G,EAASC,UAAeA,EAcxBA,G,8BClCA/kB,EAAON,QAAUoe,EAEjB,IAEIoH,EAFAhH,EAAY,EAAQ,MAIpBqC,EAAYrC,EAAKqC,SACjB/U,EAAY0S,EAAK1S,KAGrB,SAAS6Z,EAAgBzF,EAAQ0F,GAC7B,OAAOjO,WAAW,uBAAyBuI,EAAOvX,IAAM,OAASid,GAAe,GAAK,MAAQ1F,EAAOnU,IACxG,CAQA,SAASqS,EAAOx0B,GAMZ0J,KAAKoV,IAAM9e,EAMX0J,KAAKqV,IAAM,EAMXrV,KAAKyY,IAAMniB,EAAO+C,MACtB,CAEA,IA4CQ4iB,EA5CJsW,EAAqC,oBAAfr5B,WACpB,SAA4B5C,GAC1B,GAAIA,aAAkB4C,YAAc8R,MAAMoiB,QAAQ92B,GAC9C,OAAO,IAAIw0B,EAAOx0B,GACtB,MAAMkI,MAAM,iBAChB,EAEE,SAAsBlI,GACpB,GAAI0U,MAAMoiB,QAAQ92B,GACd,OAAO,IAAIw0B,EAAOx0B,GACtB,MAAMkI,MAAM,iBAChB,EAEAub,EAAS,WACT,OAAOmR,EAAKsH,OACN,SAA6Bl8B,GAC3B,OAAQw0B,EAAO/Q,OAAS,SAAuBzjB,GAC3C,OAAO40B,EAAKsH,OAAOC,SAASn8B,GACtB,IAAI47B,EAAa57B,GAEjBi8B,EAAaj8B,EACvB,GAAGA,EACP,EAEEi8B,CACV,EAuDA,SAASG,IAEL,IAAIC,EAAO,IAAIpF,EAAS,EAAG,GACvBr2B,EAAI,EACR,KAAI8I,KAAKyY,IAAMzY,KAAKqV,IAAM,GAanB,CACH,KAAOne,EAAI,IAAKA,EAAG,CAEf,GAAI8I,KAAKqV,KAAOrV,KAAKyY,IACjB,MAAM4Z,EAAgBryB,MAG1B,GADA2yB,EAAK/a,IAAM+a,EAAK/a,IAA2B,IAArB5X,KAAKoV,IAAIpV,KAAKqV,OAAmB,EAAJne,KAAW,EAC1D8I,KAAKoV,IAAIpV,KAAKqV,OAAS,IACvB,OAAOsd,CACf,CAGA,OADAA,EAAK/a,IAAM+a,EAAK/a,IAA6B,IAAvB5X,KAAKoV,IAAIpV,KAAKqV,SAAqB,EAAJne,KAAW,EACzDy7B,CACX,CAzBI,KAAOz7B,EAAI,IAAKA,EAGZ,GADAy7B,EAAK/a,IAAM+a,EAAK/a,IAA2B,IAArB5X,KAAKoV,IAAIpV,KAAKqV,OAAmB,EAAJne,KAAW,EAC1D8I,KAAKoV,IAAIpV,KAAKqV,OAAS,IACvB,OAAOsd,EAKf,GAFAA,EAAK/a,IAAM+a,EAAK/a,IAA2B,IAArB5X,KAAKoV,IAAIpV,KAAKqV,OAAe,MAAQ,EAC3Dsd,EAAK9a,IAAM8a,EAAK9a,IAA2B,IAArB7X,KAAKoV,IAAIpV,KAAKqV,OAAgB,KAAO,EACvDrV,KAAKoV,IAAIpV,KAAKqV,OAAS,IACvB,OAAOsd,EAgBf,GAfIz7B,EAAI,EAeJ8I,KAAKyY,IAAMzY,KAAKqV,IAAM,GACtB,KAAOne,EAAI,IAAKA,EAGZ,GADAy7B,EAAK9a,IAAM8a,EAAK9a,IAA2B,IAArB7X,KAAKoV,IAAIpV,KAAKqV,OAAmB,EAAJne,EAAQ,KAAO,EAC9D8I,KAAKoV,IAAIpV,KAAKqV,OAAS,IACvB,OAAOsd,OAGf,KAAOz7B,EAAI,IAAKA,EAAG,CAEf,GAAI8I,KAAKqV,KAAOrV,KAAKyY,IACjB,MAAM4Z,EAAgBryB,MAG1B,GADA2yB,EAAK9a,IAAM8a,EAAK9a,IAA2B,IAArB7X,KAAKoV,IAAIpV,KAAKqV,OAAmB,EAAJne,EAAQ,KAAO,EAC9D8I,KAAKoV,IAAIpV,KAAKqV,OAAS,IACvB,OAAOsd,CACf,CAGJ,MAAMn0B,MAAM,0BAChB,CAiCA,SAASo0B,EAAgBxd,EAAKnB,GAC1B,OAAQmB,EAAInB,EAAM,GACVmB,EAAInB,EAAM,IAAM,EAChBmB,EAAInB,EAAM,IAAM,GAChBmB,EAAInB,EAAM,IAAM,MAAQ,CACpC,CA8BA,SAAS4e,IAGL,GAAI7yB,KAAKqV,IAAM,EAAIrV,KAAKyY,IACpB,MAAM4Z,EAAgBryB,KAAM,GAEhC,OAAO,IAAIutB,EAASqF,EAAgB5yB,KAAKoV,IAAKpV,KAAKqV,KAAO,GAAIud,EAAgB5yB,KAAKoV,IAAKpV,KAAKqV,KAAO,GACxG,CA5KAyV,EAAO/Q,OAASA,IAEhB+Q,EAAOrW,UAAUqe,OAAS5H,EAAKlgB,MAAMyJ,UAAU9X,UAAuCuuB,EAAKlgB,MAAMyJ,UAAUlb,MAO3GuxB,EAAOrW,UAAU2X,QACTnQ,EAAQ,WACL,WACuD,GAA1DA,GAAuC,IAArBjc,KAAKoV,IAAIpV,KAAKqV,QAAuB,EAAOrV,KAAKoV,IAAIpV,KAAKqV,OAAS,IAAK,OAAO4G,EACvC,GAA1DA,GAASA,GAA8B,IAArBjc,KAAKoV,IAAIpV,KAAKqV,OAAgB,KAAO,EAAOrV,KAAKoV,IAAIpV,KAAKqV,OAAS,IAAK,OAAO4G,EACvC,GAA1DA,GAASA,GAA8B,IAArBjc,KAAKoV,IAAIpV,KAAKqV,OAAe,MAAQ,EAAOrV,KAAKoV,IAAIpV,KAAKqV,OAAS,IAAK,OAAO4G,EACvC,GAA1DA,GAASA,GAA8B,IAArBjc,KAAKoV,IAAIpV,KAAKqV,OAAe,MAAQ,EAAOrV,KAAKoV,IAAIpV,KAAKqV,OAAS,IAAK,OAAO4G,EACvC,GAA1DA,GAASA,GAA+B,GAAtBjc,KAAKoV,IAAIpV,KAAKqV,OAAe,MAAQ,EAAOrV,KAAKoV,IAAIpV,KAAKqV,OAAS,IAAK,OAAO4G,EAGjG,IAAKjc,KAAKqV,KAAO,GAAKrV,KAAKyY,IAEvB,MADAzY,KAAKqV,IAAMrV,KAAKyY,IACV4Z,EAAgBryB,KAAM,IAEhC,OAAOic,CACX,GAOJ6O,EAAOrW,UAAU+E,MAAQ,WACrB,OAAuB,EAAhBxZ,KAAKosB,QAChB,EAMAtB,EAAOrW,UAAUse,OAAS,WACtB,IAAI9W,EAAQjc,KAAKosB,SACjB,OAAOnQ,IAAU,IAAc,EAARA,GAAa,CACxC,EAoFA6O,EAAOrW,UAAUue,KAAO,WACpB,OAAyB,IAAlBhzB,KAAKosB,QAChB,EAaAtB,EAAOrW,UAAUwe,QAAU,WAGvB,GAAIjzB,KAAKqV,IAAM,EAAIrV,KAAKyY,IACpB,MAAM4Z,EAAgBryB,KAAM,GAEhC,OAAO4yB,EAAgB5yB,KAAKoV,IAAKpV,KAAKqV,KAAO,EACjD,EAMAyV,EAAOrW,UAAUye,SAAW,WAGxB,GAAIlzB,KAAKqV,IAAM,EAAIrV,KAAKyY,IACpB,MAAM4Z,EAAgBryB,KAAM,GAEhC,OAAkD,EAA3C4yB,EAAgB5yB,KAAKoV,IAAKpV,KAAKqV,KAAO,EACjD,EAkCAyV,EAAOrW,UAAU4X,MAAQ,WAGrB,GAAIrsB,KAAKqV,IAAM,EAAIrV,KAAKyY,IACpB,MAAM4Z,EAAgBryB,KAAM,GAEhC,IAAIic,EAAQiP,EAAKmB,MAAM1W,YAAY3V,KAAKoV,IAAKpV,KAAKqV,KAElD,OADArV,KAAKqV,KAAO,EACL4G,CACX,EAOA6O,EAAOrW,UAAUic,OAAS,WAGtB,GAAI1wB,KAAKqV,IAAM,EAAIrV,KAAKyY,IACpB,MAAM4Z,EAAgBryB,KAAM,GAEhC,IAAIic,EAAQiP,EAAKmB,MAAM/U,aAAatX,KAAKoV,IAAKpV,KAAKqV,KAEnD,OADArV,KAAKqV,KAAO,EACL4G,CACX,EAMA6O,EAAOrW,UAAU8G,MAAQ,WACrB,IAAIliB,EAAS2G,KAAKosB,SACdpY,EAAShU,KAAKqV,IACdpB,EAASjU,KAAKqV,IAAMhc,EAGxB,GAAI4a,EAAMjU,KAAKyY,IACX,MAAM4Z,EAAgBryB,KAAM3G,GAGhC,OADA2G,KAAKqV,KAAOhc,EACR2R,MAAMoiB,QAAQptB,KAAKoV,KACZpV,KAAKoV,IAAI7b,MAAMya,EAAOC,GAC1BD,IAAUC,EACX,IAAIjU,KAAKoV,IAAI8Y,YAAY,GACzBluB,KAAK8yB,OAAOvmB,KAAKvM,KAAKoV,IAAKpB,EAAOC,EAC5C,EAMA6W,EAAOrW,UAAUf,OAAS,WACtB,IAAI6H,EAAQvb,KAAKub,QACjB,OAAO/C,EAAKE,KAAK6C,EAAO,EAAGA,EAAMliB,OACrC,EAOAyxB,EAAOrW,UAAU0e,KAAO,SAAc95B,GAClC,GAAsB,iBAAXA,EAAqB,CAE5B,GAAI2G,KAAKqV,IAAMhc,EAAS2G,KAAKyY,IACzB,MAAM4Z,EAAgBryB,KAAM3G,GAChC2G,KAAKqV,KAAOhc,CAChB,MACI,GAEI,GAAI2G,KAAKqV,KAAOrV,KAAKyY,IACjB,MAAM4Z,EAAgBryB,YACE,IAAvBA,KAAKoV,IAAIpV,KAAKqV,QAE3B,OAAOrV,IACX,EAOA8qB,EAAOrW,UAAUsY,SAAW,SAASqG,GACjC,OAAQA,GACJ,KAAK,EACDpzB,KAAKmzB,OACL,MACJ,KAAK,EACDnzB,KAAKmzB,KAAK,GACV,MACJ,KAAK,EACDnzB,KAAKmzB,KAAKnzB,KAAKosB,UACf,MACJ,KAAK,EACD,KAA0C,IAAlCgH,EAA2B,EAAhBpzB,KAAKosB,WACpBpsB,KAAK+sB,SAASqG,GAElB,MACJ,KAAK,EACDpzB,KAAKmzB,KAAK,GACV,MAGJ,QACI,MAAM30B,MAAM,qBAAuB40B,EAAW,cAAgBpzB,KAAKqV,KAE3E,OAAOrV,IACX,EAEA8qB,EAAOkH,WAAa,SAASqB,GACzBnB,EAAemB,EACfvI,EAAO/Q,OAASA,IAChBmY,EAAaF,aAEb,IAAInwB,EAAKqpB,EAAKtR,KAAO,SAAsC,WAC3DsR,EAAKoI,MAAMxI,EAAOrW,UAAW,CAEzB6X,MAAO,WACH,OAAOoG,EAAenmB,KAAKvM,MAAM6B,IAAI,EACzC,EAEA8uB,OAAQ,WACJ,OAAO+B,EAAenmB,KAAKvM,MAAM6B,IAAI,EACzC,EAEA0xB,OAAQ,WACJ,OAAOb,EAAenmB,KAAKvM,MAAMwzB,WAAW3xB,IAAI,EACpD,EAEA4xB,QAAS,WACL,OAAOZ,EAAYtmB,KAAKvM,MAAM6B,IAAI,EACtC,EAEA6xB,SAAU,WACN,OAAOb,EAAYtmB,KAAKvM,MAAM6B,IAAI,EACtC,GAGR,C,6BCzZAmL,EAAON,QAAUwlB,EAGjB,IAAIpH,EAAS,EAAQ,OACpBoH,EAAazd,UAAY3c,OAAOiiB,OAAO+Q,EAAOrW,YAAYyZ,YAAcgE,EAEzE,IAAIhH,EAAO,EAAQ,MASnB,SAASgH,EAAa57B,GAClBw0B,EAAOve,KAAKvM,KAAM1J,EAOtB,CAEA47B,EAAaF,WAAa,WAElB9G,EAAKsH,SACLN,EAAazd,UAAUqe,OAAS5H,EAAKsH,OAAO/d,UAAUlb,MAC9D,EAMA24B,EAAazd,UAAUf,OAAS,WAC5B,IAAI+E,EAAMzY,KAAKosB,SACf,OAAOpsB,KAAKoV,IAAIue,UACV3zB,KAAKoV,IAAIue,UAAU3zB,KAAKqV,IAAKrV,KAAKqV,IAAMhO,KAAK4E,IAAIjM,KAAKqV,IAAMoD,EAAKzY,KAAKyY,MACtEzY,KAAKoV,IAAI7L,SAAS,QAASvJ,KAAKqV,IAAKrV,KAAKqV,IAAMhO,KAAK4E,IAAIjM,KAAKqV,IAAMoD,EAAKzY,KAAKyY,KACxF,EASAyZ,EAAaF,Y,wBCjDbhlB,EAAON,QAAU,CAAC,C,8BCKRA,EA6BNknB,QAAU,EAAQ,K,8BClCtB5mB,EAAON,QAAUknB,EAEjB,IAAI1I,EAAO,EAAQ,MAsCnB,SAAS0I,EAAQC,EAASC,EAAkBC,GAExC,GAAuB,mBAAZF,EACP,MAAMjS,UAAU,8BAEpBsJ,EAAK3W,aAAahI,KAAKvM,MAMvBA,KAAK6zB,QAAUA,EAMf7zB,KAAK8zB,iBAAmBE,QAAQF,GAMhC9zB,KAAK+zB,kBAAoBC,QAAQD,EACrC,EA3DCH,EAAQnf,UAAY3c,OAAOiiB,OAAOmR,EAAK3W,aAAaE,YAAYyZ,YAAc0F,EAwE/EA,EAAQnf,UAAUwf,QAAU,SAASA,EAAQC,EAAQC,EAAaC,EAAcC,EAASC,GAErF,IAAKD,EACD,MAAMzS,UAAU,6BAEpB,IAAIznB,EAAO6F,KACX,IAAKs0B,EACD,OAAOpJ,EAAKqJ,UAAUN,EAAS95B,EAAM+5B,EAAQC,EAAaC,EAAcC,GAE5E,GAAKl6B,EAAK05B,QAKV,IACI,OAAO15B,EAAK05B,QACRK,EACAC,EAAYh6B,EAAK25B,iBAAmB,kBAAoB,UAAUO,GAAS5V,UAC3E,SAAqBjL,EAAK1Y,GAEtB,GAAI0Y,EAEA,OADArZ,EAAK0a,KAAK,QAASrB,EAAK0gB,GACjBI,EAAS9gB,GAGpB,GAAiB,OAAb1Y,EAAJ,CAKA,KAAMA,aAAoBs5B,GACtB,IACIt5B,EAAWs5B,EAAaj6B,EAAK45B,kBAAoB,kBAAoB,UAAUj5B,EAInF,CAHE,MAAO0Y,GAEL,OADArZ,EAAK0a,KAAK,QAASrB,EAAK0gB,GACjBI,EAAS9gB,EACpB,CAIJ,OADArZ,EAAK0a,KAAK,OAAQ/Z,EAAUo5B,GACrBI,EAAS,KAAMx5B,EAZtB,CAFIX,EAAK8Z,KAAqB,EAelC,GAMR,CAJE,MAAOT,GAGL,OAFArZ,EAAK0a,KAAK,QAASrB,EAAK0gB,QACxB7oB,YAAW,WAAaipB,EAAS9gB,EAAM,GAAG,EAE9C,MArCInI,YAAW,WAAaipB,EAAS91B,MAAM,iBAAmB,GAAG,EAsCrE,EAOAo1B,EAAQnf,UAAUR,IAAM,SAAaugB,GAOjC,OANIx0B,KAAK6zB,UACAW,GACDx0B,KAAK6zB,QAAQ,KAAM,KAAM,MAC7B7zB,KAAK6zB,QAAU,KACf7zB,KAAK6U,KAAK,OAAOF,OAEd3U,IACX,C,8BC5IAgN,EAAON,QAAU6gB,EAEjB,IAAIrC,EAAO,EAAQ,MAUnB,SAASqC,EAAS3V,EAAIC,GASlB7X,KAAK4X,GAAKA,IAAO,EAMjB5X,KAAK6X,GAAKA,IAAO,CACrB,CAOA,IAAI4c,EAAOlH,EAASkH,KAAO,IAAIlH,EAAS,EAAG,GAE3CkH,EAAKtP,SAAW,WAAa,OAAO,CAAG,EACvCsP,EAAKC,SAAWD,EAAKjB,SAAW,WAAa,OAAOxzB,IAAM,EAC1Dy0B,EAAKp7B,OAAS,WAAa,OAAO,CAAG,EAOrC,IAAIs7B,EAAWpH,EAASoH,SAAW,mBAOnCpH,EAASjK,WAAa,SAAoBrH,GACtC,GAAc,IAAVA,EACA,OAAOwY,EACX,IAAI1e,EAAOkG,EAAQ,EACflG,IACAkG,GAASA,GACb,IAAIrE,EAAKqE,IAAU,EACfpE,GAAMoE,EAAQrE,GAAM,aAAe,EAUvC,OATI7B,IACA8B,GAAMA,IAAO,EACbD,GAAMA,IAAO,IACPA,EAAK,aACPA,EAAK,IACCC,EAAK,aACPA,EAAK,KAGV,IAAI0V,EAAS3V,EAAIC,EAC5B,EAOA0V,EAASqH,KAAO,SAAc3Y,GAC1B,GAAqB,iBAAVA,EACP,OAAOsR,EAASjK,WAAWrH,GAC/B,GAAIiP,EAAKgC,SAASjR,GAAQ,CAEtB,IAAIiP,EAAKtR,KAGL,OAAO2T,EAASjK,WAAWiB,SAAStI,EAAO,KAF3CA,EAAQiP,EAAKtR,KAAKsK,WAAWjI,EAGrC,CACA,OAAOA,EAAMpC,KAAOoC,EAAMnC,KAAO,IAAIyT,EAAStR,EAAMpC,MAAQ,EAAGoC,EAAMnC,OAAS,GAAK2a,CACvF,EAOAlH,EAAS9Y,UAAU0Q,SAAW,SAAkBvC,GAC5C,IAAKA,GAAY5iB,KAAK6X,KAAO,GAAI,CAC7B,IAAID,EAAgB,GAAV5X,KAAK4X,KAAW,EACtBC,GAAM7X,KAAK6X,KAAW,EAG1B,OAFKD,IACDC,EAAKA,EAAK,IAAM,KACXD,EAAU,WAALC,EAClB,CACA,OAAO7X,KAAK4X,GAAe,WAAV5X,KAAK6X,EAC1B,EAOA0V,EAAS9Y,UAAUogB,OAAS,SAAgBjS,GACxC,OAAOsI,EAAKtR,KACN,IAAIsR,EAAKtR,KAAe,EAAV5Z,KAAK4X,GAAkB,EAAV5X,KAAK6X,GAAQmc,QAAQpR,IAEhD,CAAE/I,IAAe,EAAV7Z,KAAK4X,GAAQkC,KAAgB,EAAV9Z,KAAK6X,GAAQ+K,SAAUoR,QAAQpR,GACnE,EAEA,IAAI5lB,EAAaJ,OAAO6X,UAAUzX,WAOlCuwB,EAASuH,SAAW,SAAkBC,GAClC,OAAIA,IAASJ,EACFF,EACJ,IAAIlH,GACLvwB,EAAWuP,KAAKwoB,EAAM,GACtB/3B,EAAWuP,KAAKwoB,EAAM,IAAM,EAC5B/3B,EAAWuP,KAAKwoB,EAAM,IAAM,GAC5B/3B,EAAWuP,KAAKwoB,EAAM,IAAM,MAAQ,GAEpC/3B,EAAWuP,KAAKwoB,EAAM,GACtB/3B,EAAWuP,KAAKwoB,EAAM,IAAM,EAC5B/3B,EAAWuP,KAAKwoB,EAAM,IAAM,GAC5B/3B,EAAWuP,KAAKwoB,EAAM,IAAM,MAAQ,EAE9C,EAMAxH,EAAS9Y,UAAUugB,OAAS,WACxB,OAAOp4B,OAAOC,aACO,IAAjBmD,KAAK4X,GACL5X,KAAK4X,KAAO,EAAK,IACjB5X,KAAK4X,KAAO,GAAK,IACjB5X,KAAK4X,KAAO,GACK,IAAjB5X,KAAK6X,GACL7X,KAAK6X,KAAO,EAAK,IACjB7X,KAAK6X,KAAO,GAAK,IACjB7X,KAAK6X,KAAO,GAEpB,EAMA0V,EAAS9Y,UAAUigB,SAAW,WAC1B,IAAIO,EAASj1B,KAAK6X,IAAM,GAGxB,OAFA7X,KAAK6X,KAAQ7X,KAAK6X,IAAM,EAAI7X,KAAK4X,KAAO,IAAMqd,KAAU,EACxDj1B,KAAK4X,IAAQ5X,KAAK4X,IAAM,EAAsBqd,KAAU,EACjDj1B,IACX,EAMAutB,EAAS9Y,UAAU+e,SAAW,WAC1B,IAAIyB,IAAmB,EAAVj1B,KAAK4X,IAGlB,OAFA5X,KAAK4X,KAAQ5X,KAAK4X,KAAO,EAAI5X,KAAK6X,IAAM,IAAMod,KAAU,EACxDj1B,KAAK6X,IAAQ7X,KAAK6X,KAAO,EAAqBod,KAAU,EACjDj1B,IACX,EAMAutB,EAAS9Y,UAAUpb,OAAS,WACxB,IAAI67B,EAASl1B,KAAK4X,GACdud,GAASn1B,KAAK4X,KAAO,GAAK5X,KAAK6X,IAAM,KAAO,EAC5Cud,EAASp1B,KAAK6X,KAAO,GACzB,OAAiB,IAAVud,EACU,IAAVD,EACED,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EACxBC,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EAC1BC,EAAQ,IAAM,EAAI,EAC7B,C,oCCtMA,IAAIlK,EAAOxe,EA2OX,SAAS4mB,EAAM+B,EAAKn/B,EAAKo/B,GACrB,IAAK,IAAIpd,EAAOpgB,OAAOogB,KAAKhiB,GAAMgB,EAAI,EAAGA,EAAIghB,EAAK7e,SAAUnC,OACnC8b,IAAjBqiB,EAAInd,EAAKhhB,KAAsBo+B,IAC/BD,EAAInd,EAAKhhB,IAAMhB,EAAIgiB,EAAKhhB,KAChC,OAAOm+B,CACX,CAmBA,SAASE,EAASt1B,GAEd,SAASu1B,EAAYt1B,EAASqrB,GAE1B,KAAMvrB,gBAAgBw1B,GAClB,OAAO,IAAIA,EAAYt1B,EAASqrB,GAKpCzzB,OAAOirB,eAAe/iB,KAAM,UAAW,CAAE4H,IAAK,WAAa,OAAO1H,CAAS,IAGvE1B,MAAMi3B,kBACNj3B,MAAMi3B,kBAAkBz1B,KAAMw1B,GAE9B19B,OAAOirB,eAAe/iB,KAAM,QAAS,CAAEic,OAAO,IAAIzd,OAAQk3B,OAAS,KAEnEnK,GACA+H,EAAMtzB,KAAMurB,EACpB,CAUA,OARCiK,EAAY/gB,UAAY3c,OAAOiiB,OAAOvb,MAAMiW,YAAYyZ,YAAcsH,EAEvE19B,OAAOirB,eAAeyS,EAAY/gB,UAAW,OAAQ,CAAE7M,IAAK,WAAa,OAAO3H,CAAM,IAEtFu1B,EAAY/gB,UAAUlL,SAAW,WAC7B,OAAOvJ,KAAKC,KAAO,KAAOD,KAAKE,OACnC,EAEOs1B,CACX,CA/RAtK,EAAKqJ,UAAY,EAAQ,MAGzBrJ,EAAKzX,OAAS,EAAQ,MAGtByX,EAAK3W,aAAe,EAAQ,MAG5B2W,EAAKmB,MAAQ,EAAQ,KAGrBnB,EAAKpT,QAAU,EAAQ,MAGvBoT,EAAK1S,KAAO,EAAQ,MAGpB0S,EAAKyK,KAAO,EAAQ,MAGpBzK,EAAKqC,SAAW,EAAQ,MAOxBrC,EAAK0K,OAAS5B,QAA0B,oBAAX/5B,QACPA,QACAA,OAAO1B,SACP0B,OAAO1B,QAAQC,UACfyB,OAAO1B,QAAQC,SAASC,MAO9CyyB,EAAKjxB,OAASixB,EAAK0K,QAAU37B,QACG,oBAAX9B,QAA0BA,QACf,oBAAXgC,MAA0BA,MACjC6F,KAQdkrB,EAAKe,WAAan0B,OAAO+9B,OAAS/9B,OAAO+9B,OAAO,IAAiC,GAOjF3K,EAAK4K,YAAch+B,OAAO+9B,OAAS/9B,OAAO+9B,OAAO,CAAC,GAAgC,CAAC,EAQnF3K,EAAKiC,UAAY5lB,OAAO4lB,WAAwC,SAAmBlR,GAC/E,MAAwB,iBAAVA,GAAsB+R,SAAS/R,IAAU5U,KAAKwD,MAAMoR,KAAWA,CACjF,EAOAiP,EAAKgC,SAAW,SAAkBjR,GAC9B,MAAwB,iBAAVA,GAAsBA,aAAiBrf,MACzD,EAOAsuB,EAAK6K,SAAW,SAAkB9Z,GAC9B,OAAOA,GAA0B,iBAAVA,CAC3B,EAUAiP,EAAK8K,MAQL9K,EAAK+K,MAAQ,SAAevY,EAAKwY,GAC7B,IAAIja,EAAQyB,EAAIwY,GAChB,QAAa,MAATja,IAAiByB,EAAIyO,eAAe+J,MACZ,iBAAVja,IAAuBjR,MAAMoiB,QAAQnR,GAASA,EAAM5iB,OAASvB,OAAOogB,KAAK+D,GAAO5iB,QAAU,EAEhH,EAaA6xB,EAAKsH,OAAS,WACV,IACI,IAAIA,EAAStH,EAAKpT,QAAQ,UAAU0a,OAEpC,OAAOA,EAAO/d,UAAU0hB,UAAY3D,EAAoC,IAI5E,CAHE,MAAOz8B,GAEL,OAAO,IACX,CACH,CATa,GAYdm1B,EAAKkL,aAAe,KAGpBlL,EAAKmL,oBAAsB,KAO3BnL,EAAKc,UAAY,SAAmBsK,GAEhC,MAA8B,iBAAhBA,EACRpL,EAAKsH,OACDtH,EAAKmL,oBAAoBC,GACzB,IAAIpL,EAAKlgB,MAAMsrB,GACnBpL,EAAKsH,OACDtH,EAAKkL,aAAaE,GACI,oBAAfp9B,WACHo9B,EACA,IAAIp9B,WAAWo9B,EACjC,EAMApL,EAAKlgB,MAA8B,oBAAf9R,WAA6BA,WAAwC8R,MAezFkgB,EAAKtR,KAAkCsR,EAAKjxB,OAAOs8B,SAAsCrL,EAAKjxB,OAAOs8B,QAAQ3c,MACtEsR,EAAKjxB,OAAO2f,MACvCsR,EAAKpT,QAAQ,QAOzBoT,EAAKsL,OAAS,mBAOdtL,EAAKuL,QAAU,wBAOfvL,EAAKwL,QAAU,6CAOfxL,EAAKyL,WAAa,SAAoB1a,GAClC,OAAOA,EACDiP,EAAKqC,SAASqH,KAAK3Y,GAAO+Y,SAC1B9J,EAAKqC,SAASoH,QACxB,EAQAzJ,EAAK0L,aAAe,SAAsB7B,EAAMnS,GAC5C,IAAI+P,EAAOzH,EAAKqC,SAASuH,SAASC,GAClC,OAAI7J,EAAKtR,KACEsR,EAAKtR,KAAKyJ,SAASsP,EAAK/a,GAAI+a,EAAK9a,GAAI+K,GACzC+P,EAAKxN,SAAS6O,QAAQpR,GACjC,EAiBAsI,EAAKoI,MAAQA,EAObpI,EAAK2L,QAAU,SAAiB1S,GAC5B,OAAOA,EAAIxQ,OAAO,GAAGmjB,cAAgB3S,EAAIvZ,UAAU,EACvD,EAyCAsgB,EAAKqK,SAAWA,EAmBhBrK,EAAK6L,cAAgBxB,EAAS,iBAoB9BrK,EAAKoG,YAAc,SAAkB0F,GAEjC,IADA,IAAIC,EAAW,CAAC,EACP//B,EAAI,EAAGA,EAAI8/B,EAAW39B,SAAUnC,EACrC+/B,EAASD,EAAW9/B,IAAM,EAO9B,OAAO,WACH,IAAK,IAAIghB,EAAOpgB,OAAOogB,KAAKlY,MAAO9I,EAAIghB,EAAK7e,OAAS,EAAGnC,GAAK,IAAKA,EAC9D,GAA0B,IAAtB+/B,EAAS/e,EAAKhhB,UAA+B8b,IAAlBhT,KAAKkY,EAAKhhB,KAAuC,OAAlB8I,KAAKkY,EAAKhhB,IACpE,OAAOghB,EAAKhhB,EACxB,CACJ,EAeAg0B,EAAKqG,YAAc,SAAkByF,GAQjC,OAAO,SAAS/2B,GACZ,IAAK,IAAI/I,EAAI,EAAGA,EAAI8/B,EAAW39B,SAAUnC,EACjC8/B,EAAW9/B,KAAO+I,UACXD,KAAKg3B,EAAW9/B,GACnC,CACJ,EAkBAg0B,EAAKiD,cAAgB,CACjBN,MAAOjxB,OACPkxB,MAAOlxB,OACP2e,MAAO3e,OACPmxB,MAAM,GAIV7C,EAAK8G,WAAa,WACd,IAAIQ,EAAStH,EAAKsH,OAEbA,GAMLtH,EAAKkL,aAAe5D,EAAOoC,OAAS17B,WAAW07B,MAAQpC,EAAOoC,MAE1D,SAAqB3Y,EAAOib,GACxB,OAAO,IAAI1E,EAAOvW,EAAOib,EAC7B,EACJhM,EAAKmL,oBAAsB7D,EAAO2E,aAE9B,SAA4B/e,GACxB,OAAO,IAAIoa,EAAOpa,EACtB,GAdA8S,EAAKkL,aAAelL,EAAKmL,oBAAsB,IAevD,C,8BCnaArpB,EAAON,QAAUse,EAEjB,IAEIiH,EAFA/G,EAAY,EAAQ,MAIpBqC,EAAYrC,EAAKqC,SACjB9Z,EAAYyX,EAAKzX,OACjB+E,EAAY0S,EAAK1S,KAWrB,SAAS4e,EAAGv1B,EAAI4W,EAAKtD,GAMjBnV,KAAK6B,GAAKA,EAMV7B,KAAKyY,IAAMA,EAMXzY,KAAKq3B,UAAOrkB,EAMZhT,KAAKmV,IAAMA,CACf,CAGA,SAASmiB,IAAQ,CAUjB,SAASC,EAAMrL,GAMXlsB,KAAKw3B,KAAOtL,EAAOsL,KAMnBx3B,KAAKy3B,KAAOvL,EAAOuL,KAMnBz3B,KAAKyY,IAAMyT,EAAOzT,IAMlBzY,KAAKq3B,KAAOnL,EAAOwL,MACvB,CAOA,SAAS1M,IAMLhrB,KAAKyY,IAAM,EAMXzY,KAAKw3B,KAAO,IAAIJ,EAAGE,EAAM,EAAG,GAM5Bt3B,KAAKy3B,KAAOz3B,KAAKw3B,KAMjBx3B,KAAK03B,OAAS,IAOlB,CAEA,IAAI3d,EAAS,WACT,OAAOmR,EAAKsH,OACN,WACE,OAAQxH,EAAOjR,OAAS,WACpB,OAAO,IAAIkY,CACf,IACJ,EAEE,WACE,OAAO,IAAIjH,CACf,CACR,EAqCA,SAAS2M,EAAUxiB,EAAKC,EAAKC,GACzBD,EAAIC,GAAa,IAANF,CACf,CAmBA,SAASyiB,EAASnf,EAAKtD,GACnBnV,KAAKyY,IAAMA,EACXzY,KAAKq3B,UAAOrkB,EACZhT,KAAKmV,IAAMA,CACf,CA6CA,SAAS0iB,EAAc1iB,EAAKC,EAAKC,GAC7B,KAAOF,EAAI0C,IACPzC,EAAIC,KAAkB,IAATF,EAAIyC,GAAW,IAC5BzC,EAAIyC,IAAMzC,EAAIyC,KAAO,EAAIzC,EAAI0C,IAAM,MAAQ,EAC3C1C,EAAI0C,MAAQ,EAEhB,KAAO1C,EAAIyC,GAAK,KACZxC,EAAIC,KAAkB,IAATF,EAAIyC,GAAW,IAC5BzC,EAAIyC,GAAKzC,EAAIyC,KAAO,EAExBxC,EAAIC,KAASF,EAAIyC,EACrB,CA0CA,SAASkgB,EAAa3iB,EAAKC,EAAKC,GAC5BD,EAAIC,GAA0B,IAAdF,EAChBC,EAAIC,EAAM,GAAMF,IAAQ,EAAM,IAC9BC,EAAIC,EAAM,GAAMF,IAAQ,GAAM,IAC9BC,EAAIC,EAAM,GAAMF,IAAQ,EAC5B,CA9JA6V,EAAOjR,OAASA,IAOhBiR,EAAO7S,MAAQ,SAAeC,GAC1B,OAAO,IAAI8S,EAAKlgB,MAAMoN,EAC1B,EAII8S,EAAKlgB,QAAUA,QACfggB,EAAO7S,MAAQ+S,EAAKyK,KAAK3K,EAAO7S,MAAO+S,EAAKlgB,MAAMyJ,UAAU9X,WAUhEquB,EAAOvW,UAAUsjB,MAAQ,SAAcl2B,EAAI4W,EAAKtD,GAG5C,OAFAnV,KAAKy3B,KAAOz3B,KAAKy3B,KAAKJ,KAAO,IAAID,EAAGv1B,EAAI4W,EAAKtD,GAC7CnV,KAAKyY,KAAOA,EACLzY,IACX,EA6BA43B,EAASnjB,UAAY3c,OAAOiiB,OAAOqd,EAAG3iB,WACtCmjB,EAASnjB,UAAU5S,GAxBnB,SAAuBsT,EAAKC,EAAKC,GAC7B,KAAOF,EAAM,KACTC,EAAIC,KAAe,IAANF,EAAY,IACzBA,KAAS,EAEbC,EAAIC,GAAOF,CACf,EAyBA6V,EAAOvW,UAAU2X,OAAS,SAAsBnQ,GAW5C,OARAjc,KAAKyY,MAAQzY,KAAKy3B,KAAOz3B,KAAKy3B,KAAKJ,KAAO,IAAIO,GACzC3b,KAAkB,GACT,IAAY,EACpBA,EAAQ,MAAY,EACpBA,EAAQ,QAAY,EACpBA,EAAQ,UAAY,EACA,EAC1BA,IAAQxD,IACDzY,IACX,EAQAgrB,EAAOvW,UAAU+E,MAAQ,SAAqByC,GAC1C,OAAOA,EAAQ,EACTjc,KAAK+3B,MAAMF,EAAe,GAAItK,EAASjK,WAAWrH,IAClDjc,KAAKosB,OAAOnQ,EACtB,EAOA+O,EAAOvW,UAAUse,OAAS,SAAsB9W,GAC5C,OAAOjc,KAAKosB,QAAQnQ,GAAS,EAAIA,GAAS,MAAQ,EACtD,EAqBA+O,EAAOvW,UAAUkc,OAAS,SAAsB1U,GAC5C,IAAI0W,EAAOpF,EAASqH,KAAK3Y,GACzB,OAAOjc,KAAK+3B,MAAMF,EAAelF,EAAKt5B,SAAUs5B,EACpD,EASA3H,EAAOvW,UAAU6X,MAAQtB,EAAOvW,UAAUkc,OAQ1C3F,EAAOvW,UAAU8e,OAAS,SAAsBtX,GAC5C,IAAI0W,EAAOpF,EAASqH,KAAK3Y,GAAOyY,WAChC,OAAO10B,KAAK+3B,MAAMF,EAAelF,EAAKt5B,SAAUs5B,EACpD,EAOA3H,EAAOvW,UAAUue,KAAO,SAAoB/W,GACxC,OAAOjc,KAAK+3B,MAAMJ,EAAW,EAAG1b,EAAQ,EAAI,EAChD,EAcA+O,EAAOvW,UAAUwe,QAAU,SAAuBhX,GAC9C,OAAOjc,KAAK+3B,MAAMD,EAAc,EAAG7b,IAAU,EACjD,EAQA+O,EAAOvW,UAAUye,SAAWlI,EAAOvW,UAAUwe,QAQ7CjI,EAAOvW,UAAUgf,QAAU,SAAuBxX,GAC9C,IAAI0W,EAAOpF,EAASqH,KAAK3Y,GACzB,OAAOjc,KAAK+3B,MAAMD,EAAc,EAAGnF,EAAK/a,IAAImgB,MAAMD,EAAc,EAAGnF,EAAK9a,GAC5E,EASAmT,EAAOvW,UAAUif,SAAW1I,EAAOvW,UAAUgf,QAQ7CzI,EAAOvW,UAAU4X,MAAQ,SAAqBpQ,GAC1C,OAAOjc,KAAK+3B,MAAM7M,EAAKmB,MAAM5W,aAAc,EAAGwG,EAClD,EAQA+O,EAAOvW,UAAUic,OAAS,SAAsBzU,GAC5C,OAAOjc,KAAK+3B,MAAM7M,EAAKmB,MAAMjV,cAAe,EAAG6E,EACnD,EAEA,IAAI+b,EAAa9M,EAAKlgB,MAAMyJ,UAAUxJ,IAChC,SAAwBkK,EAAKC,EAAKC,GAChCD,EAAInK,IAAIkK,EAAKE,EACjB,EAEE,SAAwBF,EAAKC,EAAKC,GAChC,IAAK,IAAIne,EAAI,EAAGA,EAAIie,EAAI9b,SAAUnC,EAC9Bke,EAAIC,EAAMne,GAAKie,EAAIje,EAC3B,EAOJ8zB,EAAOvW,UAAU8G,MAAQ,SAAqBU,GAC1C,IAAIxD,EAAMwD,EAAM5iB,SAAW,EAC3B,IAAKof,EACD,OAAOzY,KAAK+3B,MAAMJ,EAAW,EAAG,GACpC,GAAIzM,EAAKgC,SAASjR,GAAQ,CACtB,IAAI7G,EAAM4V,EAAO7S,MAAMM,EAAMhF,EAAOpa,OAAO4iB,IAC3CxI,EAAOhX,OAAOwf,EAAO7G,EAAK,GAC1B6G,EAAQ7G,CACZ,CACA,OAAOpV,KAAKosB,OAAO3T,GAAKsf,MAAMC,EAAYvf,EAAKwD,EACnD,EAOA+O,EAAOvW,UAAUf,OAAS,SAAsBuI,GAC5C,IAAIxD,EAAMD,EAAKnf,OAAO4iB,GACtB,OAAOxD,EACDzY,KAAKosB,OAAO3T,GAAKsf,MAAMvf,EAAKG,MAAOF,EAAKwD,GACxCjc,KAAK+3B,MAAMJ,EAAW,EAAG,EACnC,EAOA3M,EAAOvW,UAAU+X,KAAO,WAIpB,OAHAxsB,KAAK03B,OAAS,IAAIH,EAAMv3B,MACxBA,KAAKw3B,KAAOx3B,KAAKy3B,KAAO,IAAIL,EAAGE,EAAM,EAAG,GACxCt3B,KAAKyY,IAAM,EACJzY,IACX,EAMAgrB,EAAOvW,UAAUwjB,MAAQ,WAUrB,OATIj4B,KAAK03B,QACL13B,KAAKw3B,KAASx3B,KAAK03B,OAAOF,KAC1Bx3B,KAAKy3B,KAASz3B,KAAK03B,OAAOD,KAC1Bz3B,KAAKyY,IAASzY,KAAK03B,OAAOjf,IAC1BzY,KAAK03B,OAAS13B,KAAK03B,OAAOL,OAE1Br3B,KAAKw3B,KAAOx3B,KAAKy3B,KAAO,IAAIL,EAAGE,EAAM,EAAG,GACxCt3B,KAAKyY,IAAO,GAETzY,IACX,EAMAgrB,EAAOvW,UAAUgY,OAAS,WACtB,IAAI+K,EAAOx3B,KAAKw3B,KACZC,EAAOz3B,KAAKy3B,KACZhf,EAAOzY,KAAKyY,IAOhB,OANAzY,KAAKi4B,QAAQ7L,OAAO3T,GAChBA,IACAzY,KAAKy3B,KAAKJ,KAAOG,EAAKH,KACtBr3B,KAAKy3B,KAAOA,EACZz3B,KAAKyY,KAAOA,GAETzY,IACX,EAMAgrB,EAAOvW,UAAUgK,OAAS,WAItB,IAHA,IAAI+Y,EAAOx3B,KAAKw3B,KAAKH,KACjBjiB,EAAOpV,KAAKkuB,YAAY/V,MAAMnY,KAAKyY,KACnCpD,EAAO,EACJmiB,GACHA,EAAK31B,GAAG21B,EAAKriB,IAAKC,EAAKC,GACvBA,GAAOmiB,EAAK/e,IACZ+e,EAAOA,EAAKH,KAGhB,OAAOjiB,CACX,EAEA4V,EAAOgH,WAAa,SAASkG,GACzBjG,EAAeiG,EACflN,EAAOjR,OAASA,IAChBkY,EAAaD,YACjB,C,8BC/cAhlB,EAAON,QAAUulB,EAGjB,IAAIjH,EAAS,EAAQ,OACpBiH,EAAaxd,UAAY3c,OAAOiiB,OAAOiR,EAAOvW,YAAYyZ,YAAc+D,EAEzE,IAAI/G,EAAO,EAAQ,MAQnB,SAAS+G,IACLjH,EAAOze,KAAKvM,KAChB,CAuCA,SAASm4B,EAAkBhjB,EAAKC,EAAKC,GAC7BF,EAAI9b,OAAS,GACb6xB,EAAK1S,KAAKG,MAAMxD,EAAKC,EAAKC,GACrBD,EAAI+gB,UACT/gB,EAAI+gB,UAAUhhB,EAAKE,GAEnBD,EAAIuD,MAAMxD,EAAKE,EACvB,CA5CA4c,EAAaD,WAAa,WAOtBC,EAAa9Z,MAAQ+S,EAAKmL,oBAE1BpE,EAAamG,iBAAmBlN,EAAKsH,QAAUtH,EAAKsH,OAAO/d,qBAAqBvb,YAAiD,QAAnCgyB,EAAKsH,OAAO/d,UAAUxJ,IAAIhL,KAClH,SAA8BkV,EAAKC,EAAKC,GACxCD,EAAInK,IAAIkK,EAAKE,EAEf,EAEE,SAA+BF,EAAKC,EAAKC,GACzC,GAAIF,EAAIkjB,KACNljB,EAAIkjB,KAAKjjB,EAAKC,EAAK,EAAGF,EAAI9b,aACvB,IAAK,IAAInC,EAAI,EAAGA,EAAIie,EAAI9b,QAC3B+b,EAAIC,KAASF,EAAIje,IACrB,CACR,EAMA+6B,EAAaxd,UAAU8G,MAAQ,SAA4BU,GACnDiP,EAAKgC,SAASjR,KACdA,EAAQiP,EAAKkL,aAAana,EAAO,WACrC,IAAIxD,EAAMwD,EAAM5iB,SAAW,EAI3B,OAHA2G,KAAKosB,OAAO3T,GACRA,GACAzY,KAAK+3B,MAAM9F,EAAamG,iBAAkB3f,EAAKwD,GAC5Cjc,IACX,EAcAiyB,EAAaxd,UAAUf,OAAS,SAA6BuI,GACzD,IAAIxD,EAAMyS,EAAKsH,OAAO/zB,WAAWwd,GAIjC,OAHAjc,KAAKosB,OAAO3T,GACRA,GACAzY,KAAK+3B,MAAMI,EAAmB1f,EAAKwD,GAChCjc,IACX,EAUAiyB,EAAaD,Y,yCC9Eb,gBACA,UAyBa,IAAgB,IAvB7B,MAEEsG,aAA6B,CAE7BA,2BAA2BC,EAAiC9K,GAM1D,MAAM+K,EAAU,IAAI,EAAAC,QAAQhL,GAS5B,aALQ+K,EAAQE,UAAUH,GAKnB,IAAI,EAAAI,qBAAqBH,EAClC,E,sHC1BF,gBACA,UACA,UACA,UAEA,UACA,UAQa,EAAAI,gBAAkB,KAa7B,IAZoC,iBAAzB,EAAAC,IAAIpW,KAAKqW,aAA4B,EAAAD,IAAIpW,KAAKqW,YAAc,KACrE,EAAAD,IAAIpW,KAAKqW,YAAc,GAGI,kBAAlB,EAAAD,IAAIpW,KAAKsW,OAClB,EAAAF,IAAIpW,KAAKsW,MAAO,GAGY,kBAAnB,EAAAF,IAAIpW,KAAKuW,QAClB,EAAAH,IAAIpW,KAAKuW,OAAQ,GAGgB,iBAAxB,EAAAH,IAAIpW,KAAKwW,aAA4B1xB,OAAO4lB,UAAU,EAAA0L,IAAIpW,KAAKwW,aAAe,EAAAJ,IAAIpW,KAAKwW,YAAc,EAAG,CACjH,MAAMC,EAA0C,oBAAdvwB,UAA4B,EAAAwwB,OAAO9/B,OAASsP,UAAU0D,oBACxF,EAAAwsB,IAAIpW,KAAKwW,WAAa5xB,KAAK4E,IAAI,EAAG5E,KAAKuM,MAAMslB,GAAsB,GAAK,G,GAqC/D,EAAAE,YAAc,IAjC3B,MACEd,aAEE,EAAAM,wBAGM,EAAAS,UACR,CAGAf,2BAA2BC,EAAiC9K,GAE1D,IAAIn3B,EACJ,GAA4B,iBAAjBiiC,EACT,GAAqB,oBAAVtrB,MAET3W,QAAe,EAAAgjC,UAAU,EAAAngC,SAAV,CAAoBo/B,OAC9B,CAEL,MAAMz9B,QAAiBmS,MAAMsrB,GACvBlrB,QAAoBvS,EAASuS,cACnC/W,EAAS,IAAI4C,WAAWmU,E,MAG1B/W,EAASiiC,EAGX,MAAMgB,EAAU,IAAI,EAAAC,qCAEpB,aADMD,EAAQb,UAAUpiC,EAAQm3B,GACzBn2B,QAAQiW,QAAQgsB,EACzB,E,8ZC1DF,aACA,gBAE+B,CAC7B,MAAME,EAAgB,UACtB,EAAAC,gBAAgB,QAASD,GAAgB,G,CAEb,CAC5B,MAAML,EAAc,oBACpB,EAAAM,gBAAgB,MAAON,EAAa,IACpC,EAAAM,gBAAgB,OAAQN,EAAa,IACrC,EAAAM,gBAAgB,UAAWN,EAAa,E,kHChB1C,MAAMO,EACJzL,YAAYO,GACV32B,OAAOC,OAAOiI,KAAMyuB,EACtB,CAGWmL,eAKT,OAJK55B,KAAK65B,YACR75B,KAAK65B,UACD/hC,OAAOgiC,oBAAoB95B,MAAM+5B,OAAOC,KAAI/5B,GAAQ,GAAID,KAAiCC,OAASmU,KAAK,MAEtGpU,KAAK65B,SACd,EAOW,EAAAI,4BAAkExL,GAC3E,IAAIkL,EAA0BlL,E,kGCnBlC,gBAEA,UACA,UACA,UAEA,IAAOyL,EAAS,EAAAC,YAAYC,aAAaC,IAqBzC,MAAaC,EACXpM,YAAYqM,GAEV,GADAv6B,KAAKw6B,YAAc,IAAIC,IACnBF,QAAiD,CACnD,IAAK,MAAMG,KAAQH,EACbG,aAAgB,EAAA/P,KAAKW,eACvBtrB,KAAKw6B,YAAYvvB,IAAIyvB,EAAKz6B,KAAM,CAACq6B,EAAUK,SAASD,GAAOJ,EAAUM,QAAQF,KACpEA,aAAgBR,EAAOI,WAChCt6B,KAAKw6B,YAAYvvB,IAAIyvB,EAAKz6B,OAAS,CAACq6B,EAAUK,SAASD,GAAOJ,EAAUM,QAAQF,KAGpF,GAAI16B,KAAKw6B,YAAYpiB,KAAOmiB,EAAWlhC,OACrC,MAAM,IAAImF,MAAM,6B,CAGtB,CAEAyM,IAAIqkB,EAAavD,EAA0B9P,GACzCjc,KAAKw6B,YAAYvvB,IAAIqkB,EAAK,CAACrT,EAAO8P,GACpC,CACA8O,OAAOvL,GACLtvB,KAAKw6B,YAAYK,OAAOvL,EAC1B,CACAwL,SAASxL,EAAavS,GACpB,OAAO/c,KAAK4H,IAAI0nB,EAAK,QAASvS,EAChC,CAEAge,OAAOzL,EAAavS,GAClB,OAAO/c,KAAK4H,IAAI0nB,EAAK,MAAOvS,EAC9B,CAEAie,UAAU1L,EAAavS,GACrB,OAAO/c,KAAK4H,IAAI0nB,EAAK,SAAUvS,EACjC,CAEAke,UAAU3L,EAAavS,GACrB,OAAO/c,KAAK4H,IAAI0nB,EAAK,SAAUvS,EACjC,CAEAme,UAAU5L,EAAavS,GACrB,OAAO/c,KAAK4H,IAAI0nB,EAAK,SAAUvS,EACjC,CAEAoe,QAAQ7L,EAAavS,GACnB,OAAO/c,KAAK4H,IAAI0nB,EAAK,OAAQvS,EAC/B,CAEAqe,WAAW9L,EAAavS,GACtB,OAAO/c,KAAK4H,IAAI0nB,EAAK,UAAWvS,EAClC,CAEAse,WAAW/L,EAAavS,GACtB,OAAO/c,KAAK4H,IAAI0nB,EAAK,UAAWvS,EAClC,CAEQnV,IACJ0nB,EAAavD,EAA0BhP,GACzC,MAAMue,EAAet7B,KAAKw6B,YAAY5yB,IAAI0nB,GAC1C,QAAqBtc,IAAjBsoB,EAA4B,CAC9B,QAAqBtoB,IAAjB+J,EACF,OAAOA,EAET,MAAM,IAAIve,MAAM,iCAAiC8wB,I,CAEnD,GAAIgM,EAAa,KAAOvP,EACtB,MAAM,IAAIvtB,MAAM,2BAA2ButB,aAAgBuP,EAAa,MAE1E,OAAOA,EAAa,EACtB,CAEQC,eAAeb,GACrB,MAAM3O,EAAO2O,aAAgB,EAAA/P,KAAKW,eAAiB,EAAOS,KAAQ2O,EAA0B3O,OAC5F,OAAQA,GACN,KAAK,EAAApB,KAAKW,eAAe2C,cAAcuN,MACrC,MAAO,QACT,KAAK,EAAA7Q,KAAKW,eAAe2C,cAAcwN,IACrC,MAAO,MACT,KAAK,EAAA9Q,KAAKW,eAAe2C,cAAcyN,OACrC,MAAO,SACT,KAAK,EAAA/Q,KAAKW,eAAe2C,cAAc0N,OACrC,MAAO,SACT,KAAK,EAAAhR,KAAKW,eAAe2C,cAAc2N,OACrC,MAAO,SACT,KAAK,EAAAjR,KAAKW,eAAe2C,cAAc4N,KACrC,MAAO,OACT,KAAK,EAAAlR,KAAKW,eAAe2C,cAAc6N,QACrC,MAAO,UACT,KAAK,EAAAnR,KAAKW,eAAe2C,cAAc8N,QACrC,MAAO,UACT,QACE,MAAM,IAAIv9B,MAAM,wCAAwC,EAAAmsB,KAAKW,eAAe2C,cAAclC,MAEhG,CAEQwP,gBAAgBb,GACtB,MAAMsB,EAAWtB,aAAgB,EAAA/P,KAAKW,eAAiBoP,EAAK3O,KAAQ2O,EAA0B3O,OAC9F,GAAIiQ,IAAa,EAAArR,KAAKW,eAAe2C,cAAcgO,OAASD,IAAa,EAAArR,KAAKW,eAAe2C,cAAciO,OACzG,MAAM,IAAI19B,MAAM,wCAGlB,MAAMyd,EAAQjc,KAAKm8B,gBAAgBzB,GAGnC,GAAIsB,IAAa,EAAArR,KAAKW,eAAe2C,cAAcwN,KAAO,EAAAW,SAASvZ,OAAO5G,GACxE,OAAO,EAAAmgB,SAASC,aAAapgB,GAI/B,GAAI+f,IAAa,EAAArR,KAAKW,eAAe2C,cAAc4N,KAAM,CACvD,MAAMS,EAAOrgB,EACPsgB,EAAwB,IAAIvxB,MAAcsxB,EAAIjjC,QAEpD,IAAK,IAAInC,EAAI,EAAGA,EAAIolC,EAAIjjC,OAAQnC,IAAK,CACnC,MAAMslC,EAAYF,EAAIplC,GACtBqlC,EAAYrlC,GAAK,EAAAklC,SAASC,aAAaG,E,CAGzC,OAAOD,C,CAIT,GAAIP,IAAa,EAAArR,KAAKW,eAAe2C,cAAc0N,OACjD,OAAOjB,aAAgB,EAAA/P,KAAKW,eAAiB,EAAAoG,OAAO+K,UAAUxgB,GACjB,EAAAyV,OAAOgL,cAAczgB,GAIpE,GAAI+f,IAAa,EAAArR,KAAKW,eAAe2C,cAAc8N,QAAS,CAC1D,GAAIrB,aAAgB,EAAA/P,KAAKW,eAEvB,OADqBrP,EACD+d,KAAI/d,GAAS,EAAAyV,OAAO+K,UAAUxgB,KAC7C,GAAIye,aAAgBR,EAAOI,UAEhC,OADqBre,EACD+d,KAAI/d,GAAS,EAAAyV,OAAOgL,cAAczgB,I,CAK1D,GAAI+f,IAAa,EAAArR,KAAKW,eAAe2C,cAAcyN,QAG7ChB,aAAgB,EAAA/P,KAAKW,eAAgB,CACvC,MAAMqR,EAAa1gB,EACnB,OAAO,EAAA2gB,iBAAiBD,E,CAK5B,OAAIX,IAAa,EAAArR,KAAKW,eAAe2C,cAAc6N,SAG7CpB,aAAgB,EAAA/P,KAAKW,eACHrP,EACD+d,IAAI,EAAA4C,kBAIpB3gB,CACT,CAEQsf,uBAAuBb,GAC7B,OAAOA,aAAiB,EAAA/P,KAAmB,eAAI3qB,KAAK68B,8BAA8BnC,GACnC16B,KAAK88B,6BAA6BpC,EACnF,CAEQa,qCAAqCb,GAC3C,OAAQA,EAAK3O,MACX,KAAK,EAAApB,KAAKW,eAAe2C,cAAcuN,MACrC,OAAOd,EAAKnjC,EACd,KAAK,EAAAozB,KAAKW,eAAe2C,cAAcwN,IACrC,OAAOf,EAAKxjC,EACd,KAAK,EAAAyzB,KAAKW,eAAe2C,cAAcyN,OACrC,OAAOhB,EAAKtjC,EACd,KAAK,EAAAuzB,KAAKW,eAAe2C,cAAc0N,OACrC,OAAOjB,EAAKhkC,EACd,KAAK,EAAAi0B,KAAKW,eAAe2C,cAAcgO,MACrC,OAAOvB,EAAK1iC,EACd,KAAK,EAAA2yB,KAAKW,eAAe2C,cAAc2N,OACrC,OAAOlB,EAAKlP,OACd,KAAK,EAAAb,KAAKW,eAAe2C,cAAc4N,KACrC,OAAOnB,EAAKjP,KACd,KAAK,EAAAd,KAAKW,eAAe2C,cAAc6N,QACrC,OAAOpB,EAAKhP,QACd,KAAK,EAAAf,KAAKW,eAAe2C,cAAc8N,QACrC,OAAOrB,EAAK/O,QACd,KAAK,EAAAhB,KAAKW,eAAe2C,cAAciO,OACrC,OAAOxB,EAAK9O,OACd,QACE,MAAM,IAAIptB,MAAM,+BAA+B,EAAAmsB,KAAKW,eAAe2C,cAAcyM,EAAK3O,SAE5F,CAEQwP,oCAAoCb,GAC1C,OAAQA,EAAK3O,QACX,KAAKmO,EAAOjM,cAAcuN,MACxB,OAAOd,EAAKnjC,IACd,KAAK2iC,EAAOjM,cAAcwN,IACxB,OAAOf,EAAKxjC,IACd,KAAKgjC,EAAOjM,cAAcyN,OACxB,OAAOhB,EAAKtjC,IACd,KAAK8iC,EAAOjM,cAAc0N,OACxB,OAAOjB,EAAKhkC,IACd,KAAKwjC,EAAOjM,cAAcgO,MACxB,OAAOvB,EAAK1iC,IACd,KAAKkiC,EAAOjM,cAAc2N,OACxB,OAAOlB,EAAKqC,cACd,KAAK7C,EAAOjM,cAAc4N,KAAM,CAC9B,MAAMpQ,EAAO,GACb,IAAK,IAAIv0B,EAAI,EAAGA,EAAIwjC,EAAKsC,aAAc9lC,IACrCu0B,EAAK/qB,KAAKg6B,EAAKjP,KAAKv0B,IAEtB,OAAOu0B,C,CAET,KAAKyO,EAAOjM,cAAc6N,QAAS,CACjC,MAAMpQ,EAAU,GAChB,IAAK,IAAIx0B,EAAI,EAAGA,EAAIwjC,EAAKuC,gBAAiB/lC,IACxCw0B,EAAQhrB,KAAKg6B,EAAKhP,QAAQx0B,IAE5B,OAAOw0B,C,CAET,KAAKwO,EAAOjM,cAAc8N,QAAS,CACjC,MAAMpQ,EAAU,GAChB,IAAK,IAAIz0B,EAAI,EAAGA,EAAIwjC,EAAKwC,gBAAiBhmC,IACxCy0B,EAAQjrB,KAAKg6B,EAAK/O,QAAQz0B,IAE5B,OAAOy0B,C,CAST,QACE,MAAM,IAAIntB,MAAM,+BAA+B07B,EAAOjM,cAAcyM,EAAK3O,WAE/E,EA7OF,a,iHC5BA,gBA0EMoR,EAAsC,IAAI1C,IAgChDnC,eAAe8E,EAAeC,GAC5B,MAAMC,EAAa,EAAAC,QAEnB,QAAuC,IAA5BD,EAAWD,IAexB,SAAmB3f,GAEjB,MAAMvmB,EAAIumB,EAGV,MACI,eAAgBvmB,GAA6B,mBAAjBA,EAAEqmC,YAC9B,yBAA0BrmC,GAAuC,mBAA3BA,EAAEsmC,sBACxC,YAAatmC,GAA0B,mBAAdA,EAAEumC,OAMjC,CA7BwDC,CAAUL,EAAWD,IAAe,CACxF,MAAME,EAAUD,EAAWD,GAC3B,IAAIO,EAAOL,EAAQC,aAInB,GAHoB,iBAATI,GAAqB,SAAUA,IACxCA,QAAaA,GAEXA,EAEF,OADAT,EAAclyB,IAAIoyB,EAAaE,GACxBA,C,CAKb,CA9Ca,EAAAA,QAAqC,CAChDM,MAAO,IAAI,EAAAC,cAOb,iBAAOxF,eAAeyF,EAAeC,GACnC,IAAKA,EACH,OAAOD,EAAe,CAAC,UAClB,CACL,MAAME,EAAwB,iBAATD,EAAoB,CAACA,GAAQA,EAElD,IAAK,MAAMX,KAAeY,EAAO,CAC/B,MAAM7a,EAAQ+Z,EAAcv1B,IAAIy1B,GAChC,GAAIja,EACF,OAAOA,EAGT,MAAMma,QAAgBH,EAAeC,GACrC,GAAIE,EACF,OAAOA,C,EAKb,MAAM,IAAI/+B,MAAM,8BAClB,C,qGCxGA,gBAGA,UAGA,UAEA,UAOA,qBAGM0/B,gBACF,OAAO,EAAArF,IAAIgF,MAAMK,SACnB,CACIA,cAAUjiB,GACZ,EAAA4c,IAAIgF,MAAMK,UAAYjiB,CACxB,CAEIkiB,yBACF,OAAO,EAAAtF,IAAIgF,MAAMM,kBACnB,CACIA,uBAAmBliB,GACrB,EAAA4c,IAAIgF,MAAMM,mBAAqBliB,CACjC,CAEImiB,uBACF,OAAO,EAAAvF,IAAIgF,MAAMO,gBACnB,CACIA,qBAAiBniB,GACnB,EAAA4c,IAAIgF,MAAMO,iBAAmBniB,CAC/B,CAEIoiB,WACF,OAAO,EAAAxF,IAAIgF,MAAMQ,IACnB,CACIA,SAAKpiB,GACP,EAAA4c,IAAIgF,MAAMQ,KAAOpiB,CACnB,CAEIqc,YACF,OAAO,EAAAO,IAAIgF,MAAMvF,KACnB,CACIA,UAAMrc,GACR,EAAA4c,IAAIgF,MAAMvF,MAAQrc,CACpB,CAEAuhB,aACE,IAsBE,OArBAx9B,KAAKs+B,UAAY,EAAAC,mBAAmBv+B,KAAKk+B,WACF,iBAA5Bl+B,KAAKm+B,qBACdn+B,KAAKm+B,mBAAqB,IAES,iBAA1Bn+B,KAAKo+B,mBACdp+B,KAAKo+B,iBAAmB,QAED,kBAAdp+B,KAAKq+B,OACdr+B,KAAKq+B,MAAO,GAEY,kBAAfr+B,KAAKs4B,QACdt4B,KAAKs4B,OAAQ,GAGf,EAAAkG,OAAOC,WAAW,EAAA5F,KAElB,EAAA2F,OAAOE,QACH,eACA,gCAAgC1+B,KAAKs+B,sCACjCt+B,KAAKm+B,yCAAyCn+B,KAAKo+B,2BAA2Bp+B,KAAKq+B,gBACnFr+B,KAAKs4B,WACN,C,CACP,MAAOviC,GAEP,OADA,EAAAyoC,OAAOG,QAAQ,eAAgB,sCAAsC5oC,MAC9D,C,CAEX,CACA0nC,qBAAqBmB,GACnB,OAAO,IAAI,EAAAC,oBAAoB7+B,KAAM4+B,EACvC,CACAlB,UACE19B,KAAKs+B,UAAUZ,SACjB,E,sGCvFF,gBAEA,UACA,UACA,UAEA,UAMA,MAAaoB,UAAsB,EAAAC,QAGjC7Q,YAAY0Q,GACVI,MAAMJ,EACR,CACAK,eACE,OAAO,OAAP,8FACKj/B,KAAKk/B,kBACLl/B,KAAKm/B,kBACLn/B,KAAKo/B,SACLp/B,KAAKq/B,aAELr/B,KAAKs/B,sBACLt/B,KAAKu/B,6BACLv/B,KAAKw/B,2BAEZ,CACAC,iBACE,MAAO,CAAC,CACV,CAKUP,iBAER,MAAO,CACLA,eAAgB,IAAI,EAAAQ,eAAe,2PASvC,CAMUP,iBAER,MAAO,CACLA,eAAgB,IAAI,EAAAO,eAAe,qPASvC,CAMUF,2BACR,MAAMG,EAAe3/B,KAAK4+B,QAAQgB,oBAClC,OAAID,EAAaE,SACR7/B,KAAK8/B,+BAA+BH,GAEpC3/B,KAAK+/B,iCAAiCJ,EAEjD,CAKUG,+BAA+BH,GACvC,MAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAaQ,MAAOR,EAAaS,QAChDvf,EAA2C,CAAC,EAC5Cwf,EAAW,kBACjB,OAAQL,EAAS3mC,QACf,KAAK,EACHwnB,EAAOwf,GAAYrgC,KAAKsgC,wBACxB,MACF,KAAK,EACHzf,EAAOwf,GAAYrgC,KAAKugC,wBAAwBP,EAAsBE,GACtE,MACF,KAAK,EACHrf,EAAOwf,GAAYrgC,KAAKwgC,wBAAwBR,EAA8BE,GAC9E,MACF,KAAK,EACHrf,EAAOwf,GACHrgC,KAAKygC,wBAAwBT,EAAsCE,GACvE,MACF,QACErf,EAAOwf,GAAYrgC,KAAK0gC,wBAAwBV,EAAUE,GAE9D,MAGMS,EAA4B,+CAHrB,EAAAC,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAKjCrD,+BAKX,OADA3N,EAAkC,oBAAI,IAAI,EAAA6e,eAAeiB,GAClD9f,CACT,CAKUkf,iCAAiCJ,GACzC,MAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAaQ,MAAOR,EAAaS,QAChDvf,EAA2C,CAAC,EAC5Cwf,EAAW,kBACjB,OAAQL,EAAS3mC,QACf,KAAK,EACHwnB,EAAOwf,GAAYrgC,KAAKsgC,wBACxB,MACF,KAAK,EACHzf,EAAOwf,GAAYrgC,KAAK6gC,0BAA0Bb,EAAsBE,GACxE,MACF,KAAK,EACHrf,EAAOwf,GACHrgC,KAAK8gC,0BAA0Bd,EAA8BE,GACjE,MACF,KAAK,EACHrf,EAAOwf,GACHrgC,KAAK+gC,0BAA0Bf,EAAsCE,GACzE,MACF,KAAK,EACHrf,EAAOwf,GAAYrgC,KAAKghC,0BACpBhB,EAA8CE,GAClD,MACF,KAAK,EACHrf,EAAOwf,GAAYrgC,KAAKihC,0BACpBjB,EAAsDE,GAC1D,MACF,KAAK,EACHrf,EAAOwf,GAAYrgC,KAAKkhC,0BACpBlB,EAA8DE,GAClE,MACF,QACE,MAAM,IAAI1hC,MAAM,sCAAsCwhC,EAAS3mC,UAEnE,MAGM8nC,EAAyB,oDAHlB,EAAAP,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAK/BrD,gDAKb,OADA3N,EAA+B,iBAAI,IAAI,EAAA6e,eAAeyB,GAC/CtgB,CACT,CAKUyf,wBACR,OAAO,IAAI,EAAAZ,eAAe,oEAK5B,CAKUa,wBAAwB3O,EAAiBwP,GACjD,MAAMC,EAAiBD,EACvB,IAAIE,EAAS,GACb,OAA0B,IAAtBD,EAAe,IACjBC,EAAS,iFAE4BD,EAAe,gCAG7C,IAAI,EAAA3B,eAAe4B,IAGF,IAAtBD,EAAe,IACjBC,EAAS,iFAE4BD,EAAe,gCAG7C,IAAI,EAAA3B,eAAe4B,KAG5BA,EAAS,6HAG2BD,EAAe,OAAOA,EAAe,6CACxCA,EAAe,uCAGzC,IAAI,EAAA3B,eAAe4B,GAC5B,CAKUd,wBAAwB5O,EAAyBwP,GACzD,IAAIE,EAAS,GACb,GAAI,EAAAC,UAAUC,YAAY5P,EAAOwP,GAM/B,OALAE,EAAS,uFAEkCF,EAAS,OAAOA,EAAS,2BAG7D,IAAI,EAAA1B,eAAe4B,GAG5B,MAAMD,EAAiBD,EAEjBK,EAAqBp6B,KAAKuM,KAAKge,EAAM,GAAK,GAyBhD,OAdA0P,EAAS,8HAG0BD,EAAe,OAAOA,EAAe,+CAEvCA,EAAe,4GAGpBI,2CACCA,0DAKtB,IAAI,EAAA/B,eAAe4B,EAC5B,CAKUb,wBAAwB7O,EAAiCwP,GACjE,MAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCK,EAAqBp6B,KAAKuM,KAAKge,EAAM,GAAK,GAC1C8P,EAAgBD,EAAqBp6B,KAAKuM,KAAKge,EAAM,GAAK,GAC1D0P,EAAS,8HAGoBD,EAAe,OAAOA,EAAe,6CACvCA,EAAe,iDAExBK,8BACHA,8FAGOD,2CACCA,6DAK7B,OAAO,IAAI,EAAA/B,eAAe4B,EAC5B,CAKUZ,wBAAwB9O,EAA0BwP,GAC1D,MAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IAExCK,EAAqBp6B,KAAKuM,KAAKge,EAAMA,EAAMv4B,OAAS,GAAK,GACzDqoC,EAAgBD,EAAqBp6B,KAAKuM,KAAKge,EAAMA,EAAMv4B,OAAS,GAAK,GAC/E,IAAIsoC,EAAiBD,EACjBE,EAAU,GACVC,EAAS,UAEb,IAAK,IAAIzpC,EAAI,EAAGA,EAAIw5B,EAAMv4B,OAAS,EAAGjB,IACpCupC,GAAkB/P,EAAMA,EAAMv4B,OAASjB,EAAI,GAC3CwpC,EAAU,gBACHxpC,eAAeupC,uBACVvpC,OAAOupC,WACjBC,EACFC,EAAS,IAAIzpC,MAAQypC,EAEvB,MAAMP,EAAS,eACP1P,EAAMv4B,iHAEmBgoC,EAAe,OAAOA,EAAe,2CACvCA,EAAe,+BAExCO,gCAEgBF,4BACHA,0FAGOD,yCACCA,6BAEV7P,EAAMv4B,UAAUwoC,qBAGjC,OAAO,IAAI,EAAAnC,eAAe4B,EAC5B,CAKUT,0BAA0BjP,EAAiBwP,GACnD,MAAME,EAAS,4HAGoBF,EAAS,OAAOA,EAAS,wCAChCA,EAAS,sCAGrC,OAAO,IAAI,EAAA1B,eAAe4B,EAC5B,CAKUR,0BAA0BlP,EAAyBwP,GAC3D,MAAME,EAAS,8HAGoBF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+CAClBxP,EAAM,sCACFA,EAAM,wDAIlC,OAAO,IAAI,EAAA8N,eAAe4B,EAC5B,CAKUP,0BAA0BnP,EAAiCwP,GACnE,IAAIE,EAAS,GACb,MAAMQ,EAAOlQ,EAAMv4B,OAEnB,IAAI0oC,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAI/2B,MAAM82B,EAAO,GAC3BC,EAAQD,EAAO,GAAKlQ,EAAMkQ,EAAO,GACjC,IAAK,IAAI5qC,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B6qC,EAAQ7qC,GAAK6qC,EAAQ7qC,EAAI,GAAK06B,EAAM16B,EAAI,GAE1C,MAAM8qC,EAAkB,CAAC,IAAK,IAAK,KAC7BC,EACFF,EACK/H,KAAI,CAACkI,EAAQhrC,IAKL,OAJc8qC,EAAgB9qC,gBAAgBgrC,MACvChrC,IAAM6qC,EAAQ1oC,OAAS,EACjC,OAAO2oC,EAAgB9qC,EAAI,gBAAgB8qC,EAAgB9qC,QAAQgrC,IACnE,YAAYF,EAAgB9qC,QAAQgrC,SAGzC9tB,KAAK,IAWd,OATAktB,EAAS,8HAG0BF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+BAClCa,yDAID,IAAI,EAAAvC,eAAe4B,EAC5B,CAKUN,0BAA0BpP,EAAyCwP,GAE3E,IAAIE,EAAS,GACb,MAAMQ,EAAOlQ,EAAMv4B,OAEnB,IAAI0oC,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAI/2B,MAAM82B,EAAO,GAC3BC,EAAQD,EAAO,GAAKlQ,EAAMkQ,EAAO,GACjC,IAAK,IAAI5qC,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B6qC,EAAQ7qC,GAAK6qC,EAAQ7qC,EAAI,GAAK06B,EAAM16B,EAAI,GAE1C,MAAM8qC,EAAkB,CAAC,IAAK,IAAK,IAAK,MAClCC,EACFF,EACK/H,KAAI,CAACkI,EAAQhrC,IAKL,OAJc8qC,EAAgB9qC,gBAAgBgrC,MACvChrC,IAAM6qC,EAAQ1oC,OAAS,EACjC,OAAO2oC,EAAgB9qC,EAAI,gBAAgB8qC,EAAgB9qC,QAAQgrC,IACnE,YAAYF,EAAgB9qC,QAAQgrC,SAGzC9tB,KAAK,IAWd,OATAktB,EAAS,4HAG0BF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+BAClCa,6DAID,IAAI,EAAAvC,eAAe4B,EAC5B,CAKUL,0BAA0BrP,EAAiDwP,GAEnF,IAAIE,EAAS,GACb,MAAMQ,EAAOlQ,EAAMv4B,OAEnB,IAAI0oC,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAI/2B,MAAM82B,EAAO,GAC3BC,EAAQD,EAAO,GAAKlQ,EAAMkQ,EAAO,GACjC,IAAK,IAAI5qC,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B6qC,EAAQ7qC,GAAK6qC,EAAQ7qC,EAAI,GAAK06B,EAAM16B,EAAI,GAE1C,MAAM8qC,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,MACxCC,EACFF,EACK/H,KAAI,CAACkI,EAAQhrC,IAKL,OAJc8qC,EAAgB9qC,gBAAgBgrC,MACvChrC,IAAM6qC,EAAQ1oC,OAAS,EACjC,OAAO2oC,EAAgB9qC,EAAI,gBAAgB8qC,EAAgB9qC,QAAQgrC,IACnE,YAAYF,EAAgB9qC,QAAQgrC,SAGzC9tB,KAAK,IAWd,OATAktB,EAAS,4HAG0BF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+BAClCa,iEAID,IAAI,EAAAvC,eAAe4B,EAC5B,CAKUJ,0BAA0BtP,EAAyDwP,GAG3F,IAAIE,EAAS,GACb,MAAMQ,EAAOlQ,EAAMv4B,OAEnB,IAAI0oC,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAI/2B,MAAM82B,EAAO,GAC3BC,EAAQD,EAAO,GAAKlQ,EAAMkQ,EAAO,GACjC,IAAK,IAAI5qC,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B6qC,EAAQ7qC,GAAK6qC,EAAQ7qC,EAAI,GAAK06B,EAAM16B,EAAI,GAE1C,MAAM8qC,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,MAC9CC,EACFF,EACK/H,KAAI,CAACkI,EAAQhrC,IAKL,OAJc8qC,EAAgB9qC,gBAAgBgrC,MACvChrC,IAAM6qC,EAAQ1oC,OAAS,EACjC,OAAO2oC,EAAgB9qC,EAAI,gBAAgB8qC,EAAgB9qC,QAAQgrC,IACnE,YAAYF,EAAgB9qC,QAAQgrC,SAGzC9tB,KAAK,IAWd,OATAktB,EAAS,yHAGyBF,EAAS,OAAOA,EAAS,4CAC3BA,EAAS,8BAClCa,kEAIA,IAAI,EAAAvC,eAAe4B,EAC5B,CAKUhC,qBACR,MAAMze,EAA2C,CAAC,EAClD,IAAIwf,EAAW,aACfxf,EAAOwf,GAAY,IAAI,EAAAX,eAAe,yWAStCW,EAAW,iBACXxf,EAAOwf,GAAY,IAAI,EAAAX,eAAe,6RAQtCW,EAAW,iBACXxf,EAAOwf,GAAY,IAAI,EAAAX,eAAe,6VAQtCW,EAAW,iBACXxf,EAAOwf,GAAY,IAAI,EAAAX,eAAe,kZAUtCW,EAAW,gBACX,MAAM8B,EAAO,EAAAvB,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAK5C,OAJAhR,EAAOwf,GAAY,IAAI,EAAAX,eAAe,0FAErByC,EAAKC,+CAEfvhB,CACT,CAKU0e,4BACR,MAAM1e,EAA2C,CAAC,EAC5C8e,EAAe3/B,KAAK4+B,QAAQgB,oBAsBlC,OArBA5/B,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAACw/B,EAAarrC,KACxD,MAAMsrC,EAAcxiC,KAAK4+B,QAAQ6D,oBAAoBvrC,GAC/CmpC,EAAW,EAAAqC,2CAA2CH,GACxDC,EAAY3C,SACdhf,EAAOwf,GAAYrgC,KAAK2iC,0BAA0BtC,EAAUkC,EAAaC,GAEzE3hB,EAAOwf,GAAYrgC,KAAK4iC,4BAA4BvC,EAAUkC,EAAaC,GAG7E,MAAMK,EAAmB,EAAAC,sDAAsDP,GAC3EC,EAAYvC,cAAc5mC,QAAUsmC,EAAaM,cAAc5mC,SAC7DmpC,EAAY3C,SACdhf,EAAOgiB,GACH7iC,KAAK+iC,+BAA+BF,EAAkBL,EAAa7C,EAAc4C,GAErF1hB,EAAOgiB,GACH7iC,KAAKgjC,iCAAiCH,EAAkBL,EAAa7C,EAAc4C,G,IAKtF1hB,CACT,CAKUkiB,+BACN1C,EAAkBmC,EAA4B7C,EAA6B1/B,GAC7E,MAAMgjC,EAAUT,EAAYvC,cACtBD,EAAWL,EAAaM,cACxBiD,EAAUjjC,EACVkjC,EAAiB,EAAAT,2CAA2CQ,GAE5DE,EAASH,EAAQ5pC,OACjBgqC,EAAUrD,EAAS3mC,OAEnBiqC,EAAgB,EAAAC,cAAcC,iBAAiBP,EAASjD,GAExDjU,EAAO,EAAA0X,kBAAkBJ,GACzBK,EAAWL,EAAUD,EAC3B,IAAIO,EACJ,MAAMC,EAAS,EAAAC,gBAGbF,EADa,IAAXP,EACc,GACPC,EAAU,GAAKC,EAAcjqC,QAAU,EAChC,cAEAiqC,EAActJ,KAAIpiC,GAAK,UAAUgsC,EAAOhsC,EAAI8rC,YAAkBtvB,KAAK,MAErF,IAAI0vB,EAAwB,GAE1BA,EADET,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQjJ,KAAI,CAAC5iC,EAAGF,IAAM,UAAU0sC,EAAO1sC,EAAIwsC,OAAatvB,KAAK,MAGvF,IAAIoa,EAAS,sBACb,MACMuV,EAA2B,IADlB,EAAAC,UAAU5rB,KAAK6qB,GAGxBgB,EAA6B,IADnB,EAAAD,UAAU5rB,KAAK4nB,GAG/B,GAAe,IAAXoD,GAAiBW,GAAkBE,GAIhC,GAAIF,IAAkBE,EAEzBzV,EADc,IAAZ6U,EACO,2EAIA,yDAIN,GAAIC,EAAcjqC,OAAQ,CAC/B,MAAM6qC,EAAOd,EAAS,EAChBe,EAAOf,EAAS,EAElBE,EAAchpC,QAAQ4pC,IAAS,GAAKZ,EAAchpC,QAAQ6pC,IAAS,EACrE3V,EAAS,8BACA8U,EAAchpC,QAAQ4pC,IAAS,EACxC1V,EAAS,2EAEA8U,EAAchpC,QAAQ6pC,IAAS,IACxC3V,EAAS,+C,OAvBXA,EAAS,iEA2BX,MAKM8S,EAAS,gBACNjB,kBACHtU,yEANqB6X,EAAOP,EAAU,uBAC/BO,EAAOP,EAAU,eAAeO,EAAOP,EAAU,uBACjDO,EAAOP,EAAU,kCAMxBM,iCACmBR,KAAkBW,gBACrCtV,mBAGN,OAAO,IAAI,EAAAkR,eAAe4B,EAAQ,CAAC,+BACrC,CAKU0B,iCACN3C,EAAkBmC,EAA4B7C,EAA6B1/B,GAC7E,MAAMigC,EAAc,CAACP,EAAaQ,MAAOR,EAAaS,QAChDgE,EAAa,CAAC5B,EAAYrC,MAAOqC,EAAYpC,QAC7CgD,EAASZ,EAAYvC,cAAc5mC,OACnCgqC,EAAU1D,EAAaM,cAAc5mC,OACrC4pC,EAAUT,EAAYvC,cACtBD,EAAWL,EAAaM,cACxBkD,EAAiB,EAAAT,2CAA2CziC,GAElE,GAAImjC,IAAWC,GAAW,EAAA9B,UAAUC,YAAY4C,EAAYlE,GAAc,CACxE,MAAMoB,EAAS,qBACHjB,2CACiBpgC,wCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,6B,CAGrC,MAAMvV,EAAO,EAAA0X,kBAAkBJ,GACzBC,EAAgB,EAAAC,cAAcC,iBAAiBP,EAASjD,GACxD0D,EAAWL,EAAUD,EAC3B,IAAIO,EACJ,MAAMC,EAAS,EAAAC,gBAGbF,EADa,IAAXP,EACc,GACPC,EAAU,GAAKC,EAAcjqC,QAAU,EAChC,cAEAiqC,EAActJ,KAAIpiC,GAAK,UAAUgsC,EAAOhsC,EAAI8rC,YAAkBtvB,KAAK,MAErF,IAAI0vB,EAAwB,GAE1BA,EADET,EAAU,GAAKD,EAAS,EACF,SAEAZ,EAAYvC,cAAcjG,KAAI,CAAC5iC,EAAGF,IAAM,UAAU0sC,EAAO1sC,EAAIwsC,OAAatvB,KAAK,MAEzG,MAAMktB,EAAS,mBACHjB,oBACJtU,4CACA4X,uBACOR,KAAkBW,yBAGjC,OAAO,IAAI,EAAApE,eAAe4B,EAAQ,CAAC,+BACrC,CAKUqB,0BAA0BtC,EAAkBpgC,EAAcuiC,GAClE,OAAQA,EAAYvC,cAAc5mC,QAChC,KAAK,EACH,OAAO2G,KAAKqkC,uBAAuBhE,EAAUpgC,GAC/C,KAAK,EACH,OAAOD,KAAKskC,mBAAmBjE,EAAUpgC,EAAMuiC,GACjD,KAAK,EACH,OAAOxiC,KAAKukC,mBAAmBlE,EAAUpgC,EAAMuiC,GACjD,KAAK,EACH,OAAOxiC,KAAKwkC,mBAAmBnE,EAAUpgC,EAAMuiC,GACjD,QACE,OAAOxiC,KAAKykC,mBAAmBpE,EAAUpgC,EAAMuiC,GAErD,CAKUI,4BAA4BvC,EAAkBpgC,EAAcuiC,GACpE,MAAM5Q,EAAQ4Q,EAAYvC,cAC1B,OAAQrO,EAAMv4B,QACZ,KAAK,EACH,OAAO2G,KAAK0kC,yBAAyBrE,EAAUpgC,EAAMuiC,GACvD,KAAK,EACH,OAAOxiC,KAAK2kC,qBAAqBtE,EAAUpgC,EAAMuiC,GACnD,KAAK,EACH,OAAOxiC,KAAK4kC,qBAAqBvE,EAAUpgC,EAAMuiC,GACnD,KAAK,EACH,OAAOxiC,KAAK6kC,qBAAqBxE,EAAUpgC,EAAMuiC,GACnD,KAAK,EACH,OAAOxiC,KAAK8kC,qBAAqBzE,EAAUpgC,EAAMuiC,GACnD,KAAK,EACH,OAAOxiC,KAAK+kC,qBAAqB1E,EAAUpgC,EAAMuiC,GACnD,KAAK,EACH,OAAOxiC,KAAKglC,qBAAqB3E,EAAUpgC,EAAMuiC,GACnD,QAEE,MAAM,IAAIhkC,MAAM,yBAAyBozB,EAAMv4B,YAErD,CAKUgrC,uBAAuBhE,EAAkBpgC,GACjD,MACMqhC,EAAS,oBACFjB,6BAFA,EAAAO,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAGtBuQ,aAAaniC,qCAGnC,OAAO,IAAI,EAAAy/B,eAAe4B,EAC5B,CAKUgD,mBAAmBjE,EAAkBpgC,EAAcuiC,GAC3D,MAAMpB,EAAW,CAACoB,EAAYrC,MAAOqC,EAAYpC,QAC3CiB,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCe,EAAO,EAAAvB,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAOtCyP,EALgB,QAAQjB,0DAE1BgB,EAAe,OAAOA,EAAe,6BAC9Bc,EAAKC,aAAaniC,iBAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,8BACrC,CAKUiD,mBAAmBlE,EAAkBpgC,EAAcuiC,GAC3D,MAAM5Q,EAAQ4Q,EAAYvC,cACpBmB,EAAW,CAACoB,EAAYrC,MAAOqC,EAAYpC,QAC3C+B,EAAO,EAAAvB,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SACtCoT,EAAU7D,EAAS,GACnB8D,EAAU9D,EAAS,GAEzB,GAAgB,MAAZA,GAAoB,EAAAG,UAAUC,YAAY5P,EAAOwP,GAAW,CAC9D,MAAM+D,EAAgB,QAAQ9E,6EACiB6E,QAAcD,yBAClD9C,EAAKC,aAAaniC,mBAG7B,OAAO,IAAI,EAAAy/B,eAAeyF,E,CAE5B,MAAM9D,EAAiBD,EACjBgE,EAAe/9B,KAAKuM,KAAKge,EAAM,GAAK,GAKpC0P,EAJgB,QAAQjB,yDACDgB,EAAe,OAAOA,EAAe,OAAO+D,+BAC9DjD,EAAKC,aAAaniC,iBAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,8BACrC,CAKUkD,mBAAmBnE,EAAkBpgC,EAAcuiC,GAC3D,MAAM5Q,EAAQ4Q,EAAYvC,cACpBmB,EAAW,CAACoB,EAAYrC,MAAOqC,EAAYpC,QAC3CiB,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCe,EAAO,EAAAvB,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAE5C,GAAiB,IAAbD,EAAM,GAAU,CAClB,MAAMyT,EAAgBzT,EAAMr4B,MAAM,GAC5B+rC,EAAW,CAAC,EAAG,GACfC,EAAgB,EAAAC,kBAAkB5T,EAAOyT,GACzClyB,EAAS,CAAC,IAAK,MAAO,OAEtBsyB,EAAgCC,KAAKxjB,MAAMwjB,KAAKC,UAAUnD,IAChEiD,EAAexF,cAAgBsF,EAC/B,MAAMK,EAAiB5lC,KAAK2iC,0BAA0BtC,EAAUpgC,EAAMwlC,GAKhEnE,EAJgB,GAAGsE,EAAeC,2BACjCxF,gDACIA,KAAY,EAAAyF,kBAAkB3yB,EAAQmyB,iBAGjD,OAAO,IAAI,EAAA5F,eAAe4B,EAAQsE,EAAeG,a,CAEnD,MAAMd,EAAU5D,EAAe,GACzB6D,EAAU7D,EAAe,GAEzB+D,EAAe/9B,KAAKuM,KAAKge,EAAM,GAAK,GAOpC0P,EAJgB,QAAQjB,0EAExB6E,MAAYD,MAJIG,EAAe/9B,KAAKuM,KAAKge,EAAM,GAAK,OAIVwT,kCACrCjD,EAAKC,aAAaniC,WAE7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,8BACrC,CAIUmD,mBAAmBpE,EAAkBpgC,EAAcuiC,GAC3D,MAAM5Q,EAAQ4Q,EAAYvC,cACpB6B,EAAOlQ,EAAMv4B,OACb+nC,EAAW,CAACoB,EAAYrC,MAAOqC,EAAYpC,QAC3C+B,EAAO,EAAAvB,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAEtCwP,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxC6D,EAAU5D,EAAe,GACzB6D,EAAU7D,EAAe,GACzB+D,EAAe/9B,KAAKuM,KAAKge,EAAMkQ,EAAO,GAAK,GACjD,IAAIJ,EAAgB0D,EAAe/9B,KAAKuM,KAAKge,EAAMkQ,EAAO,GAAK,GAC3D3uB,EAAS,0BACTE,EAAQ,OAAOquB,mBAA+B0D,gBAClD,IAAK,IAAIhtC,EAAI,EAAGA,EAAI0pC,EAAO,EAAG1pC,IAC5B+a,EAAS,QAAQ/a,MAAQ+a,EACzBuuB,GAAiB9P,EAAMkQ,EAAO1pC,EAAI,GAClCib,EAAQ,IAAIjb,OAAOspC,OAAqBruB,EAE1C,MAOMiuB,EAPgB,QAAQjB,KAAYltB,2BAC1BE,gCACO6xB,uCACOA,0DACmBA,MAAYD,qBAClD9C,EAAKC,aAAaniC,iBAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAC5B,CAKUoD,yBAAyBrE,EAAkBpgC,EAAcuiC,GACjE,MAAOyC,EAASC,GAAW,CAAC1C,EAAYrC,MAAOqC,EAAYpC,QAC3D,GAAgB,IAAZ6E,GAA6B,IAAZC,EAAe,CAClC,MAAM5D,EAAS,qBACHjB,2CACiBpgC,qCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,6B,CAGrC,MAAMA,EAAS,mBACHjB,+BACOpgC,iCAAoCglC,MAAYC,uCACtCD,MAAYC,aAAmBjlC,uCAC/BA,6BAG7B,OAAO,IAAI,EAAAy/B,eACP4B,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,CAKUqD,qBAAqBtE,EAAkBpgC,EAAcuiC,GAC7D,MAAMwD,EAAQxD,EAAYrC,MACpB8F,EAAQzD,EAAYpC,OAE1B,GAAc,IAAV6F,GAAyB,IAAVD,EAAa,CAC9B,MAAM1E,EAAS,mBACLjB,kDACiBpgC,iCAG3B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,6B,CAGrC,GAAc,IAAV2E,EAAa,CACf,MAAM3E,EAAS,qBACHjB,qEACkC2F,gDACjB/lC,iCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,6B,CAErC,GAAc,IAAV0E,EAAa,CACf,MAAM1E,EAAS,qBACHjB,0EACuC4F,2CACtBhmC,iCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,6B,CAErC,MAAMA,EAAS,mBACHjB,kDACiB2F,MAAUC,8CACVhmC,6BAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,yBAA0B,6BAC/D,CAMUsD,qBAAqBvE,EAAkBpgC,EAAcuiC,GAC7D,MAAM5Q,EAAQ4Q,EAAYvC,cAGpBmB,EAAW,CAACoB,EAAYpC,OAAQoC,EAAYrC,OAElD,GAAgB,MAAZiB,GAAoB,EAAAG,UAAUC,YAAY5P,EAAOwP,GAAW,CAC9D,MAEME,EAAS,qBACHjB,iFAHIe,EAAS,SACTA,EAAS,4CAIInhC,iCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,6B,CAGrC,MAAM,SAAC4E,EAAQ,SAAEZ,GAAY,EAAAa,aAAavU,GACpCyT,EAAgBa,EACtB,GAAIb,EAAchsC,OAASu4B,EAAMv4B,OAAQ,CACvC,MAAMksC,EAAgB,EAAAC,kBAAkB5T,EAAOyT,GAEzCI,EAAgCC,KAAKxjB,MAAMwjB,KAAKC,UAAUnD,IAChEiD,EAAexF,cAAgBsF,EAE/B,MAAMpyB,EAAS,CAAC,MAAO,OACjBmuB,EAAS,eACTthC,KAAK4iC,4BAA4BvC,EAAUpgC,EAAMwlC,GAAgBI,gCAC3DxF,6CACGA,KAAY,EAAAyF,kBAAkB3yB,EAAQmyB,8BAGrD,OAAO,IAAI,EAAA5F,eAAe4B,EAAQ,CAAC,6B,CAGrC,MAAM2D,EAAU7D,EAAS,GACnB8D,EAAU9D,EAAS,GACzB,GAAgB,IAAZ8D,EAAe,CACjB,MAAM5D,EAAS,qBACHjB,iDACOpgC,iCAAoCglC,MAAYC,4DACnBjlC,YAAe2xB,EAAM,gEACzBqT,2CACfhlC,iCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,4BAA6B,8B,CAGlE,GAAgB,IAAZ2D,EAAe,CACjB,MAAM3D,EAAS,qBACHjB,iDACOpgC,iCAAoCglC,MAAYC,4DACnBjlC,YAAe2xB,EAAM,2DAC9BsT,gDACVjlC,iCAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,4BAA6B,8B,CAGlE,MAAMA,EAAS,mBACHjB,sDACczO,EAAM,6CACHqT,MAAYC,8CACZjlC,6BAG7B,OAAO,IAAI,EAAAy/B,eACP4B,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,CAMUuD,qBAAqBxE,EAAkBpgC,EAAcuiC,GAC7D,MAAM5Q,EAAQ4Q,EAAYvC,cACpBmG,EAAUxU,EAAM,GAAKA,EAAM,GAC3ByU,EAAUzU,EAAM,IAEhB,SAACsU,EAAQ,SAAEZ,GAAY,EAAAa,aAAavU,GACpCyT,EAAgBa,EACtB,GAAIb,EAAchsC,OAASu4B,EAAMv4B,OAAQ,CACvC,MAAMksC,EAAgB,EAAAC,kBAAkB5T,EAAOyT,GACzClyB,EAAS,CAAC,QAAS,MAAO,OAE1BsyB,EAAgCC,KAAKxjB,MAAMwjB,KAAKC,UAAUnD,IAChEiD,EAAexF,cAAgBsF,EAC/B,MAAMe,EAAUtmC,KAAK4iC,4BAA4BvC,EAAUpgC,EAAMwlC,GAE3Dc,EAAUjB,EAASkB,UACnBlF,EAAS,eACTgF,EAAQT,gCACFxF,wDACGA,KAAY,EAAAyF,kBAAkB3yB,EAAQozB,8BAGrD,OAAO,IAAI,EAAA7G,eAAe4B,EAAQgF,EAAQP,a,CAG5C,MAEMzE,EAAS,qBACDjB,sJAEgB+F,aAAmBC,8CALjC7D,EAAYrC,UACZqC,EAAYpC,qDAMGngC,+BAG/B,OAAO,IAAI,EAAAy/B,eACP4B,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,CAMUwD,qBAAqBzE,EAAkBpgC,EAAcuiC,GAC7D,MAAM5Q,EAAQ4Q,EAAYvC,cACpBwG,EAAU7U,EAAM,GAChByU,EAAUzU,EAAM,GAAK6U,EAyBrBnF,EAAS,mBACHjB,6EAzBIzO,EAAM,GAAKyU,aA0BkBA,+BACxBI,8CALLjE,EAAYrC,UACZqC,EAAYpC,mDAMCngC,6BAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,yBAA0B,6BAC/D,CAKUyD,qBAAqB1E,EAAkBpgC,EAAcuiC,GAC7D,MAAM5Q,EAAQ4Q,EAAYvC,cACpByG,EAAU9U,EAAM,GAChB6U,EAAU7U,EAAM,GAAK8U,EACrBL,EAAUzU,EAAM,GAAK6U,EACrBL,EAAUxU,EAAM,GAAKyU,GAErB,SAACH,EAAQ,SAAEZ,GAAY,EAAAa,aAAavU,GAC1C,GAAIsU,EAAS7sC,OAASu4B,EAAMv4B,OAAQ,CAClC,MAAMksC,EAAgB,EAAAC,kBAAkB5T,EAAOsU,GACzC/yB,EAAS,CAAC,MAAO,MAAO,QAAS,SAAU,UAE3CsyB,EAAgCC,KAAKxjB,MAAMwjB,KAAKC,UAAUnD,IAChEiD,EAAexF,cAAgBsF,EAE/B,MAAMjE,EAAS,eACTthC,KAAK4iC,4BAA4BvC,EAAUpgC,EAAMwlC,GAAgBI,gCAC3DxF,gFACGA,KAAY,EAAAyF,kBAAkB3yB,EAAQmyB,8BAGrD,OAAO,IAAI,EAAA5F,eAAe4B,EAAQ,CAAC,4BAA6B,0B,CAGlE,MAEMA,EAAS,mBACHjB,yFACc+F,aAAmBC,eAAqBI,2BACjDC,+CALDlE,EAAYrC,UACZqC,EAAYpC,mDAMCngC,6BAG7B,OAAO,IAAI,EAAAy/B,eAAe4B,EAAQ,CAAC,4BAA6B,0BAClE,CAKU0D,qBAAqB3E,EAAkBpgC,EAAcuiC,GAC7D,MAAM5Q,EAAQ4Q,EAAYvC,cACpB0G,EAAU/U,EAAM,GAChB8U,EAAU9U,EAAM,GAAK+U,EACrBF,EAAU7U,EAAM,GAAK8U,EACrBL,EAAUzU,EAAM,GAAK6U,EACrBL,EAAUxU,EAAM,GAAKyU,GAErB,SAACH,EAAQ,SAAEZ,GAAY,EAAAa,aAAavU,GAC1C,GAAIsU,EAAS7sC,OAASu4B,EAAMv4B,OAAQ,CAClC,MAAMksC,EAAgB,EAAAC,kBAAkB5T,EAAOsU,GACzC/yB,EAAS,CAAC,MAAO,MAAO,QAAS,SAAU,SAAU,UAErDsyB,EAAgCC,KAAKxjB,MAAMwjB,KAAKC,UAAUnD,IAChEiD,EAAexF,cAAgBsF,EAE/B,MAAMjE,EAAS,iBACPthC,KAAK4iC,4BAA4BvC,EAAUpgC,EAAMwlC,GAAgBI,kCAC3DxF,6GAEGA,KAAY,EAAAyF,kBAAkB3yB,EAAQmyB,kCAGvD,OAAO,IAAI,EAAA5F,eAAe4B,EAAQ,CAAC,4BAA6B,0B,CAGlE,MAEMA,EAAS,qBACDjB,oHAEc+F,aAAmBC,eAAqBI,6BACjDC,gBAAsBC,iDANzBnE,EAAYrC,UACZqC,EAAYpC,qDAOGngC,iCAG/B,OAAO,IAAI,EAAAy/B,eACP4B,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,CAQUlC,QACR,MAAM5Q,EAASxuB,KAAK4+B,QAAQgB,oBACtBkC,EAAOtT,EAAOoD,MAAMv4B,OACpB0oC,EAAUvT,EAAOuT,QACjB6E,EAASpY,EAAO2R,MAChB0G,EAASrY,EAAO4R,OAEhB0G,EAAe,GACrB,IAAK,IAAI5vC,EAAI,EAAGA,EAAI4qC,EAAO,IAAK5qC,EAC9B4vC,EAAapmC,KAAK,eACZxJ,iBAAiB6qC,EAAQ7qC,OAC/B4vC,EAAapmC,KAAK,yBACFxJ,QAAQ6qC,EAAQ7qC,OAElC4vC,EAAapmC,KAAK,eACVohC,EAAO,gBACf,MAAMiF,EAAO,gDAC4BjF,yDACI8E,MAAWC,gBAClDC,EAAa1yB,KAAK,wDAEa0tB,kBAC/BgF,EAAa1yB,KAAK,qBAGxB,MAAO,CAACgrB,MAAO,IAAI,EAAAM,eAAeqH,EAAM,CAAC,+BAC3C,CAOU1H,YACR,MAAMxe,EAA2C,CAAC,EAclD,OAbA7gB,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAAC9C,EAAM/I,KACjD,MAAM8vC,EAAShnC,KAAK4+B,QAAQ6D,oBAAoBvrC,GAE1C4qC,GADQkF,EAAO/G,cAAc5mC,OAAS,EAAI2tC,EAAO/G,cAAgB+G,EAAOpV,OAC3Dv4B,OACnB,IAAIgnC,EAAW,IAAIpgC,IACnB4gB,EAAOwf,GAAY,IAAI,EAAAX,eACnB1/B,KAAKinC,mBAAmBhnC,EAAM6hC,EAAMkF,EAAO7G,MAAO6G,EAAO5G,QAAQ,GACjE,CAAC,6BAA6BC,IAAY,6BAA8B,8BAC5EA,GAAsB,KACtBxf,EAAOwf,GAAY,IAAI,EAAAX,eACnB1/B,KAAKinC,mBAAmBhnC,EAAM6hC,EAAMkF,EAAO7G,MAAO6G,EAAO5G,QAAQ,GACjE,CAAC,6BAA6BC,IAAY,6BAA8B,6BAA6B,IAEpGxf,CACT,CAQUomB,mBAAmBC,EAAiBpF,EAAc3B,EAAeC,EAAgB+G,GAEzF,IAAIlnC,EAAO,IAAIinC,IAKf,OAJIC,IACFlnC,GAAc,MAGT,mBACKA,WAAc6hC,gDACU7hC,yDACSkgC,MAAUC,gDAJ1C,EAAAQ,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAKDuQ,aAAa8E,4DAI1D,CASUE,mBAAmBF,EAAiBpF,EAAc3B,EAAeC,EAAgB+G,GAEzF,IAAIlnC,EAAO,IAAIinC,SAKf,OAJIC,IACFlnC,GAAc,MAGT,kBACIA,WAAc6hC,iDACYoF,yDACQ/G,MAAUC,yBAJ1C,EAAAQ,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAKxBuQ,aAAa8E,kCAGnC,EAzyCF,iB,4BCRA,IAAYG,E,oKAAAA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KACtB,6BACA,+BAaF,oBACEnZ,YACWoQ,EAAgC+D,EAAiCI,EACjE7C,GADA,KAAAtB,YAAgC,KAAA+D,cAAiC,KAAAI,sBACjE,KAAA7C,qBAAqC,GAElD,gBACE1R,YAAmB0Q,GAAA,KAAAA,SAAuB,GAM5C,uBACE1Q,YAAmB2X,EAA4BE,GAA5B,KAAAF,cAA4B,KAAAE,cAA0B,GAK3E,2BAGE7X,YAAmBjuB,EAAc4lC,EAAsBE,GAApC,KAAA9lC,OAEfD,KAAK+lC,aADHA,GAGkB,GAGlBF,IACF7lC,KAAK6lC,YAAcA,EAEvB,CACAyB,cAAc7uC,GACRA,GACFuH,KAAK+lC,aAAarlC,KAAKjI,EAE3B,GAIF,oCACE8iC,0BAA0BgM,GACxB,IAAKA,GAA0B,IAAjBA,EAAMluC,OAClB,MAAO,GAGT,GAAqB,IAAjBkuC,EAAMluC,OACR,OAAOkuC,EAGT,MAAMC,EAAa,IAAIC,IACjBC,EAAmB,IAAID,IACvB5mB,EAAS,IAAI7V,MAGnB,OADAhL,KAAK2nC,mBAAmBJ,EAAOC,EAAYE,EAAkB7mB,GACtDA,CACT,CAEQ0a,0BACJqM,EAAkCJ,EAAyBE,EAC3D7mB,GACF,IAAK,IAAI3pB,EAAI,EAAGA,EAAI0wC,EAAWvuC,SAAUnC,EACvC8I,KAAK6nC,YAAYD,EAAW1wC,GAAIswC,EAAYE,EAAkB7mB,EAElE,CAEQ0a,mBACJuM,EAA0BN,EAAyBE,EAA+B7mB,GAEpF,IAAKinB,GAAQJ,EAAiBK,IAAID,EAAK7nC,MACrC,OAIF,GAAIunC,EAAWO,IAAID,EAAK7nC,MACtB,MAAM,IAAIzB,MAAM,oFAIlBgpC,EAAW9iB,IAAIojB,EAAK7nC,MAGpB,MAAM8lC,EAAe+B,EAAK/B,aAC1B,GAAIA,GAAgBA,EAAa1sC,OAAS,EACxC,IAAK,IAAInC,EAAI,EAAGA,EAAI6uC,EAAa1sC,SAAUnC,EACzC8I,KAAK6nC,YAAY9B,EAAa7uC,GAAIswC,EAAYE,EAAkB7mB,GAKpEA,EAAOngB,KAAKonC,GAGZJ,EAAiBhjB,IAAIojB,EAAK7nC,MAG1BunC,EAAW3M,OAAOiN,EAAK7nC,KACzB,E,wGCpHF,gBAMA,MAAa+nC,UAAwB,EAAAjJ,QACnC7Q,YAAY0Q,GACVI,MAAMJ,EACR,CACAK,eACE,OAAO,OAAP,wBAAWj/B,KAAKioC,iBAAoBjoC,KAAKkoC,gBAC3C,CACAzI,iBACE,MAAO,CAAC,CACV,CACUwI,gBACR,MAAO,CACLl0B,OAAQ,IAAI,EAAA2rB,eAAe,iGAK/B,CACUwI,gBACR,MAAO,CACLzrC,OAAQ,IAAI,EAAAijC,eAAe,oFAK/B,CAKUyI,cACR,MAAMC,EAAaJ,EAAgBruB,iBAAmB,uBAAyB,GAC/E,MAAO,CACL5F,OAAQ,IAAI,EAAA2rB,eAAe,kmBAYvB0I,mHAMR,CAKUC,cACR,MAAMD,EAAaJ,EAAgBruB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLld,OAAQ,IAAI,EAAAijC,eAAe,uJAGrB0I,sYASV,CAKA7M,wBACE,MAAMnjC,EAAI,IAAIkwC,YAAY,GACpBxxC,EAAI,IAAI8G,YAAYxF,GACpBZ,EAAI,IAAI0B,WAAWd,GAEzB,GADAtB,EAAE,GAAK,WACM,MAATU,EAAE,GACJ,OAAO,EAET,GAAa,MAATA,EAAE,GACJ,OAAO,EAET,MAAM,IAAIgH,MAAM,qBAClB,EAxFF,mB,yGCNA,gBACA,UAOA,MAAa+pC,UAAyB,EAAAxJ,QACpC7Q,YAAY0Q,GACVI,MAAMJ,EACR,CACAK,eACE,OAAO,OAAP,wBAAWj/B,KAAKwoC,gBAAmBxoC,KAAKyoC,kBAC1C,CACAhJ,iBACE,MAAO,CAAC,CACV,CACU+I,eACR,MAAMrG,EAAO,EAAAvB,QAAQ5gC,KAAK4+B,QAAQN,UAAUzM,SAC5C,MAAO,CACL2W,aAAc,IAAI,EAAA9I,eACd,2DAEIyC,EAAK3T,+CAGT,CAAC,oBAET,CACUia,kBACR,MAAO,CACLA,gBAAiB,IAAI,EAAA/I,eACjB,wGAKA,CAAC,oBAET,EAhCF,oB,qGCRA,MAAMgJ,EAAwB,qFAK9B,0BAA+BC,GAC7B,MAAMC,EAAiG,CAAC,EACxG,IAAI3hC,EACJ,KAAwD,QAAhDA,EAAQyhC,EAAsBG,KAAKF,KAAmB,CAC5D,MAAMx1B,EAASlM,EAAM,GACD0D,MAAM,KACNqvB,KAAI5iC,IACH,MAAM0xC,EAAS1xC,EAAE2xC,OAAOp+B,MAAM,KAC9B,OAAIm+B,GAA4B,IAAlBA,EAAOzvC,OACZ,CAAC0yB,KAAM+c,EAAO,GAAI7oC,KAAM6oC,EAAO,IAEjC,IAAI,IAEZE,QAAO1wC,GAAW,OAANA,IAChCswC,EAAW3hC,EAAM,IAAM,CAACkM,SAAQ4zB,KAAM9/B,EAAM,G,CAE9C,IAAK,MAAMhH,KAAQ2oC,EAAY,CAC7B,MAAMK,EArBc,6DAqBgB3vC,QAAQ,WAAY2G,GAClDipC,EAAQ,IAAIx+B,OAAOu+B,EAAa,MACtC,KAAwC,QAAhChiC,EAAQiiC,EAAML,KAAKF,KAAmB,CAC5C,MAAM5c,EAAO9kB,EAAM,GACbkiC,EAAWliC,EAAM,GACjBkM,EAASlM,EAAM,GAAG0D,MAAM,KACxBy+B,EAAW,EAAS,GAAGrd,KAAQod,KAAc,GACnD,IAAIE,EAAkBT,EAAW3oC,GAAM8mC,KACnCuC,EAAiB,GACrBV,EAAW3oC,GAAMkT,OAAOpQ,SAAQ,CAACzK,EAAGpB,KAC9BoB,IACFgxC,GAAkB,GAAGhxC,EAAEyzB,QAAQzzB,EAAE2H,UAAUkT,EAAOjc,Q,IAGtDmyC,EAAU,GAAGC,OAAoBD,IACjCA,EAAUA,EAAQ/vC,QAAQ,SAAU,GAAG6vC,QACvC,MAAMI,EAAc,WAClBH,uBAEEC,qBAGJV,EAASA,EAAOrvC,QAAQ2N,EAAM,GAAIsiC,E,EAItC,OADSZ,EAAOrvC,QAAQovC,EAAuB,GAEjD,C,yGCjDA,gBACA,UACA,UACA,UAYA,yBAKExa,YACIoQ,EAAyB+D,EAA0BI,EACnD7C,GALK,KAAA4J,KAAkC,CAAC,EACnC,KAAAC,8BAA6E,CAAC,EAKrFzpC,KAAK4+B,QAAU,IAAI,EAAA8K,YAAYpL,EAAW+D,EAAaI,EAAqB7C,GAG5E9nC,OAAOogB,KAAK,EAAAyxB,cAAc5mC,SAAS9C,IACjC,MAAM2pC,EAAM,IAAI,EAAAD,aAAa1pC,GAAMD,KAAK4+B,SACxC5+B,KAAKwpC,KAAKvpC,GAAQ2pC,CAAG,IAIvB,MAAM5P,EAAMh6B,KAAKypC,8BACjB,IAAK,MAAMI,KAAW7pC,KAAKwpC,KAAM,CAC/B,MACMM,EADM9pC,KAAKwpC,KAAKK,GACI5K,eAC1B,IAAK,MAAMqH,KAAWwD,EAAe,CACnC,MAAMxa,EAAMua,EAAU,IAAMvD,EAC5B,IAAIyD,EACA/P,EAAI1K,IACNya,EAAc/P,EAAI1K,GAClBya,EAAYlE,YAAciE,EAAcxD,GAAST,cAEjDkE,EAAc,IAAI,EAAAC,mBAAmB1a,EAAKwa,EAAcxD,GAAST,aACjE7L,EAAI1K,GAAOya,GAEb,MAAMhE,EAAe+D,EAAcxD,GAASP,aAC5C,GAAIA,EACF,IAAK,IAAI7uC,EAAI,EAAGA,EAAI6uC,EAAa1sC,SAAUnC,EACzC,GAAK8iC,EAAI+L,EAAa7uC,IAKpB6yC,EAAYzC,cAActN,EAAI+L,EAAa7uC,SALlB,CACzB,MAAMuB,EAAO,IAAI,EAAAuxC,mBAAmBjE,EAAa7uC,IACjD8iC,EAAI+L,EAAa7uC,IAAMuB,EACvBsxC,EAAYzC,cAAc7uC,E,GAQtC,CAEAwxC,aACE,MAAM5H,EAAcriC,KAAK4+B,QAAQyD,YACjC,IAAIf,EAASe,EAAY6H,aAWzB,OARKlqC,KAAK4+B,QAAQyD,YAAY8H,UAC5B7I,EAAS,GAAGA,YACV,EAAA8I,yBAAyBpqC,KAAK4+B,QAAQN,UAAUzM,QAAS7xB,KAAK4+B,QAAQgB,oBAAoBhO,MAAMv4B,WAGpGioC,EAAS,EAAA+I,eAAe/I,GAGjB,GAAG,EAAAgJ,sBAAsBtqC,KAAK4+B,QAAQN,UAAUzM,iBACrD7xB,KAAKuqC,YAAYlI,EAAYC,WAAYD,EAAYmI,mBACrDxqC,KAAKyqC,WAAWnJ,WAChBA,GACJ,CAEUmJ,WAAW9B,GACnB,MAAM+B,EAAmB1qC,KAAK2qC,kCAAkChC,GAEhE,GAAgC,IAA5B+B,EAAiBrxC,OACnB,MAAO,GAGT,IAAIuxC,EAAW,GACf,IAAK,IAAI1zC,EAAI,EAAGA,EAAIwzC,EAAiBrxC,SAAUnC,EAAG,CAChD,IAAIwzC,EAAiBxzC,GAAG2uC,YAGtB,MAAM,IAAIrnC,MAAM,8CAA8CksC,EAAiBxzC,GAAG+I,QAFlF2qC,GAAYF,EAAiBxzC,GAAG2uC,YAAc,I,CAMlD,OAAO+E,CACT,CACQD,kCAAkChC,GACxC,MAAMpB,EAA8B,GASpC,OAPAzvC,OAAOogB,KAAKlY,KAAKypC,+BAA+B1mC,SAAQ8nC,IACtD,MAAMvE,EAAUuE,EAAgBlgC,MAAM,KAAK,IACV,IAA7Bg+B,EAAOruC,QAAQgsC,IACjBiB,EAAM7mC,KAAKV,KAAKypC,8BAA8BoB,G,IAI3C,EAAAC,4BAA4BC,mBAAmBxD,EACxD,CAEUgD,YAAYS,EAAqBR,GACzC,MAAMS,EAAyB,GAC/B,GAAID,EACF,IAAK,MAAME,KAAWF,EACpBC,EAAavqC,KAAK,qBAAqBwqC,MAG3C,GAAIV,EACF,IAAK,MAAMrB,KAAYqB,EACrBS,EAAavqC,KACT,WAAWyoC,EAASpd,QAAQod,EAASlpC,OAAOkpC,EAASgC,YAAc,IAAIhC,EAASgC,eAAiB,OAGzG,OAAOF,EAAa72B,KAAK,KAC3B,E,qGC9HF,gBAEA,UACA,UACA,UACA,UAEa,EAAAu1B,aAAwE,CACnF,SAAY,EAAA3B,gBACZ,UAAa,EAAAO,iBACb,IAAO,EAAA6C,WACP,WAAc,EAAAC,kBACd,YAAe,EAAAvM,c,0GCZjB,gBAMA,MAAauM,UAA0B,EAAAtM,QACrC7Q,YAAY0Q,GACVI,MAAMJ,EACR,CACAK,eACE,OAAO,OAAP,kEACKj/B,KAAKsrC,cACLtrC,KAAKurC,oBACLvrC,KAAKwrC,mBACLxrC,KAAKyrC,mBACLzrC,KAAK0rC,mBAEZ,CACAjM,iBACE,MAAO,CAAC,CACV,CACU6L,aACR,MAAMK,EAAa3rC,KAAK4+B,QAAQgB,oBAAoBhO,MAAMv4B,OACpDwnB,EAA2C,CAAC,EAqBlD,OApBA7gB,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAAC9C,EAAM/I,KACjD,MAAM06B,EAAQ5xB,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG+oC,cAClD,GAAIrO,EAAMv4B,QAAUsyC,EAAY,CAC9B,MAAM7J,EAAOlQ,EAAMv4B,OACbuyC,EAAYD,EAAa7J,EACzBzB,EAAW,gBAAgBpgC,IACjC,IAAI4rC,EAAQ,GACZ,IAAK,IAAI30C,EAAI,EAAGA,EAAI4qC,IAAQ5qC,EAC1B20C,GAAS,2BACK30C,sCAAsC00C,EAAY10C,QAAQ06B,EAAM16B,uBAGhF,MAAM6vC,EAAO,kBACN1G,yBAAgCsL,2BAAoC7J,oBACvE+J,yBAGJhrB,EAAOwf,GAAY,IAAI,EAAAX,eAAeqH,E,KAGnClmB,CACT,CACU0qB,mBACR,MAAMI,EAAa3rC,KAAK4+B,QAAQgB,oBAAoBhO,MAAMv4B,OACpDwnB,EAA2C,CAAC,EAuBlD,OAtBA7gB,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAAC9C,EAAM/I,KACjD,MAAM06B,EAAQ5xB,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG06B,MAClD,KAAMA,EAAMv4B,OAAS,GAAKu4B,EAAMv4B,OAASsyC,GAAa,CACpD,MAAM7J,EAAOlQ,EAAMv4B,OACbuyC,EAAYD,EAAa7J,EACzBzB,EAAW,sBAAsBpgC,IACvC,IAAI4rC,EAAQ,GACZ,IAAK,IAAI30C,EAAI,EAAGA,EAAI4qC,EAAO,IAAK5qC,EAC9B20C,GAAS,2BACK30C,sCAAsC00C,EAAY10C,QAAQ06B,EAAM16B,uBAGhF,MAAM6vC,EAAO,kBACN1G,wBAA+BsL,2BAAoC7J,oBACtE+J,4BACY/J,EAAO,uBAAuB6J,EAAa,8BAC3C7J,EAAO,uBAAuB6J,EAAa,2BAG3D9qB,EAAOwf,GAAY,IAAI,EAAAX,eAAeqH,E,KAGnClmB,CACT,CACU4qB,kBACR,MAAM5qB,EAA2C,CAAC,EAWlD,OAVA7gB,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAAC9C,EAAM/I,KACjD,MAAM06B,EAAQ5xB,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG06B,MAC5CmQ,EAAU/hC,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG6qC,QAC9CD,EAAOlQ,EAAMv4B,OACnB,IAAIgnC,EAAW,mBAAmBpgC,IAClC4gB,EAAOwf,GAAY,IAAI,EAAAX,eAAe2L,EAAkBS,oBAAoBzL,EAAUyB,EAAMC,IAC5F1B,EAAW,mBAAmBpgC,MAC9B4gB,EAAOwf,GACH,IAAI,EAAAX,eAAe2L,EAAkBS,oBAAoBzL,EAAUyB,EAAMC,EAAQxoC,QAAQitC,WAAW,IAEnG3lB,CACT,CACA0a,2BAA2Bt7B,EAAc6hC,EAAcC,GACrD,IAAI8J,EAAQ,GACZ,IAAK,IAAI30C,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B20C,GAAS,+BACa30C,QAAQ6qC,EAAQ7qC,gBAGxC,MAAO,eACC+I,iBAAoB6hC,2CAEtB+J,4CAIR,CACUL,kBACR,MAAM3qB,EAA2C,CAAC,EAWlD,OAVA7gB,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAAC9C,EAAM/I,KACjD,MAAM06B,EAAQ5xB,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG06B,MAC5CmQ,EAAU/hC,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG6qC,QAC9CD,EAAOlQ,EAAMv4B,OACnB,IAAIgnC,EAAW,mBAAmBpgC,IAClC4gB,EAAOwf,GAAY,IAAI,EAAAX,eAAe2L,EAAkBU,sBAAsB1L,EAAUyB,EAAMC,IAC9F1B,EAAW,mBAAmBpgC,MAC9B4gB,EAAOwf,GACH,IAAI,EAAAX,eAAe2L,EAAkBU,sBAAsB1L,EAAUyB,EAAMC,EAAQxoC,QAAQitC,WAAW,IAErG3lB,CACT,CACA0a,6BAA6Bt7B,EAAc6hC,EAAcC,GACvD,MAAM+E,EAAe,GACrB,IAAK,IAAI5vC,EAAI,EAAGA,EAAI4qC,EAAO,IAAK5qC,EAC9B4vC,EAAapmC,KAAK,mBACRxJ,iBAAiB6qC,EAAQ7qC,OACnC4vC,EAAapmC,KAAK,+BACIxJ,QAAQ6qC,EAAQ7qC,OAIxC,OAFA4vC,EAAapmC,KAAK,mBACNohC,EAAO,gBACZ,gBACE7hC,iCAAoC6hC,kBACvCgF,EAAa1yB,KAAK,sBAG1B,CACUs3B,mBACR,MAAM7qB,EAA2C,CAAC,EA0BlD,OAzBA7gB,KAAK4+B,QAAQyD,YAAYC,WAAWv/B,SAAQ,CAAC9C,EAAM/I,KACjD,MAAM06B,EAAQ5xB,KAAK4+B,QAAQ6D,oBAAoBvrC,GAAG06B,MAC5CkQ,EAAOlQ,EAAMv4B,OACbgnC,EAAW,oBAAoBpgC,IACrC,IAAI+rC,EAAY,GAChB,IAAK,IAAI90C,EAAI,EAAGA,EAAI4qC,IAAQ5qC,EAC1B80C,GAAa,mBACL90C,QAAQ06B,EAAM16B,MAExB,MAAM6vC,EAAO,kBACJ1G,+BAAsCyB,8BAC/BA,kBACVkK,6BACYlK,uOAUlBjhB,EAAOwf,GAAY,IAAI,EAAAX,eAAeqH,EAAK,IAEtClmB,CACT,EA3JF,qB,yKCOA,MAAMorB,EAAoB,CACxBpa,QAAS,GACTpD,UAAW,YACXyd,cAAe,UACfC,YAAa,UACb/J,UAAW,YACX5T,OAAQ,eACR4d,kBAAmB,IAEfC,EAAoB,CACxBxa,QAAS,kBACTpD,UAAW,KACXyd,cAAe,MACfC,YAAa,KACb/J,UAAW,UACX5T,OAAQ,cACR4d,kBAAmB,yBAGrB,SAAgBxL,EAAQ/O,GACtB,OAAmB,IAAZA,EAAgBoa,EAAcI,CACvC,CAFA,YAIA,iCAAsCxa,GACpC,MAAMsQ,EAAOvB,EAAQ/O,GACrB,MAAO,GAAGsQ,EAAKtQ,gDAETsQ,EAAK1T,mCACL0T,EAAK1T,yCAEL0T,EAAK+J,yJAOb,EAEA,iCAAsCra,GACpC,MAAMsQ,EAAOvB,EAAQ/O,GACrB,MAAO,GAAGsQ,EAAKtQ,sGAIXsQ,EAAKgK,oCACLhK,EAAKiK,qaA4BX,EAEA,oCAAyCva,EAAcya,GAErD,MAAO,sCAESA,uFAHH1L,EAAQ/O,GAMZrD,2BAGX,C,mGCnGA,gBAOA,MAAa4c,UAAmB,EAAArM,QAC9B7Q,YAAY0Q,GACVI,MAAMJ,EACR,CACAa,iBACE,MAAO,CAAC,CACV,CACAR,eACE,OAAO,OAAP,oDAAWj/B,KAAKusC,sBAAyBvsC,KAAKwsC,WAAcxsC,KAAKysC,cAAiBzsC,KAAK0sC,aACzF,CACUH,qBACR,MACMzK,EADe9hC,KAAK4+B,QAAQgB,oBACRhO,MAAMv4B,OAC1BszC,EAAmC,CAACjoB,IAAK,KAAMgB,IAAK,KAAMjB,IAAK,KAAMe,IAAK,MAC1E3E,EAA2C,CAAC,EAClD,IAAK,MAAM5gB,KAAQ0sC,EAAQ,CACzB,MAAMC,EAAQ,GAAG3sC,OACjB,IAAI4sC,EAAkB,GACtB,IAAK,IAAI31C,EAAI,EAAGA,EAAI4qC,IAAQ5qC,EAC1B21C,GAAmB,oBACV31C,MAAMy1C,EAAO1sC,UAAa/I,kBAGrC,MAAM6vC,EAAO,kBACJ6F,aAAiB9K,oBAAuBA,oBAC3C+K,yBAGNhsB,EAAO+rB,GAAS,IAAI,EAAAlN,eAAeqH,E,CAGrC,OAAOlmB,CACT,CACU2rB,UACR,MACM1K,EADe9hC,KAAK4+B,QAAQgB,oBACRhO,MAAMv4B,OAChC,IAAIwzC,EAAkB,GACtB,IAAK,IAAI31C,EAAI,EAAGA,EAAI4qC,IAAQ5qC,EAC1B21C,GAAmB,kBACV31C,YAAYA,gBAGvB,MAAM6vC,EAAO,gCACYjF,oBAAuBA,kBAC1C+K,qBAGN,MAAO,CAACL,QAAS,IAAI,EAAA9M,eAAeqH,GACtC,CAEU0F,aACR,MACM3K,EADe9hC,KAAK4+B,QAAQgB,oBACRhO,MAAMv4B,OAChC,IAAIwyC,EAAQ,+CAEK/J,2EAIjB,IAAK,IAAI5qC,EAAI,EAAGA,EAAI4qC,EAAO,IAAK5qC,EAC9B20C,GAAS,+BACa30C,qBACZA,4BAGZ20C,GAAS,iCAEG/J,EAAO,wBAEnB,MAAMiF,EAAO,qCACiBjF,wCACxB+J,uBAGN,MAAO,CAACY,WAAY,IAAI,EAAA/M,eAAeqH,GACzC,CACU2F,aACR,MACM5K,EADe9hC,KAAK4+B,QAAQgB,oBACRhO,MAAMv4B,OAChC,IAAIwyC,EAAQ,gDAEM/J,wEAIlB,IAAK,IAAI5qC,EAAI,EAAGA,EAAI4qC,EAAO,IAAK5qC,EAC9B20C,GAAS,+BACa30C,4BACLA,cAGnB20C,GAAS,wCAEU/J,EAAO,gBAE1B,MAAMiF,EAAO,gCACYjF,6BACnB+J,mBAGN,MAAO,CAACa,WAAY,IAAI,EAAAhN,eAAeqH,GACzC,EArGF,c,8GCNA,gBACA,UACA,UAEA,UACA,UACA,UACA,UAGA,UACA,UAeA,8BAGE7Y,YAAmBsK,GAAA,KAAAA,UACjBx4B,KAAK8sC,uBAAyB,IAAIrS,IAClCz6B,KAAK+sC,yBAA2B,IAAItS,GACtC,CAKAuS,+BAA+Bpb,EAA0Bqb,GACvD,OAAO,EAAAD,+BAA+BhtC,KAAKw4B,QAAQ0U,eAAgBtb,EAAOqb,EAC5E,CAEAE,eAAeC,EAAwCC,GACrD,GAAIA,EAAOh0C,OAAS+zC,EAAQ9K,WAAWjpC,OACrC,MAAM,IAAImF,MAAM,mCAAmC4uC,EAAQ9K,WAAWjpC,WAExE,GAAI+zC,EAAQ9K,WAAWjpC,SAAW+zC,EAAQE,WAAWj0C,OACnD,MAAM,IAAImF,MAAM,+CAIlB,MAAM+uC,EAAmC,GACzC,IAAK,IAAIr2C,EAAI,EAAGA,EAAIk2C,EAAQ9K,WAAWjpC,SAAUnC,EAC/Cq2C,EAAkBr2C,GAAK8I,KAAKwtC,uBAAuBH,EAAOn2C,GAAIk2C,EAAQE,WAAWp2C,IAGnF,MAAMo4B,EAzCN,EAAC+S,EAA4CkL,KAC3C,MAAMF,EACFE,EAAkBvT,KAAIyT,GAAW,GAAGA,EAAQxN,cAAc7rB,KAAK,QAAQq5B,EAAQtN,SAASsN,EAAQrN,WAC3FhsB,KAAK,KACd,IAAIkb,EAAM+S,EAAYpiC,KAKtB,OAJIoiC,EAAYqL,YACdpe,GAAO,IAAM+S,EAAYqL,UAAY,KAEvCpe,GAAO,IAAM+d,EACN/d,CAAG,EAgCAqe,CAAwBP,EAASG,GAC7C,IAAIK,EAAW5tC,KAAKw4B,QAAQqV,eAAeC,YAAYxe,GACvD,MAAM+S,EAAcuL,EAChBA,EAASvL,YACsC,mBAAtC+K,EAA8BxlC,IAAsBwlC,EAA8BxlC,MAC9BwlC,EAG3DxN,EAAsB,EAAAmO,mCACxB/tC,KAAKw4B,QAAQ0U,eAAgB7K,EAAY7T,OAAOqB,KAAMwS,EAAY7T,OAAOye,aACvEe,EAAoBhuC,KAAKiuC,kBAAkBrO,EAAqByC,EAAY7T,OAAOzC,MAQzF,OANK6hB,IACHA,EAAW5tC,KAAKw4B,QAAQqV,eAAe1b,MAAMkQ,EAAakL,EAAmBS,GAC7EhuC,KAAKw4B,QAAQqV,eAAeK,YAAY5e,EAAKse,IAG/C5tC,KAAKmuC,WAAWP,EAAUL,EAAmBS,GACtCA,CACT,CAEAI,IAAIhB,EAA4BC,GAE9B,OAD0BrtC,KAAKmtC,eAAeC,EAASC,GAC9BgB,MAC3B,CAEQF,WAAWP,EAAoBP,EAAuB7e,GAE5D,IAAK,IAAIt3B,EAAI,EAAGA,EAAIm2C,EAAOh0C,SAAUnC,EACnC,KAAMm2C,EAAOn2C,GAAG2oC,WAAc+N,EAASvL,YAAYiL,WAAWp2C,KAAO,EAAAo3C,YAAYC,QAC/E,MAAM,IAAI/vC,MAAM,SAAStH,mCAK7B,KAAMs3B,EAAOqR,WAAc+N,EAASvL,YAAY7T,OAAOye,cAAgB,EAAAqB,YAAYC,QACjF,MAAM,IAAI/vC,MAAM,uCAGlBwB,KAAKw4B,QAAQqV,eAAeO,IAAIR,EAAUP,EAAQ7e,EACpD,CAaQgf,uBAAuBa,EAAgBpB,GAC7C,IAAIuB,EAAKxuC,KAAKyuC,eAAeJ,EAAOK,OAAQzB,IAAgB,EAAAqB,YAAYC,QAExE,IAAKC,IAEHA,EAAKxuC,KAAKyuC,eAAeJ,EAAOK,OAAQzB,IAAgB,EAAAqB,YAAYC,QAChEC,GACF,OAAIvB,IAAgB,EAAAqB,YAAYC,OACvBvuC,KAAKq+B,KAAKmQ,GAEVxuC,KAAK2uC,OAAOH,GAKzB,IAAKA,EAAI,CACP,MAAMxH,EAAS,EAAA+G,mCAAmC/tC,KAAKw4B,QAAQ0U,eAAgBmB,EAAOxe,KAAMod,GAE5F,GAAIA,IAAgB,EAAAqB,YAAYM,oBAAqB,CACnD,MAAMC,EAAQ,EACRC,EAAW,EACXld,EAAQyc,EAAOxe,KACrB,GAAqB,IAAjB+B,EAAMv4B,OAAc,CAQtB,MAAM01C,EAAsB,CAACnd,EAAM,GAAIvqB,KAAKuM,KAAMge,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAMkd,IAC9EE,EACF,EAAAjB,mCAAmC/tC,KAAKw4B,QAAQ0U,eAAgB6B,EAAqB9B,GACzF,IAAI32C,EAAS+3C,EAAOY,WACpB,GAAIrd,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKkd,GAAa,EAAG,CACnD,MAAMI,EAAiBtd,EAAM,GACvBud,EAAavd,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACzCwd,EAAa/nC,KAAKuM,KAAKu7B,EAAaN,EAAQC,GAAYA,EAE9Dx4C,EAAS,IAAIwH,aADGoxC,EAAiBE,GAEjC,IAAK,IAAI73C,EAAI,EAAGA,EAAI23C,IAAkB33C,EAAG,CACvC,MAAM83C,EAAY93C,EAAI43C,EAChBG,EAAY/3C,EAAI63C,EAAa73C,EAAIs3C,EAAQM,EAC/C74C,EAAO2U,IAAIojC,EAAOY,WAAWtyC,SAAS0yC,EAAWA,EAAYF,GAAaG,E,EAG9E,OAAOtvC,KAAKiuC,kBAAkBe,EAAgBX,EAAOtiB,KAAMz1B,EAAQ+3C,EAAQ,E,EAI/E,GAAIpB,IAAgB,EAAAqB,YAAYC,OAAQ,CACtC,MAAMgB,EACF,EAAAC,6BAA6BxvC,KAAKw4B,QAAQ0U,eAAgBmB,EAAOxe,KAAM,EAAG,GAAI,CAAC4f,WAAW,IACxFC,EAAsB1vC,KAAKiuC,kBAC7BsB,EAAuBlB,EAAOtiB,KAAMsiB,EAAOY,WAAYZ,EAAQ,GACnEG,EAAKxuC,KAAKq+B,KAAKqR,E,MAEflB,EAAKxuC,KAAKiuC,kBAAkBjH,EAAQqH,EAAOtiB,KAAMsiB,EAAOY,WAAYZ,EAAQ,E,CAGhF,OAAOG,CACT,CAWAmB,sCACI3I,EAAuB3W,EAA2BntB,EAAyBmrC,GAC7E,OAAOruC,KAAKiuC,kBAAkBjH,EAAQ3W,EAAUntB,EAAMmrC,EAAQ,EAChE,CAEQJ,kBACJjH,EAAuB3W,EAA2BntB,EAA0BmrC,EAC5EuB,GACF,EAAApR,OAAOE,QAAQ,mBAAoB,iCAAiCgH,KAAKC,UAAUqB,OACnF,MAAMyG,EAAUztC,KAAKw4B,QAAQqX,eAAeC,wBAAwBzf,EAAU2W,EAAQ9jC,EAAM0sC,GAC5F,OAAO5vC,KAAK+vC,6BAA6B/I,EAAQ3W,EAAUod,EAASY,EACtE,CAEA2B,gBAAgBzhB,EAAe0hB,GAC7B,MAAMC,EAAUlwC,KAAKwtC,uBAAuBjf,EAAO,EAAA+f,YAAY6B,UACzDC,EAAkC,CACtCtB,SAAUoB,EAAQpB,SAClB1O,OAAQ8P,EAAQ9P,OAChBD,MAAO+P,EAAQ/P,MAEfvO,MAA+B,IAAxBqe,EAAa52C,OAAe42C,EAAe,CAAC,GACnDlO,QAAS,EAAAiC,UAAUqM,eAAeJ,GAClChQ,cAAegQ,GAGjB,OADuBjwC,KAAK+vC,6BAA6BK,EAAkB7hB,EAAMxC,KAAMmkB,EAAQzC,SACzEY,MACxB,CAEAiC,cAAc/hB,EAAe0hB,GAC3B,MAAMC,EAAUlwC,KAAKwtC,uBAAuBjf,EAAO,EAAA+f,YAAYC,QAG/D,GAAI,EAAAgC,eAAehiB,EAAMsB,KAAMogB,GAAe,CAC5C,MAAMG,EAAkC,CACtCtB,SAAUoB,EAAQpB,SAClB1O,OAAQ8P,EAAQ9P,OAChBD,MAAO+P,EAAQ/P,MAEfvO,MAA+B,IAAxBqe,EAAa52C,OAAe42C,EAAe,CAAC,GACnDlO,QAAS,EAAAiC,UAAUqM,eAAeJ,GAClChQ,cAAegQ,EACfpQ,UAAU,GAGZ,OADuB7/B,KAAK+vC,6BAA6BK,EAAkB7hB,EAAMxC,KAAMmkB,EAAQzC,SACzEY,M,CAGxB,MAAMmC,EAAqB,EAAAC,cAAcliB,EAAMsB,MACzC6gB,EAAsB,EAAAD,cAAcR,GAEpCU,EAAsB3wC,KAAKswC,cAAc/hB,EAAOiiB,GAChDI,EAAuB5wC,KAAKouC,IAC9B,EAAAyC,uCAAuC7wC,KAAM2wC,EAAqBD,GAAsB,CAACC,IAE7F,OADqB3wC,KAAKswC,cAAcM,EAAsBX,EAEhE,CAEAa,KAAKviB,EAAexC,GAClB,MAAMmkB,EAAUlwC,KAAKwtC,uBAAuBjf,EAAO,EAAA+f,YAAY6B,UAE/D,OADuBnwC,KAAK+vC,6BAA6BG,EAA0BnkB,EAAMmkB,EAAQzC,SAC3EY,MACxB,CAEQ0B,6BACJ/I,EAAuB3W,EAA2Bod,EAAuBY,EAAiB0C,GAC5F,MAAMC,EAAW,+BACZhK,GAAM,CACTqH,OAAQA,GACJ,IAAI,EAAA3c,OACIsV,EAAO/G,cAAe5P,GAAW4gB,GAAmBjxC,KAAKkxC,YAAYF,KACrE1Y,MAAO2Y,GAAmBjxC,KAAKmxC,iBAAiBH,SAAch+B,EAAW+9B,GACrFtD,YAGF,OADAztC,KAAKoxC,eAAeJ,EAAY3C,OAAOK,OAAQsC,EAAahK,EAAOnH,UAC5DmR,CACT,CAEQvC,eAAesC,EAAqBlR,GAAW,GACrD,OAAO7/B,KAAKw4B,QAAQ6Y,cAAcN,GAAY/wC,KAAKw4B,QAAQiW,eAAesC,EAAUlR,GAChFA,EAA0C7/B,KAAK8sC,uBAAuBllC,IAAImpC,GAChC/wC,KAAK+sC,yBAAyBnlC,IAAImpC,EAClF,CACAK,eAAeL,EAAqBvC,EAAiB3O,GAAW,GAC1D7/B,KAAKw4B,QAAQ6Y,cAAcN,GAC7B/wC,KAAKw4B,QAAQ4Y,eAAeL,EAAUvC,EAAI3O,IAEzCA,EAAW7/B,KAAK8sC,uBAAyB9sC,KAAK+sC,0BAA0B9hC,IAAI8lC,EAAUvC,EAE3F,CACA8C,sBAAsBjD,EAAgBxO,GAAW,GAC/C,QAAS7/B,KAAKyuC,eAAeJ,EAAOK,OAAQ7O,EAC9C,CAEAnC,UACE19B,KAAKw4B,QAAQqX,eAAe0B,sBAC5BvxC,KAAK8sC,uBAAuB/pC,SAAQyrC,GAAMxuC,KAAKw4B,QAAQqX,eAAe2B,eAAehD,KACrFxuC,KAAK8sC,uBAAyB,IAAIrS,IAClCz6B,KAAK+sC,yBAAyBhqC,SAAQyrC,GAAMxuC,KAAKw4B,QAAQqX,eAAe2B,eAAehD,KACvFxuC,KAAK+sC,yBAA2B,IAAItS,GACtC,CAEAyW,YAAYF,GACV,OAAIA,EAAYnR,SACP7/B,KAAKkxC,YAAYlxC,KAAK2uC,OAAOqC,IAEjChxC,KAAKw4B,QAAQ+E,QAAQe,UAAUmT,2BAG7BzxC,KAAKw4B,QAAQqX,eAAeqB,YAAYF,EAAaA,EAAY3C,OAAOtiB,KAAMilB,EAAYlC,UAFxF9uC,KAAKw4B,QAAQqX,eAAe6B,wBAAwB,EAAAC,cAAc3xC,KAAMgxC,GAGnF,CAEA1Y,uBAAuB0Y,GACrB,OAAIA,EAAYnR,SACP7/B,KAAKmxC,iBAAiBnxC,KAAK2uC,OAAOqC,IAEtChxC,KAAKw4B,QAAQ+E,QAAQe,UAAUmT,2BAG7BzxC,KAAKw4B,QAAQqX,eAAesB,iBAAiBH,EAAaA,EAAY3C,OAAOtiB,KAAMilB,EAAYlC,UAF7F9uC,KAAKw4B,QAAQqX,eAAe6B,wBAAwB,EAAAC,cAAc3xC,KAAMgxC,GAGnF,CAEA3S,KAAK9P,GAEH,OAD0BvuB,KAAKmtC,eAAe,EAAAyE,4BAA4B5xC,KAAMuuB,EAAM8f,QAAS,CAAC9f,EAAM8f,QAExG,CAEAM,OAAOpgB,GAEL,OAD0BvuB,KAAKmtC,eAAe,EAAA0E,8BAA8B7xC,KAAMuuB,EAAM8f,QAAS,CAAC9f,EAAM8f,QAE1G,E,kpBCpTF,gBACA,aACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,UACA,UAEa,EAAAyD,uBAAuD,CAClE,CAAC,MAAO,GAAI,KAAMC,EAASjnC,KAC3B,CAAC,OAAQ,GAAI,KAAMinC,EAASC,MAC5B,CAAC,MAAO,GAAI,KAAMC,EAAUvtB,KAC5B,CAAC,MAAO,GAAI,KAAMutB,EAAUtoB,KAC5B,CAAC,OAAQ,GAAI,KAAMooB,EAASG,MAC5B,CAAC,OAAQ,GAAI,KAAMH,EAASI,MAE5B,CAAC,cAAe,GAAI,KAAM,EAAAC,YAAa,EAAAC,4BACvC,CAAC,qBAAsB,GAAI,KAAM,EAAAC,mBAAoB,EAAAC,mCACrD,CAAC,OAAQ,GAAI,KAAM,EAAAzB,KAAM,EAAA0B,qBACzB,CAAC,OAAQ,GAAI,KAAMT,EAASn+B,MAC5B,CAAC,OAAQ,GAAI,OAAQm+B,EAASU,KAAMV,EAASW,qBAC7C,CAAC,OAAQ,GAAI,MAAOX,EAASY,SAC7B,CAAC,SAAU,GAAI,KAAM,EAAAC,OAAQ,EAAAC,uBAC7B,CAAC,OAAQ,GAAI,KAAM,EAAAC,KAAM,EAAAC,qBACzB,CAAC,gBAAiB,GAAI,KAAM,EAAAC,cAAe,EAAAC,8BAC3C,CAAC,MAAO,GAAI,KAAMlB,EAASmB,KAC3B,CAAC,MAAO,GAAI,KAAMjB,EAAUzsB,KAC5B,CAAC,UAAW,GAAI,KAAMusB,EAASoB,UAC/B,CAAC,eAAgB,GAAI,KAAM,EAAAC,aAAc,EAAAC,6BACzC,CAAC,QAAS,GAAI,KAAMpB,EAAUqB,OAC9B,CAAC,MAAO,GAAI,KAAMvB,EAASwB,IAAKxB,EAASyB,oBACzC,CAAC,MAAO,GAAI,KAAMzB,EAAS0B,KAC3B,CAAC,UAAW,GAAI,KAAM,EAAAC,QAAS,EAAAC,wBAC/B,CAAC,QAAS,GAAI,KAAM5B,EAASlnC,OAC7B,CAAC,YAAa,gBAAiB,KAAM,EAAAioC,KAAM,EAAAC,qBAC3C,CAAC,SAAU,GAAI,KAAM,EAAAa,OAAQ,EAAAC,uBAC7B,CAAC,OAAQ,GAAI,OAAQ,EAAAC,KAAM,EAAAC,uBAC3B,CAAC,OAAQ,GAAI,MAAO,EAAAD,KAAM,EAAAE,wBAC1B,CAAC,oBAAqB,GAAI,KAAM,EAAAC,kBAAmB,EAAAC,kCACnD,CAAC,gBAAiB,GAAI,KAAM,EAAAC,eAC5B,CAAC,UAAW,GAAI,KAAMlC,EAAUmC,SAChC,CAAC,WAAY,GAAI,KAAMrC,EAASoB,UAChC,CAAC,cAAe,GAAI,KAAM,EAAAkB,YAAa,EAAAC,4BACvC,CAAC,wBAAyB,GAAI,KAAM,EAAAC,sBAAuB,EAAAC,sCAC3D,CAAC,YAAa,GAAI,KAAMzC,EAAS0C,UAAW1C,EAAS2C,0BACrD,CAAC,OAAQ,GAAI,KAAMzC,EAAU0C,MAC7B,CAAC,MAAO,GAAI,KAAM5C,EAAS32C,KAC3B,CAAC,SAAU,GAAI,KAAM,EAAAw5C,OAAQ,EAAAC,uBAE7B,CAAC,UAAW,GAAI,KAAM,EAAAC,QAAS,EAAAC,wBAC/B,CAAC,MAAO,GAAI,KAAM9C,EAAUxtB,KAC5B,CAAC,MAAO,GAAI,KAAMstB,EAASluB,KAC3B,CAAC,MAAO,GAAI,KAAMkuB,EAASxqB,KAC3B,CAAC,KAAM,GAAI,KAAM0qB,EAAUroB,IAC3B,CAAC,MAAO,GAAI,OAAQ,EAAAorB,MAAO,EAAAC,sBAC3B,CAAC,MAAO,GAAI,MAAO,EAAAC,OAAQ,EAAAC,uBAC3B,CAAC,MAAO,GAAI,KAAMlD,EAAU77B,KAC5B,CAAC,QAAS,GAAI,KAAM67B,EAAUmD,OAC9B,CAAC,eAAgB,GAAI,KAAM,EAAAC,aAAc,EAAAC,uBACzC,CAAC,YAAa,GAAI,KAAM,EAAAC,UAAW,EAAAD,uBACnC,CAAC,aAAc,GAAI,KAAM,EAAAE,WAAY,EAAAF,uBACrC,CAAC,YAAa,GAAI,KAAM,EAAAG,UAAW,EAAAH,uBACnC,CAAC,aAAc,GAAI,KAAM,EAAAI,WAAY,EAAAJ,uBACrC,CAAC,YAAa,GAAI,OAAQ,EAAAK,UAAW,EAAAL,uBACrC,CAAC,kBAAmB,GAAI,KAAM,EAAAM,mBAAoB,EAAAN,uBAClD,CAAC,OAAQ,GAAI,KAAMvD,EAAS8D,MAC5B,CAAC,UAAW,GAAI,KAAM,EAAAC,SACtB,CAAC,SAAU,GAAI,KAAM,EAAAC,OAAQ,EAAAC,0BAC7B,CAAC,SAAU,GAAI,MAAO,EAAAD,OAAQ,EAAAE,0BAC9B,CAAC,QAAS,GAAI,KAAM,EAAArkB,OACpB,CAAC,UAAW,GAAI,KAAMmgB,EAASmE,SAC/B,CAAC,MAAO,GAAI,KAAMnE,EAASoE,KAC3B,CAAC,QAAS,GAAI,MAAO,EAAAC,UACrB,CAAC,QAAS,GAAI,MAAO,EAAA78C,MAAO,EAAA88C,sBAE5B,CAAC,UAAW,GAAI,OAAQ,EAAAC,QAAS,EAAAC,wBACjC,CAAC,UAAW,GAAI,MAAO,EAAAC,WAAY,EAAAC,2BAKnC,CAAC,QAAS,GAAI,OAAQ,EAAA9rC,MAAO,EAAA+rC,sBAC7B,CAAC,OAAQ,GAAI,KAAM3E,EAAS4E,MAC5B,CAAC,UAAW,GAAI,OAAQ,EAAAC,QAAS,EAAAC,wBACjC,CAAC,UAAW,GAAI,MAAO,EAAAC,YACvB,CAAC,MAAO,GAAI,KAAM7E,EAAUvsB,KAC5B,CAAC,MAAO,GAAI,KAAM,EAAAqxB,KAClB,CAAC,MAAO,GAAI,KAAMhF,EAASiF,KAC3B,CAAC,OAAQ,GAAI,KAAMjF,EAASkF,MAC5B,CAAC,OAAQ,GAAI,KAAM,EAAAC,MACnB,CAAC,YAAa,GAAI,KAAM,EAAA/P,UAAW,EAAAgQ,0BACnC,CAAC,WAAY,GAAI,MAAO,EAAAC,SAAU,EAAAC,2BAClC,CAAC,WAAY,GAAI,IAAK,EAAAD,SAAU,EAAAE,2BAChC,CAAC,YAAa,GAAI,OAAQ,EAAAC,UAAW,EAAAC,0BACrC,CAAC,YAAa,GAAI,MAAO,EAAAC,cACzB,CAAC,MAAO,GAAI,KAAMxF,EAAUpoB,K,+ICvH9B,eAIA,UAEA,UAQM6tB,EAAoC,CACxCz3C,KAAM,qBACNqiC,WAAY,CAAC,IAAK,QAAS,IAAK,OAAQ,YACxCgL,WACI,CAAC,EAAAgB,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,WAG9F,EAAAmC,mBACT,CAACqF,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAQR,CAPQsK,EAAiBvJ,IAAI,OAAD,wBAE1BsJ,GAAiC,CACpChK,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAMiwC,EAAoCF,EAAkBtK,EAAQ9S,KAE3E8S,KAIG,EAAAkF,kCACR95C,IACC,MAAMq/C,EAAUr/C,EAAK8hC,WAAWO,SAAS,UAAW,MAC9Cid,EAAWt/C,EAAK8hC,WAAWO,SAAS,WAAY,IAChDkd,EAAUv/C,EAAK8hC,WAAWQ,OAAO,UAAW,GAClD,OAAO,EAAAd,4BAA4B,CAAC6d,UAASC,WAAUC,WAAS,EAGtE,MAAMH,EACF,CAACF,EAAyCtK,EAAkB9S,KAEtD,MAAM4H,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAC1DiQ,EAAOuL,EAAO,GAAGxd,KAAKx2B,QACrB4+C,EAAYC,GACfP,EAAiB3K,+BAA+BK,EAAO,GAAGxd,KAAM,EAAAye,YAAY6B,UAC1EjG,EAAe,yBACTpI,iEAC2BmW,MAAeC,0CAC5B/V,EAAKC,kEACND,EAAKC,qEACDD,EAAKC,kEACZD,EAAKC,iGAE+B7H,EAAWud,wBAErE,OAAO,OAAP,wBACKJ,GAAiC,CACpClpB,OAAQ,CAACqB,KAAMwd,EAAO,GAAGxd,KAAM9D,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC9EjG,gBAAY,EAIlB0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,yCAGlB,MAAMM,EAAIuuC,EAAO,GACX8K,EAAQ9K,EAAO,GACf3uC,EAAI2uC,EAAO,GACX+K,EAAO/K,EAAO,GACdgL,EAAOhL,EAAO,GAIpB,GAAIvuC,EAAE+wB,KAAKx2B,OAAS,GAA2B,IAAtB8+C,EAAMtoB,KAAKx2B,QAAkC,IAAlBqF,EAAEmxB,KAAKx2B,QAAqC,IAArB++C,EAAKvoB,KAAKx2B,QAC5D,IAArBg/C,EAAKxoB,KAAKx2B,OACZ,MAAM,IAAImF,MAAM,wBAElB,GAAI25C,EAAMtoB,KAAK,KAAO/wB,EAAE+wB,KAAK,IAAMnxB,EAAEmxB,KAAK,KAAO/wB,EAAE+wB,KAAK,IAAMuoB,EAAKvoB,KAAK,KAAO/wB,EAAE+wB,KAAK,IAClFwoB,EAAKxoB,KAAK,KAAO/wB,EAAE+wB,KAAK,GAC1B,MAAM,IAAIrxB,MAAM,wBAElB,GAAgB,YAAXM,EAAEitB,MAAiC,YAAXjtB,EAAEitB,MAAuC,YAAfosB,EAAMpsB,MAAqC,YAAfosB,EAAMpsB,MACzE,YAAXrtB,EAAEqtB,MAAiC,YAAXrtB,EAAEqtB,MAAsC,YAAdqsB,EAAKrsB,MAAoC,YAAdqsB,EAAKrsB,MACpE,YAAdssB,EAAKtsB,MAAoC,YAAdssB,EAAKtsB,KACnC,MAAM,IAAIvtB,MAAM,8B,uSCzFpB,gBACA,UACA,UAEA,UAEA,SAAgB85C,IAUd,MAAO,CAACvR,KARK,4HAQC9mC,KATD,OASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBC,IAUd,MAAO,CAACzR,KARK,4HAQC9mC,KATD,OASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBE,IAUd,MAAO,CAAC1R,KARK,4HAQC9mC,KATD,OASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBG,IAUd,MAAO,CAAC3R,KARK,4HAQC9mC,KATD,OASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBI,IAUd,MAAO,CAAC5R,KARK,oJAQC9mC,KATD,SASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBK,IACd,MAAM34C,EAAO,WAYb,MAAO,CAAC8mC,KAXK,aACL9mC,gEAGDA,+HAOOA,OAAM8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBM,IAad,MAAO,CAAC9R,KAXK,4OAWC9mC,KAZD,QAYO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBO,IAed,MAAO,CAAC/R,KAbK,mTAaC9mC,KAdD,OAcO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBQ,IAed,MAAO,CAAChS,KAbK,iTAaC9mC,KAdD,MAcO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBS,IAed,MAAO,CAACjS,KAbK,mTAaC9mC,KAdD,OAcO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBU,IACd,OAoBF,SAA2BrM,GACzB,MAAM3sC,EAAO,OASb,MAAO,CAAC8mC,KARK,oIAQC9mC,OAAM8rB,KAAM,EAAAsb,aAAakR,WACzC,CA/BSW,EACT,CACA,SAAgBC,IAed,MAAO,CAACpS,KAbK,+SAaC9mC,KAdD,SAcO8rB,KAAM,EAAAsb,aAAakR,WACzC,CAhKA,YAYA,YAYA,YAYA,YAYA,cAYA,gBAeA,aAeA,YAiBA,WAiBA,YAiBA,YAGA,cA+BA,MAAMa,EACF,CAAC7f,EAAgC8T,EAAkBgM,EAClDC,EAAoCjM,EAAO,GAAGthB,KAAM6N,KACnD,MAAMqT,EAAc1T,EAAQf,QAAQ6F,KAAO,EAAAiQ,YAAYC,OAAS,EAAAD,YAAY6B,SAC5E,MAAO,CACLlwC,KAAMo5C,EAASp5C,KACfqiC,WAAY,CAAC,IAAK,KAClBgL,WAAY,CAACL,EAAaA,GAC1BS,UAAW9T,EACXhyB,IAAK,IAAM2xC,EAAwBhgB,EAAS8T,EAAQgM,EAAUC,GAC/D,EAGDC,EACF,CAAChgB,EAAgC8T,EAAkBgM,EAClDC,EAAoCjM,EAAO,GAAGthB,QAC7C,MAAMkhB,EAAc1T,EAAQf,QAAQ6F,KAAO,EAAAiQ,YAAYC,OAAS,EAAAD,YAAY6B,SACtEqJ,GAAe,EAAAxV,UAAUyV,SAASpM,EAAO,GAAGxd,KAAMwd,EAAO,GAAGxd,MAClE,IAAI6pB,EAAcrM,EAAO,GAAGxd,KAE5B,MAAM8pB,EAAmBpgB,EAAQf,QAAQ6F,KAEzC,GAAImb,EAAa,CACf,MAAMI,EAAkB,EAAArW,cAAcsW,UAAUxM,EAAO,GAAGxd,KAAMwd,EAAO,GAAGxd,MAAM,GAChF,IAAK+pB,EACH,MAAM,IAAIp7C,MAAM,gDAElBk7C,EAAcE,EACd,MAAMjO,EAAa+N,EAAYrgD,OACzBygD,EAAkC,IAA1BzM,EAAO,GAAGxd,KAAKx2B,OAAeg0C,EAAO,GAAGxd,KAAKx2B,OAAS,EAC9D0gD,EAAkC,IAA1B1M,EAAO,GAAGxd,KAAKx2B,OAAeg0C,EAAO,GAAGxd,KAAKx2B,OAAS,EAC9D2gD,EAAmC,IAA1B3M,EAAO,GAAGxd,KAAKx2B,OAAe,qCAAuC,mBAC9E4gD,EAAmC,IAA1B5M,EAAO,GAAGxd,KAAKx2B,OAAe,qCAAuC,mBAE9E8oC,EAAO,EAAAvB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SACjDqY,EAAeyP,EAAmB,WACxCN,EAAStS,8HAIOsS,EAASp5C,wBACvBkiC,EAAK3T,4BAEiC,WACxC6qB,EAAStS,yCACiB4E,+BACXmO,6BACAC,gBACbC,cACAC,qBACOZ,EAASp5C,6CAGlB,MAAO,CACLA,KAAMo5C,EAASp5C,KACfqiC,WAAY,CAAC,IAAK,KAClBgL,WAAY,CAACL,EAAaA,GAC1Bze,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMutB,EAAkBrM,eACpD/C,eACAC,QAASwP,E,CAGb,MAAMxX,EAAO,EAAAvB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SACjDqY,EAAe,SACrBmP,EAAStS,4CAEG5E,EAAKC,6CACLD,EAAKC,iDACDiX,EAASp5C,wBACvBkiC,EAAK3T,gCAIP,MAAO,CACLvuB,KAAMo5C,EAASp5C,KACfqiC,WAAY,CAAC,IAAK,KAClBgL,WAAY,CAACL,EAAaA,GAC1Bze,OAAQ,CAACqB,KAAMwd,EAAO,GAAGxd,KAAM9D,KAAMutB,EAAkBrM,eACvD/C,eACAC,SAAS,EACV,EAGM,EAAAzlB,IAAM,CAAC6U,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQiL,KAAYjL,IAE3E,EAAA1jB,IAAM,CAAC4P,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQyL,IAAW,QAASzL,IAEnF,EAAA7nB,IAAM,CAAC+T,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQmL,KAAYnL,IAE3E,EAAAiG,MAAQ,CAAC/Z,EAAgC8T,IACtC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQsL,IAAa,QAAStL,IAErF,EAAA+G,QAAU,CAAC7a,EAAgC8T,IACxC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQuL,IAAe,QAASvL,IAEvF,EAAAsH,KAAO,CAACpb,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQwL,IAAY,QAASxL,IAEpF,EAAA5oB,IAAM,CAAC8U,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQoL,KAAYpL,IAE3E,EAAAzjB,GAAK,CAAC2P,EAAgC8T,IACnC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQ0L,IAAU,QAAS1L,IAElF,EAAAj3B,IAAM,CAACmjB,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQ4L,KAAY5L,IAE3E,EAAA+H,MAAQ,CAAC7b,EAAgC8T,IACtC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQ8L,KAAc9L,IAE7E,EAAA3nB,IAAM,CAAC6T,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQqL,KAAYrL,IAE3E,EAAAxjB,IAAM,CAAC0P,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIgL,EAA8B7f,EAAS8T,EAAQ2L,IAAW,QAAS3L,G,mHCxShG,gBAGa,EAAAyD,KACT,CAACvX,EAAgC8T,EAAkB6M,KACjDtC,EAAevK,GACR,CAAC9T,EAAQuX,KAAKzD,EAAO,GAAI6M,KAGzB,EAAA1H,oBAAgE/5C,GACzE,EAAA0hD,UAAUC,wBAAwB3hD,EAAK8hC,WAAWQ,OAAO,OAE7D,MAAM6c,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,0BAGlB,GAAuB,WAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,sB,6HCpBpB,gBAEA,UACA,UAGA,UAoHa,EAAA67C,oCACT,CAAC9gB,EAAgC8T,EAAkB9S,KACjD,MAAM+f,GApH+BC,EAoHclN,EAAOh0C,OApHDq0C,EAoHSnT,EAAWX,SApHE,CACnF35B,KAAM,kBACNqiC,WAAYt3B,MAAM4pB,KAAK,CAACv7B,OAAQkhD,IAAa,CAACjiD,EAAGpB,IAAM,IAAIA,MAC3Do2C,WAAYtiC,MAAMuvC,GAAYC,KAAK,EAAAlM,YAAYC,QAC/Cb,cAJwC,IAAC6M,EAAoB7M,EAqHzD,OAAO,OAAP,wBAAW4M,GAAQ,CAAE1yC,IAAK,IA7G5B,EAAC2xB,EAAgC+gB,EAA2BjN,EAAkBoN,KAC5E,MAAMC,EAAarN,EAAO,GAAGxd,KAAKt2B,QAClC,GAAIkhD,GAAQC,EAAWrhD,QAAUohD,GAAS,EAAIC,EAAWrhD,OACvD,MAAM,IAAImF,MAAM,gEAEdi8C,EAAO,IACTA,EAAOC,EAAWrhD,OAASohD,GAI7B,MAAMf,EAAcgB,EAAWnhD,MAAM,GACrC,IAAK,IAAIrC,EAAI,EAAGA,EAAIm2C,EAAOh0C,OAAQnC,IAAK,CACtC,MAAMyjD,EAAatN,EAAOn2C,GAAG24B,KAAKt2B,QAClC,IAAK,IAAIqhD,EAAY,EAAGA,EAAYF,EAAWrhD,OAAQuhD,IAErD,GAAIA,IAAcH,EAChBf,EAAYe,IAASE,EAAWC,QAG7B,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAIp8C,MAAM,mC,CAKtB,MAAMsjC,EAAO4X,EAAYrgD,OACnBwoC,EAAS,EAAAgZ,YAAY,SAAU/Y,GAC/BgZ,EAAQ,EAAArX,kBAAkB3B,GAC1BiZ,EAAgB,EAAAC,oBAEhBC,EAAS5N,EAAOrT,KAAI9iC,GAAKA,EAAE24B,OAC3Bif,EAAW,EAAAjL,cAAc/B,GACzBoZ,EAAoB,IAAIlwC,MAAMiwC,EAAO5hD,OAAS,GAEpD6hD,EAAQ,GAAKD,EAAO,GAAGR,GACvB,IAAK,IAAIvjD,EAAI,EAAGA,EAAIgkD,EAAQ7hD,OAAQnC,IAClCgkD,EAAQhkD,GAAKgkD,EAAQhkD,EAAI,GAAK+jD,EAAO/jD,GAAGujD,GAG1C,MAAMU,EAAUrM,EAAS2L,GACnBW,EAAetM,EAASv1C,OAAO,GAC/B8hD,EAAcvM,EAAS16B,OAE7B,IAAIknC,EAAkB,OAAOH,OAAaD,EAAQ,wDAEpCG,YAAsBD,EAAahnC,uBAEjD,IAAK,IAAIld,EAAI,EAAGA,EAAIgkD,EAAQ7hD,OAAQnC,IAAK,CACvC,MAAM+H,EAAQi8C,EAAQhkD,EAAI,GAC1BokD,GAAmB,qBACTH,OAAaD,EAAQhkD,UAAUikD,QAAcD,EAAQhkD,EAAI,gEAErDA,KAAKqkD,EAA0BzM,EAAUqM,EAASl8C,8BACjDs8C,EAA0BH,EAAcD,EAASl8C,sB,CAGlE,MAAMu8C,EAAYN,EAAQ7hD,OACpB4F,EAAQi8C,EAAQA,EAAQ7hD,OAAS,GACvCiiD,GAAmB,uDAELE,KAAaD,EAA0BzM,EAAUqM,EAASl8C,4BACzDs8C,EAA0BH,EAAcD,EAASl8C,QAEhE,MAAMkjC,EAAO,EAAAvB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SAEjDqY,EAAe,eACf6Q,+BACejM,EAAS9U,KAAIpgC,GAAK,OAASA,uBACxC0hD,0DAIAR,mEACqBhM,EAAShN,EAAO,2BAC9BgN,EAAShN,EAAO,eAAegN,EAAShN,EAAO,2BAC/CgN,EAAShN,EAAO,4DAEKD,mCAE5BA,EAAOC,EAAO,QAAQD,EAAOC,EAAO,4BAChCD,EAAOC,EAAO,QAAQ4X,EAAY5X,EAAO,4CACvBD,qCAGtBA,EAAOC,EAAO,QAAQD,EAAOC,EAAO,4BAChCD,EAAOC,EAAO,QAAQ4X,EAAY5X,EAAO,4CACvBD,qCAGtBA,EAAOC,EAAO,QAAQD,EAAOC,EAAO,4BAChCD,EAAOC,EAAO,QAAQ4X,EAAY5X,EAAO,0BACzCD,EAAOC,EAAO,QAAQ4X,EAAY5X,EAAO,4CACvBD,mCAEtBM,EAAK3T,0CAIb,OAAO,OAAP,wBACK8rB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAYC,QAC3ErE,eACAC,SAAS,GAAI,EAOiBsR,CAA8BliB,EAAS+gB,EAAUjN,EAAQ9S,EAAWkgB,OAAK,EAG/G,MAAMc,EAA4B,CAACzM,EAAoBqM,EAAiBl8C,KACtE,MAAMy8C,EAAa5M,EAASx0C,QAAQ6gD,GAQpC,OAPYrM,EAAS9U,KAAI,CAACxiC,EAAGmkD,IACvBA,IAAQD,EACH,GAAGlkD,OAAOyH,IAEVzH,IAGA4c,MAAM,C,uHC1InB,eAKA,UAEA,UAMa,EAAAw+B,OACT,CAAC+E,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GACXsK,EAAiBnf,QAAQ6F,MAAQgP,EAAO,GAAGxd,KAAKx2B,OAAS,EAGpD,CADHs+C,EAAiBvJ,IAAI,EAAAiM,oCAAoC1C,EAAkBtK,EAAQ9S,GAAa8S,IAK7F,CADHsK,EAAiBvJ,IAAIwN,EAAsCjE,EAAkBtK,EAAQ9S,GAAa8S,KAK9G,MAwEMuO,EACF,CAACriB,EAAgC8T,EAAkB9S,KACjD,MAAM+f,GA1EiCC,EA0EclN,EAAOh0C,OA1EDq0C,EA0ESnT,EAAWX,SA1EE,CACrF35B,KAAM,SACNqiC,WAAYt3B,MAAM4pB,KAAK,CAACv7B,OAAQkhD,IAAa,CAACjiD,EAAGpB,IAAM,IAAIA,MAC3Do2C,WAAYtiC,MAAMuvC,GAAYC,KAAK,EAAAlM,YAAY6B,UAC/CzC,cAJ0C,IAAC6M,EAAoB7M,EA2E3D,OAAO,OAAP,wBAAW4M,GAAQ,CAAE1yC,IAAK,IAnE5B,EAAC2xB,EAAgC+gB,EAA2BjN,EAAkBoN,KAC5E,MAAMC,EAAarN,EAAO,GAAGxd,KAAKt2B,QAClC,GAAIkhD,GAAQC,EAAWrhD,QAAUohD,GAAS,EAAIC,EAAWrhD,OACvD,MAAM,IAAImF,MAAM,gEAEdi8C,EAAO,IACTA,EAAOC,EAAWrhD,OAASohD,GAI7B,MAAMf,EAAcgB,EAAWnhD,MAAM,GACrC,IAAK,IAAIrC,EAAI,EAAGA,EAAIm2C,EAAOh0C,OAAQnC,IAAK,CACtC,MAAMyjD,EAAatN,EAAOn2C,GAAG24B,KAAKt2B,QAClC,IAAK,IAAIqhD,EAAY,EAAGA,EAAYF,EAAWrhD,OAAQuhD,IAErD,GAAIA,IAAcH,EAChBf,EAAYe,IAASE,EAAWC,QAG7B,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAIp8C,MAAM,mC,CAKtB,MAAMsjC,EAAO4X,EAAYrgD,OAEnBwiD,EAAmB,IAAI7wC,MAAcqiC,EAAOh0C,QAClD,IAAIyiD,EAAc,EAClB,IAAK,IAAI5kD,EAAI,EAAGA,EAAI2kD,EAAiBxiD,SAAUnC,EAC7C4kD,GAAezO,EAAOn2C,GAAG24B,KAAK4qB,GAC9BoB,EAAiB3kD,GAAK4kD,EAGxB,IAAIC,EAAwC,GAG1CA,EADE1O,EAAOh0C,OAAS,EACsB2iD,EAA4CH,GAE5CI,EAA4CJ,GAGtF,MAEM3R,EAAe,aAFqBgS,EAAqC7O,EAAOh0C,OAAQyoC,eAC9Cqa,EAA2CN,eAIvFE,wCAC0Bja,2EAC+B2Y,kEAG7CA,gBAAmBA,oKAKnC,OAAO,OAAP,wBACKH,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAOkBkS,CAAgC7iB,EAAS+gB,EAAUjN,EAAQ9S,EAAWkgB,OAAK,EAG3GuB,EAA+CH,IACnD,MAAMQ,EAAaR,EAAiB7hB,KAAI,CAAC5hB,EAAMlhB,IAAM,YAAYkhB,cAAiBlhB,UAElF,MAAO,sDACDmlD,EAAWjoC,KAAK,YAClB,EAIA6nC,EAA+CJ,GACjDG,EAA4CH,GAE1CK,EAAuC,CAACI,EAAyBC,KACrE,MAAMC,EAAsB,CAAC,mEAAmED,SAChG,IAAK,IAAIrlD,EAAI,EAAGA,EAAIolD,IAAmBplD,EAC3B,IAANA,EACFslD,EAAU97C,KAEN,yBAAuBxJ,iBAAiBA,iBACnCA,IAAMolD,EAAkB,EACjCE,EAAU97C,KAEN,qBAAmBxJ,iBAEvBslD,EAAU97C,KAEN,8BAA4BxJ,iBAAiBA,iBAMrD,OAHAslD,EAAU97C,KACN,OAEG87C,EAAUpoC,KAAK,KAAK,EAGvB+nC,EAA8CN,IAClD,MAAMW,EAAsB,CAAC,sDAC7B,IAAK,IAAItlD,EAAI,EAAGA,EAAI2kD,EAAiBxiD,SAAUnC,EACnC,IAANA,EACFslD,EAAU97C,KAEN,kBAAgBxJ,eAAe2kD,EAAiB3kD,SAC3CA,IAAM2kD,EAAiBxiD,OAAS,EACzCmjD,EAAU97C,KAEN,mBAAiBm7C,EAAiB3kD,SAEtCslD,EAAU97C,KAEN,uBAAqBxJ,eAAe2kD,EAAiB3kD,SAO7D,OAJAslD,EAAU97C,KACN,OAGG87C,EAAUpoC,KAAK,KAAK,EAGhB,EAAAy+B,sBAAmEp6C,GAC5E,EAAAwhC,4BAA4B,CAACwgB,KAAMhiD,EAAK8hC,WAAWQ,OAAO,UAE9D,MAAM6c,EAAkBvK,IACtB,IAAKA,GAAUA,EAAOh0C,OAAS,EAC7B,MAAM,IAAImF,MAAM,kBAGlB,MAAMi+C,EAAYpP,EAAO,GAAGthB,KACtB2wB,EAAsBrP,EAAO,GAAGxd,KAAKx2B,OAG3C,GAAkB,WAAdojD,EACF,MAAM,IAAIj+C,MAAM,sCAGlB,IAAK,MAAM+vB,KAAS8e,EAAQ,CAE1B,GAAI9e,EAAMxC,OAAS0wB,EACjB,MAAM,IAAIj+C,MAAM,oCAIlB,GAAI+vB,EAAMsB,KAAKx2B,SAAWqjD,EACxB,MAAM,IAAIl+C,MAAM,2C,qIC5LtB,gBAEA,UAEA,UAEA,UACA,UAyEa,EAAAm+C,2CACT,CAAChF,EAAyCtK,EAA2B9S,KAE/D,MAAM+f,GA1EkCsC,EA0EkBvP,EAAOh0C,OAAS,EA1EhBq0C,EA0EmBnT,EAAWX,SA1ES,CACzG35B,KAAM,cACNqiC,WAAYsa,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDtP,WAAYsP,EAAU,CAAC,EAAAtO,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzDzC,cAL+C,IAACkP,EAAkBlP,EA2E1D,OAAO,OAAP,wBACK4M,GAAQ,CACX1yC,IAAK,IApEb,EAAC+vC,EAAyCtK,EAA2BiN,EACpE/f,KACC,MACMsiB,EADUxP,EAAOh0C,OAAS,EACF,oCAAsC,GAC9DyjD,EAASzP,EAAO,GAAGxd,KAAKt2B,QACxBwjD,EAAS1P,EAAO,GAAGxd,KAAKt2B,QACxByjD,EAAyBD,EAAO,GAAKxiB,EAAWsU,MACtD,EAAArQ,OAAOE,QACH,cACA,WAAWnE,EAAW0iB,sBAAsB1iB,EAAW2iB,oBAAoB3iB,EAAWsU,sBAClFtU,EAAW4iB,qBAAqB5iB,EAAW6iB,iBAAiB7iB,EAAWwH,WAC/E,MAAM2X,EACF,EAAA2D,qBAAqBP,EAAQC,EAAQxiB,EAAW2iB,UAAW3iB,EAAW6iB,KAAM7iB,EAAWwH,SACrFI,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,UAC1D,mBAACyrB,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBjjB,GAE7D2P,EAAe,mCACK3P,EAAWwH,QAAQ,OAAOxH,EAAWwH,QAAQ,oCAChDxH,EAAW6iB,KAAK,OAAO7iB,EAAW6iB,KAAK,WAChEE,oNAMkCN,2EAGMD,EAAO,6DACZA,EAAO,2DACNA,EAAO,mEACCxiB,EAAW2iB,UAAU,gDAE7BJ,EAAO,kFAIPC,EAAO,kEACCxiB,EAAW2iB,UAAU,8CAC7BJ,EAAO,8PAUzCD,UACAU,UACApb,EAAK3T,2CAGL,OAAO,OAAP,wBACK8rB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,eACAC,SAAS,GAAI,EAUEsT,CAAqC9F,EAAkBtK,EAAQiN,EAAU/f,IAAW,C,6HCnF3G,gBACA,UACA,SAEa,EAAAmjB,sBACT,CAAC/F,EAAyCtK,EAA2B9S,KACnE,MAAMojB,EAAStQ,EAAO,GAAGxd,KACnB+tB,EAASvQ,EAAO,GAAGxd,KACnB6pB,EACF,EAAA2D,qBAAqBM,EAAQC,EAAQrjB,EAAW2iB,UAAW3iB,EAAW6iB,KAAM7iB,EAAWwH,SACrF8b,EAAYlG,EAAiBrH,cAAcjD,EAAO,GAAI,CAACsQ,EAAO,GAAIA,EAAO,GAAKA,EAAO,KACrFG,EAAYnG,EAAiBrH,cAAcjD,EAAO,GAAI,CAACuQ,EAAO,GAAIA,EAAO,KAEzEG,EAAe1Q,EAAOh0C,OAAS,EAAI,CAACykD,EAAWD,EAAWxQ,EAAO,IAAM,CAACyQ,EAAWD,GACnFG,EAAerG,EAAiBvJ,IAClC,EAAA6P,oCAAoCtG,EAAkBoG,EAAcxjB,GAAawjB,GACrF,OAAOpG,EAAiBrH,cAAc0N,EAActE,EAAY,EAGzD,EAAAwE,aACT,CAACvG,EAAyCtK,EAA2B9S,KACnE,MAAMojB,EAAStQ,EAAO,GAAGxd,KACnB+tB,EAASvQ,EAAO,GAAGxd,KACnB6pB,EACF,EAAA2D,qBAAqBM,EAAQC,EAAQrjB,EAAW2iB,UAAW3iB,EAAW6iB,KAAM7iB,EAAWwH,SAGrFoc,EAAexG,EAAiBvJ,IAClC,EAAAgQ,oCAAoCzG,EAAkBtK,EAAO,GAAIA,EAAO,GAAIqM,EAAanf,GACzF,CAAC8S,EAAO,KAGNgR,EAAiB1G,EAAiBrH,cAAcjD,EAAO,GAAI,CAACuQ,EAAO,GAAIA,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAGtGG,EACiB,IAAlB1Q,EAAOh0C,OAAgB,CAACglD,EAAgBF,EAAc9Q,EAAO,IAAM,CAACgR,EAAgBF,GACnFH,EAAerG,EAAiBvJ,IAClC,EAAA6P,oCAAoCtG,EAAkBoG,EAAcxjB,GAAawjB,GAIrF,OADuBpG,EAAiBrH,cAAc0N,EAActE,EAC/C,C,qIC7C3B,eAKA,UAEA,UAGA,UAEM4E,EACF,CAACC,EAAerc,EAAgBsc,EAAaC,EAAgBC,EAAkBC,KAC1EJ,EAAQ,GAAKrc,EAASsc,GAAOC,EAAS,GAAKC,EAAW,EAAIC,EAE7DC,EAAoB,CAACC,EAAkB5B,EAAiBG,EAAgB5lB,EAAcC,KAC1F,MAAMqnB,EAAWz3C,KAAKwD,MAAMg0C,EAAW,GACvB,eAAZ5B,GACFG,EAAK5lB,GAAQsnB,EACb1B,EAAK3lB,GAAQonB,EAAWC,GACH,eAAZ7B,IACTG,EAAK5lB,GAAQqnB,EAAWC,EACxB1B,EAAK3lB,GAAQqnB,E,EA0BJ,EAAA9L,cACT,CAAC2E,EAAoCtK,EAAkB9S,KACrDqd,EAAevK,EAAQ9S,GAChBwkB,EAAgBpH,EAAkBtK,EAAQ9S,IAGvD,MAAMwkB,EACF,CAACpH,EAAyCtK,EAAkB9S,KAC1D,MAAMykB,EAAqBC,EAAmC1kB,EAAY8S,GAC1E,MAAO,CAAC6R,EAAwBvH,EAAkBtK,EAAQ2R,GAAoB,EAiF9EE,EACF,CAACvH,EAAyCtK,EAA2B9S,IAEhDod,EAAiBvJ,IAbtC,EAACuJ,EAAyCtK,EAA2B9S,KAE/D,MAAM+f,GAtE4BsC,EAsEkBvP,EAAOh0C,OAAS,EAtEhBq0C,EAsEmBnT,EAAWX,SAtER,CAClF35B,KAAM,gBACNqiC,WAAYsa,EAAU,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KAC9CtP,WAAYsP,EAAU,CAAC,EAAAtO,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzDzC,cALyC,IAACkP,EAAkBlP,EAuEpD,OAAO,OAAP,wBACK4M,GAAQ,CACX1yC,IAAK,IAhEb,EAAC+vC,EAAyCtK,EAA2BiN,EACpE/f,KACC,MACM4kB,EADU9R,EAAOh0C,OAAS,EACJ,uBAAyB,MAC/CyjD,EAASzP,EAAO,GAAGxd,KACnBktB,EAAS1P,EAAO,GAAGxd,KACnBmtB,EAAyBD,EAAO,GAChCqC,EAAwBrC,EAAO,GAAKxiB,EAAWsU,MAC/C6K,EAAc,CAACrM,EAAO,GAAGxd,KAAK,GAAIwd,EAAO,GAAGxd,KAAK,GAAK0K,EAAWsU,SAAUtU,EAAWmf,aACtFvX,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,UAC1D,mBAACyrB,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBjjB,GAE7D2P,EAAe,mCACK3P,EAAWwH,QAAQ,OAAOxH,EAAWwH,QAAQ,oCAChDxH,EAAW6iB,KAAK,OAAO7iB,EAAW6iB,KAAK,WAChEE,wMAQkCN,yDACcA,2BAEhCmC,2DACkCC,iEACfA,2DACHrC,EAAO,uDACLA,EAAO,wDACNxiB,EAAW2iB,UAAU,eAAe3iB,EAAW2iB,UAAU,wLAKtDJ,EAAO,kDACPA,EAAO,yPAS3CS,UACApb,EAAK3T,2CAGL,OAAO,OAAP,wBACK8rB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,eACAC,SAAS,GAAI,EAUEkV,CAAuC1H,EAAkBtK,EAAQiN,EAAU/f,IAAW,EAS/F+kB,CAA6C3H,EAAkBtK,EAAQ9S,GAAa8S,GAI5F4R,EAAqC,CAAoC1kB,EAAe8S,KAC5F,MAAM8P,EAAc5iB,EAAW4iB,YAAY5jD,QAE3C,GAAsC,IAAlCghC,EAAW4iB,YAAY9jD,OACzB,IAAK,IAAInC,EAAI,EAAGA,EAAIm2C,EAAO,GAAGxd,KAAKx2B,SAAUnC,EAC3CimD,EAAYz8C,KAAK2sC,EAAO,GAAGxd,KAAK34B,IAIpC,MAAMkmD,EAAO7iB,EAAW6iB,KAAK7jD,QACvBmgD,EAAcnf,EAAWmf,YAAYngD,QAjIzC,EAACmhD,EAA+ByC,EAAgCD,EAA8BD,EAC7FG,EAAgBrb,EAA4Bwd,EAAkC7F,KAC7E,MAAM8F,EAAc9E,EAAWrhD,OAAS,EAClComD,EAAqC,IAAvB/F,EAAYrgD,OAChC,IAAK,IAAInC,EAAI,EAAGA,EAAIsoD,IAAetoD,EAAG,CACpC,MAAMynD,EAAUc,EAAc/E,EAAWxjD,EAAI,GAAK6qC,EAAQ7qC,GAAKwiD,EAAYxiD,GACrE2nD,EAAWP,EAAgB5D,EAAWxjD,EAAI,GAAI6qC,EAAQ7qC,GAAIkmD,EAAKlmD,GAAIimD,EAAYjmD,GAAIgmD,EAAUhmD,GAAIynD,GACvGC,EAAkBC,EAAU5B,EAASG,EAAMlmD,EAAGA,EAAIsoD,GAC9CC,GACF/F,EAAYh5C,KACRqhC,EAAQ7qC,IAAMwjD,EAAWxjD,EAAI,GAAK,GAAKqoD,EAAcroD,IAAMimD,EAAYjmD,GAAK,GAAKgmD,EAAUhmD,GAAK,EAChGkmD,EAAKlmD,GAAKkmD,EAAKlmD,EAAIsoD,G,GA0H/BE,CAHmBrS,EAAO,GAAGxd,KAIbstB,EAAa5iB,EAAW2iB,UAAW3iB,EAAW0iB,QAASG,EAAM7iB,EAAWwH,QACpFxH,EAAWglB,cAAe7F,GAG9B,MAAMiG,EAAmB7nD,OAAOC,OAAO,CAAC,EAAGwiC,GAE3C,OADAziC,OAAOC,OAAO4nD,EAAe,CAACxC,cAAaC,OAAM1D,cAAa9f,SAAUW,EAAWX,WAC5E+lB,CAAa,EAGT,EAAA1M,6BACRx6C,IACC,MAAM8hC,EAAa9hC,EAAK8hC,WAClBqlB,EAAuB,EAAAC,kCAAkCtlB,GAEzD0iB,EAAU1iB,EAAWS,UAAU,WAAY,UAC3CkiB,EAAY3iB,EAAWY,QAAQ,YAAa,CAAC,EAAG,IAChD0T,EAAQtU,EAAWQ,OAAO,QAAS,GACnCoiB,EAAc5iB,EAAWY,QAAQ,eAAgB,IACjDokB,EAAgBhlB,EAAWY,QAAQ,iBAAkB,CAAC,EAAG,IACzDue,EAAcnf,EAAWY,QAAQ,eAAgB,IACjDiiB,EAAO7iB,EAAWY,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IAC5C4G,EAAUxH,EAAWY,QAAQ,UAAW,CAAC,EAAG,IAElD,OAAO,EAAAlB,4BAA4B,OAAD,QAC7BgjB,UAASC,YAAWrO,QAAOsO,cAAaoC,gBAAe7F,cAAa0D,OAAMrb,WAAY6d,GAAsB,EAGvH,MAAMhI,EAAiB,CAACvK,EAAkB9S,KAGxC,IAAK8S,GAA6B,IAAlBA,EAAOh0C,QAAkC,IAAlBg0C,EAAOh0C,OAC5C,MAAM,IAAImF,MAAM,+BAIlB,GAA8B,IAA1B6uC,EAAO,GAAGxd,KAAKx2B,QAA0C,IAA1Bg0C,EAAO,GAAGxd,KAAKx2B,OAChD,MAAM,IAAImF,MAAM,6CAMlB,GAFoB6uC,EAAO,GAAGxd,KAAK,KACXwd,EAAO,GAAGxd,KAAK,GAErC,MAAM,IAAIrxB,MAAM,qDAGlB,MAAMshD,EAAczS,EAAO,GAAGxd,KAAK,GAAK0K,EAAWsU,MAGnD,GAAsB,IAAlBxB,EAAOh0C,SAA2C,IAA1Bg0C,EAAO,GAAGxd,KAAKx2B,QAAgBg0C,EAAO,GAAGxd,KAAK,KAAOiwB,GAC/E,MAAM,IAAIthD,MAAM,gBAGlB,MAAMghD,EAAcnS,EAAO,GAAGxd,KAAKx2B,OAAS,EAE5C,GAAIkhC,EAAW2iB,UAAU7jD,SAAWmmD,EAClC,MAAM,IAAIhhD,MAAM,uBAAuBghD,MAIzC,GAAIjlB,EAAWwH,QAAQ1oC,SAAWmmD,EAChC,MAAM,IAAIhhD,MAAM,qBAAqBghD,MAIvC,GAAIjlB,EAAW6iB,KAAK/jD,SAAyB,EAAdmmD,EAC7B,MAAM,IAAIhhD,MAAM,kBAAgC,EAAdghD,MAIpC,GAAIjlB,EAAWglB,cAAclmD,SAAWmmD,EACtC,MAAM,IAAIhhD,MAAM,4BAA4BghD,MAK9C,GAAsC,IAAlCjlB,EAAW4iB,YAAY9jD,QAAgBkhC,EAAW4iB,YAAY9jD,SAAWg0C,EAAO,GAAGxd,KAAKx2B,OAAS,EACnG,MAAM,IAAImF,MAAM,wBAIlB,GAAsC,IAAlC+7B,EAAWmf,YAAYrgD,QAAgBkhC,EAAWmf,YAAYrgD,SAAWg0C,EAAO,GAAGxd,KAAKx2B,OAAS,EACnG,MAAM,IAAImF,MAAM,wBAIlB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,mDAGlB,GAAsB,IAAlB6uC,EAAOh0C,QAAmC,YAAnBg0C,EAAO,GAAGthB,KACnC,MAAM,IAAIvtB,MAAM,mD,2IC7PpB,eAKA,UAGA,UACA,UACA,UACA,UACA,UACA,UAGa,EAAA6+C,qBACT,CAAC3C,EAA+ByC,EAAgCD,EAC/D6C,EAA+Bhe,KAC9B,MAAMie,EAAYtF,EAAW,GACvBuF,EAAoBvF,EAAWnhD,MAAM,GACrCimD,EAAcS,EAAkB5mD,OAChC6mD,EAAc/C,EAAY,GAE1BgD,EADqBhD,EAAY5jD,MAAM,GACCygC,KAAI,CAAC1hC,EAAGpB,IAAMoB,GAAKA,EAAI,IAAM4kD,EAAUhmD,GAAK,KACpFkpD,EAA2BH,EAAkBjmB,KAAI,CAAC1hC,EAAGpB,IAAMoB,EAAIynD,EAAW7oD,GAAK6oD,EAAW7oD,EAAIsoD,KAC9Fa,EACFD,EAAyBpmB,KAAI,CAAC1hC,EAAGpB,IAAMmQ,KAAKwD,OAAOvS,EAAI6nD,EAAmBjpD,GAAK6qC,EAAQ7qC,IAAM6qC,EAAQ7qC,MAEzG,MADoB,CAAC8oD,EAAWE,GAAatN,UAAUyN,EACrC,EAYX,EAAAvN,KACT,CAAC6E,EAAoCtK,EAAkB9S,KACrDqd,EAAevK,EAAQ9S,GAChB+lB,EAAO3I,EAAkBtK,EAAQ9S,IAG9C,MAAM+lB,EACF,CAAC3I,EAAyCtK,EAAkB9S,KAC1D,MAAMykB,EAAqBuB,EAA0BhmB,EAAY8S,GAC3DmT,EAAW7I,EAAiBnf,QAAQ6F,KACpCoiB,EAAoD,IAAtCzB,EAAmB7B,YAAY,IAAkD,IAAtC6B,EAAmB7B,YAAY,GAC9F,OAAI6B,EAAmBnQ,MAAQ,EAGtB,CAFQ8I,EAAiBvJ,IAC5B,EAAAuO,2CAA2ChF,EAAkBtK,EAAQ2R,GAAqB3R,IAErFoT,GAAeD,EACjB,CAACE,EAAwB/I,EAAkBtK,EAAQ2R,IACjDwB,GAAsC,IAA1BnT,EAAO,GAAGxd,KAAKx2B,QAAsC,IAAtBg0C,EAAO,GAAGxd,KAAK,KAAa4wB,EACzE,CAAC,EAAAvC,aAAavG,EAAkBtK,EAAQ2R,IAExC,CAAC2B,EAAehJ,EAAkBtK,EAAQ2R,G,EAInD0B,EACF,CAAC/I,EAAyCtK,EAA2B9S,KACnE,MAAMojB,EAAStQ,EAAO,GAAGxd,KACnB+tB,EAASvQ,EAAO,GAAGxd,KACnB6pB,EACF,EAAA2D,qBAAqBM,EAAQC,EAAQrjB,EAAW2iB,UAAW3iB,EAAW6iB,KAAM7iB,EAAWwH,SACrF8b,EAAYlG,EAAiB3H,gBAAgB3C,EAAO,GAAI,CAACsQ,EAAO,GAAIA,EAAO,GAAKA,EAAO,KACvFG,EAAYnG,EAAiB3H,gBAAgB3C,EAAO,GAAI,CAACuQ,EAAO,GAAIA,EAAO,KAE3EG,EAAe1Q,EAAOh0C,OAAS,EAAI,CAACykD,EAAWD,EAAWxQ,EAAO,IAAM,CAACyQ,EAAWD,GACnFG,EAAerG,EAAiBvJ,IAAI,EAAAwS,8BAA8B7C,EAAcxjB,GAAawjB,GACnG,OAAOpG,EAAiB3H,gBAAgBgO,EAActE,EAAY,EAGlEiH,EACF,CAAChJ,EAAyCtK,EAA2B9S,KACnE,MAAMojB,EAAStQ,EAAO,GAAGxd,KACnB+tB,EAASvQ,EAAO,GAAGxd,KACnB6pB,EACF,EAAA2D,qBAAqBM,EAAQC,EAAQrjB,EAAW2iB,UAAW3iB,EAAW6iB,KAAM7iB,EAAWwH,SACrF8e,EAAUlJ,EAAiBvJ,IAC7B,EAAA0S,8BAA8BnJ,EAAkBtK,EAAO,GAAIA,EAAO,GAAIqM,EAAanf,GAAa,CAAC8S,EAAO,KAEtG0T,EAAqC,IAAlB1T,EAAOh0C,OAAe,CAACwnD,EAASxT,EAAO,GAAIA,EAAO,IAAM,CAACwT,EAASxT,EAAO,IAGlG,OAFesK,EAAiBvJ,IAC5B,EAAA4S,kCAAkCrJ,EAAkBtK,EAAQqM,EAAanf,GAAawmB,EAC7E,EAGbR,EAA4B,CAA2BhmB,EAAe8S,KAC1E,MAAM8P,EAAc5iB,EAAW4iB,YAAY5jD,QAE3C,GAAsC,IAAlCghC,EAAW4iB,YAAY9jD,OACzB,IAAK,IAAInC,EAAI,EAAGA,EAAIm2C,EAAO,GAAGxd,KAAKx2B,SAAUnC,EAC3CimD,EAAYz8C,KAAK2sC,EAAO,GAAGxd,KAAK34B,IAGpC,MAAMkmD,EAAO7iB,EAAW6iB,KAAK7jD,QAC7B,EAAA0nD,aAAaC,yBACT7T,EAAO,GAAGxd,KAAM0K,EAAWwH,QAASxH,EAAW2iB,UAAWC,EAAaC,EAAM7iB,EAAW0iB,SAG5F,MAAM0C,EAAmB7nD,OAAOC,OAAO,CAAC,EAAGwiC,GAE3C,OADAziC,OAAOC,OAAO4nD,EAAe,CAACxC,cAAaC,OAAMxjB,SAAUW,EAAWX,WAC/D+lB,CAAa,EAGT,EAAA5M,oBAA+Dt6C,IAC1E,MAAM8hC,EAAa9hC,EAAK8hC,WAClBqlB,EAAuB,EAAAC,kCAAkCtlB,GAEzD0iB,EAAU1iB,EAAWS,UAAU,WAAY,UAC3CkiB,EAAY3iB,EAAWY,QAAQ,YAAa,CAAC,EAAG,IAChD0T,EAAQtU,EAAWQ,OAAO,QAAS,GACnCoiB,EAAc5iB,EAAWY,QAAQ,eAAgB,IACjDiiB,EAAO7iB,EAAWY,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IAC5C4G,EAAUxH,EAAWY,QAAQ,UAAW,CAAC,EAAG,IAElD,OAAO,EAAAlB,4BAA4B,OAAD,QAAEgjB,UAASC,YAAWrO,QAAOsO,cAAaC,OAAMrb,WAAY6d,GAAsB,EAGtH,MAAMhI,EAAiB,CAACvK,EAAkB9S,KAGxC,IAAK8S,GAA6B,IAAlBA,EAAOh0C,QAAkC,IAAlBg0C,EAAOh0C,OAC5C,MAAM,IAAImF,MAAM,+BAIlB,GAA8B,IAA1B6uC,EAAO,GAAGxd,KAAKx2B,QAA0C,IAA1Bg0C,EAAO,GAAGxd,KAAKx2B,OAChD,MAAM,IAAImF,MAAM,6CAMlB,GAFoB6uC,EAAO,GAAGxd,KAAK,KACXwd,EAAO,GAAGxd,KAAK,GAAK0K,EAAWsU,MAErD,MAAM,IAAIrwC,MAAM,qDAIlB,GAAsB,IAAlB6uC,EAAOh0C,SAA2C,IAA1Bg0C,EAAO,GAAGxd,KAAKx2B,QAAgBg0C,EAAO,GAAGxd,KAAK,KAAOwd,EAAO,GAAGxd,KAAK,IAC9F,MAAM,IAAIrxB,MAAM,gBAGlB,MAAMghD,EAAcnS,EAAO,GAAGxd,KAAKx2B,OAAS,EAE5C,GAAIkhC,EAAW2iB,UAAU7jD,SAAWmmD,EAClC,MAAM,IAAIhhD,MAAM,uBAAuBghD,MAIzC,GAAIjlB,EAAWwH,QAAQ1oC,SAAWmmD,EAChC,MAAM,IAAIhhD,MAAM,qBAAqBghD,MAIvC,GAAIjlB,EAAW6iB,KAAK/jD,SAAyB,EAAdmmD,EAC7B,MAAM,IAAIhhD,MAAM,kBAAgC,EAAdghD,MAKpC,GAAsC,IAAlCjlB,EAAW4iB,YAAY9jD,QAAgBkhC,EAAW4iB,YAAY9jD,SAAWg0C,EAAO,GAAGxd,KAAKx2B,OAAS,EACnG,MAAM,IAAImF,MAAM,wBAIlB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,0CAGlB,GAAsB,IAAlB6uC,EAAOh0C,QAAmC,YAAnBg0C,EAAO,GAAGthB,KACnC,MAAM,IAAIvtB,MAAM,0C,oIC7KpB,gBAOa,EAAA40C,aACT,CAACuE,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GACf,MAAM8T,EAAY5mB,EAAW4mB,UACvBC,EAAeD,EAAYA,EAC3BE,EAAoC,QAApB9mB,EAAW+mB,KAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACjFC,EAAwC,QAApBhnB,EAAW+mB,KACjC,CACEjU,EAAO,GAAGxd,KAAK,GAAIsxB,EAAWA,EAAW9T,EAAO,GAAGxd,KAAK,GAAKuxB,EAAc/T,EAAO,GAAGxd,KAAK,GAC1Fwd,EAAO,GAAGxd,KAAK,IAEjB,CACEwd,EAAO,GAAGxd,KAAK,GAAIwd,EAAO,GAAGxd,KAAK,GAAKuxB,EAAcD,EAAWA,EAAW9T,EAAO,GAAGxd,KAAK,GAC1Fwd,EAAO,GAAGxd,KAAK,IASf2xB,EAAsB7J,EAAiB3H,gBAAgB3C,EAAO,GAAIkU,GAGlEE,EAA2C,CAACC,KAAML,EAAeznB,SAAU,GAAGynB,MAC7EM,GAAmB,EAAAxa,UAAUwQ,EAAkB,CAAC6J,GAAsBC,GAGvEG,EAAqB,CACzBvU,EAAO,GAAGxd,KAAK,GAAIwd,EAAO,GAAGxd,KAAK,GAAKuxB,EAAc/T,EAAO,GAAGxd,KAAK,GAAKsxB,EACzE9T,EAAO,GAAGxd,KAAK,GAAKsxB,GAGtB,MAAO,CADQxJ,EAAiB3H,gBAAgB2R,EAAiBC,GAClD,EAGR,EAAAvO,4BACR56C,IAEC,MAAM0oD,EAAY1oD,EAAK8hC,WAAWQ,OAAO,aACzC,GAAIomB,EAAY,EACd,MAAM,IAAI3iD,MAAM,qCAAqC2iD,sBAEvD,MAAMG,EAAO7oD,EAAK8hC,WAAWS,UAAU,OAAQ,OAC/C,GAAa,QAATsmB,GAA2B,QAATA,EACpB,MAAM,IAAI9iD,MAAM,sBAAsB8iD,sBAExC,MAAO,CAACA,OAAMH,YAAU,EAG9B,MAAMvJ,EAAkBvK,IACtB,GAAsB,IAAlBA,EAAOh0C,OACT,MAAM,IAAImF,MAAM,yCAAyC6uC,EAAOh0C,UAKlE,GAAuB,WAAnBg0C,EAAO,GAAGthB,MAA+C,IAA1BshB,EAAO,GAAGxd,KAAKx2B,OAChD,MAAM,IAAIuoB,UAAU,oD,2HCtExB,gBACA,UAEA,UAEA,UACA,UA2Da,EAAAo/B,kCACT,CAACrJ,EAAyCtK,EAA2BqM,EACpEnf,KACC,MAAM+f,EA5D4B,EAACsC,EAAkBriB,KAA6C,CACtGt6B,KAAM,iBACNqiC,WAAYsa,EAAU,CAAC,SAAU,IAAK,KAAO,CAAC,SAAU,KACxDtP,WAAYsP,EAAU,CAAC,EAAAtO,YAAY6B,SAAU,EAAA7B,YAAYM,oBAAqB,EAAAN,YAAY6B,UACpE,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAYM,qBACzDhV,SAAUW,EAAWsnB,qBAuDAC,CAAgCzU,EAAOh0C,OAAS,EAAGkhC,GACpE,OAAO,OAAP,wBACK+f,GAAQ,CACX1yC,IAAK,IAtDT,EAAC+vC,EAAyC2C,EAA2BjN,EACpEqM,EAAuBnf,KACtB,MAAMojB,EAAStQ,EAAO,GAAGxd,KACnB+tB,EAASvQ,EAAO,GAAGxd,KACnBkf,EAAsB,CAAC6O,EAAO,GAAIv2C,KAAKuM,KAAM+pC,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAM,IAClFmE,EAAc,EAAAC,oBAAoBrE,EAAQC,EAAQlE,IACjDuI,EAAQC,GACXvK,EAAiB3K,+BAA+B+B,EAAqB,EAAAT,YAAYM,qBAE/EuT,EAAgB,EAAAne,UAAUqM,eAAe0R,IACxCK,EAAaC,GAChB1K,EAAiB3K,+BAA+B+U,EAAa,EAAAzT,YAAYM,qBACvE9M,EAAO4X,EAAYrgD,OAEnBipD,EAAajV,EAAOh0C,OAAS,EAAK,MAAQ,QAC1CkpD,EAAYl7C,KAAKuM,KAAK+pC,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAK,IAC1D,mBAACN,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBjjB,GAC7D4H,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAC1DqY,EAAe,KACzBoT,gCAC0Bxb,iLAOOqgB,EAAc,oBAAoBA,EAAc,oBACzEA,EAAc,0CACYpT,EAAoB,wBACtCuT,6BACMC,mEAC+BH,MAAgBC,6DAChBJ,MAAWC,yBAC/C/f,EAAKC,oCAAoCD,EAAKC,kFAI7Dmb,wBAGE,OAAO,OAAP,wBACKjD,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAUDsY,CAA4B7K,EAAkB2C,EAAUjN,EAAQqM,EAAanf,IAAW,C,yHCrE3G,gBAGa,EAAAmZ,QACT,CAACiE,EAAyCtK,EAAkBoN,KAC1D7C,EAAevK,EAAQoN,GAEvB,MAAMgI,EAAa,EAAAze,UAAU0e,aAAarV,EAAO,GAAGxd,KAAM4qB,GAC1D,MAAO,CAAC9C,EAAiB3H,gBAAgB3C,EAAO,GAAIoV,GAAY,EAGzD,EAAA9O,uBAA0Dl7C,GACnEA,EAAK8hC,WAAWQ,OAAO,OAAQ,GAEnC,MAAM6c,EAAiB,CAACvK,EAAkBoN,KACxC,IAAKpN,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,6BAGlB,MAAM5H,EAAIy2C,EAAO,GAAGxd,KAAKx2B,OACzB,GAAU,IAANzC,EACF,MAAM,IAAI4H,MAAM,mCAGlB,GAAIi8C,GAAQ7jD,GAAK6jD,EAAO7jD,EACtB,MAAM,IAAI4H,MAAM,gBAIlB,GAAuB,WAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,kC,kJChCpB,gBAGA,UASA,gCAAqC+7B,GACnC,IAAIooB,EACJ,OAAQpoB,EAAWqoB,YACjB,IAAK,OACHD,EAAO,EAAAE,WACP,MACF,IAAK,UACHF,EAAO,EAAAG,cACP,MACF,IAAK,OACHH,EAAO,EAAAI,SAASxoB,EAAWyoB,QAAUzoB,EAAW0oB,SAChD,MAEF,QACE,MAAO,CAAC3F,mBAAoB,GAAIC,gBAAiB,IAGrD,MAAM2F,EAAiBP,EAAK1iD,KAG5B,MAAO,CAACq9C,mBAFmBqF,EAAK5b,KAEJwW,gBADJ,WAAW2F,aAErC,EAEa,EAAArD,kCAAqCtlB,IAChD,MAAMqoB,EAAaroB,EAAWS,UAAU,aAAc,IAEtD,GAAmB,SAAf4nB,EAAuB,CACzB,MAAOI,EAASC,GAAW1oB,EAAWW,UAAU,oBAAqB,CAAC,EAAAioB,SAAU,EAAAC,WAChF,MAAO,CAACR,aAAYK,UAASD,UAASnB,mBAAoB,GAAGe,KAAcI,KAAWC,I,CAExF,MAAO,CAACL,aAAYf,mBAAoBe,EAAW,C,uHC3CrD,eAEA,SAEA,UAEA,UAMa,EAAAhP,OACT,CAAC+D,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,EAAQ9S,EAAWkgB,MAE3B,CADQ9C,EAAiBvJ,IAAIiV,EAA8B1L,EAAkBtK,EAAQ9S,GAAa8S,KAIlG,EAAAwG,sBAAmEp7C,GAC5E,EAAAwhC,4BAA4B,CAACwgB,KAAMhiD,EAAK8hC,WAAWQ,OAAO,OAAQ,KAEtE,MAAMuoB,EAAwB,CAC5BrjD,KAAM,SACNqiC,WAAY,CAAC,IAAK,KAClBgL,WAAY,CAAC,EAAAgB,YAAY6B,SAAU,EAAA7B,YAAY6B,WAmD3CkT,EACF,CAAC9pB,EAAgC8T,EAAkB9S,KACjD,MAAM+f,EAAW,OAAH,wBAAOgJ,GAAqB,CAAE5V,UAAWnT,EAAWX,WAClE,OAAO,OAAP,wBAAW0gB,GAAQ,CAAE1yC,IAAK,IAlD5B,EAAC2xB,EAAgC+gB,EAA2BjN,EAAkBoN,KAC5E,MAAMC,EAAarN,EAAO,GAAGxd,KAAKt2B,QAC5BgqD,EAAiBlW,EAAO,GAAGxd,KAAKt2B,QAChCmgD,EAAc,IAAI1uC,MAAM0vC,EAAWrhD,OAASkqD,EAAelqD,OAAS,GAE1EohD,EAAO,EAAAzW,UAAUwf,cAAc/I,EAAMC,EAAWrhD,QAChD,MAAMoqD,EAAyB,GAC/B,IAAK,IAAIvsD,EAAI,EAAGA,EAAIwiD,EAAYrgD,OAAQnC,IAMlCA,EAAIujD,GACNf,EAAYxiD,GAAKwjD,EAAWxjD,GAC5BusD,EAAa/iD,KAAK,YAAYxJ,kBAAkBA,QAE5CA,EAAIujD,EAAO8I,EAAelqD,QAC5BqgD,EAAYxiD,GAAKqsD,EAAersD,EAAIujD,GACpCgJ,EAAa/iD,KAAK,gBAAgBxJ,EAAIujD,kBAAqBvjD,SAE3DwiD,EAAYxiD,GAAKwjD,EAAWxjD,EAAIqsD,EAAelqD,OAAS,GACxDoqD,EAAa/iD,KAAK,YAAYxJ,EAAIqsD,EAAelqD,OAAS,kBAAkBnC,QAKlF,MAGMgzC,EAAe,uCAHPwP,EAAYrgD,QAAU,+BACtBqhD,EAAWrhD,sCACVkqD,EAAelqD,QAAU,8CAMpCoqD,EAAarvC,KAAK,6EAETqmC,wBAA2BC,EAAWD,mDAGnD,OAAO,OAAP,wBACKH,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAOkBwZ,CAAwBnqB,EAAS+gB,EAAUjN,EAAQ9S,EAAWkgB,OAAK,EAGnG7C,EAAiB,CAACvK,EAAkBoN,KACxC,IAAKpN,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,6BAElB,MAAM+9C,EAAalP,EAAO,GAAGxd,KAAKx2B,OAClC,GAAIkjD,EAAa,EACf,MAAM,IAAI/9C,MAAM,wBAElB,GAAIi8C,GAAQ8B,GAAc9B,EAAO8B,EAAa,EAC5C,MAAM,IAAI/9C,MAAM,iBAElB,IAA8C,IAA1C,EAAAmlD,aAAarpD,QAAQ+yC,EAAO,GAAGthB,MACjC,MAAM,IAAIvtB,MAAM,sBAElB,GAAuB,UAAnB6uC,EAAO,GAAGthB,MAAuC,UAAnBshB,EAAO,GAAGthB,KAC1C,MAAM,IAAIvtB,MAAM,qB,+ICjGpB,eAIA,UAEA,UAUa,EAAAs1C,KACT,CAAC6D,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,EAAQ9S,GAEhB,CADQod,EAAiBvJ,IAAIwV,EAA4BvW,EAAQ9S,GAAa8S,KAI3F,MAAMwW,EAAsB,CAACprD,EAAkBqrD,KAC7C,MAAMC,EAAiD,IAAxCtrD,EAAK8hC,WAAWQ,OAAO,SAAU,GAC1CipB,EAAiD,IAAxCvrD,EAAK8hC,WAAWQ,OAAO,SAAU,GAC1CkpB,EAAQxrD,EAAK8hC,WAAWO,SAAS,QAAS,GAC1CopB,EAAOzrD,EAAK8hC,WAAWO,SAAS,OAAQ,GAC9C,OAAO,EAAAb,4BAA4B,CAAC8pB,SAAQC,SAAQC,QAAOC,OAAMJ,eAAa,EAGnE,EAAA/P,sBAAiEt7C,GAC1EorD,EAAoBprD,GAAM,GAEjB,EAAAu7C,uBAAkEv7C,GAC3EorD,EAAoBprD,GAAM,GAE9B,MAAMmrD,EAA8B,CAACvW,EAAkB9S,KACrD,MAAM+f,EAAW,CACfr6C,KAAM,OACNqiC,WAA8B,IAAlB+K,EAAOh0C,OAAe,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KAC1Di0C,WAA8B,IAAlBD,EAAOh0C,OAAe,CAAC,EAAAi1C,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACrE7gB,IAAKiL,EAAWX,UAGlB,OAAO,OAAP,wBAAW0gB,GAAQ,CAAE1yC,IAAK,IAAMu8C,EAAsB7J,EAAUjN,EAAQ9S,IAAW,EAG/E4pB,EACF,CAAC7J,EAA2BjN,EAAkB9S,KAC5C,MAAM6pB,EAAS/W,EAAO,GAAGxd,KAAKt2B,QACxB8qD,EAAShX,EAAO,GAAGxd,KAAKt2B,SACvB4B,EAAGqB,GAAK,EAAA8nD,SAASC,qBACpBH,EAAQ7pB,EAAWwpB,OAAQM,EAAQ9pB,EAAWypB,OAA0B,IAAlB3W,EAAOh0C,OAAeg0C,EAAO,GAAGxd,UAAO7c,GAC3F0mC,EAAc,CAACv+C,EAAGqB,GACxB,IAAKk9C,EACH,MAAM,IAAIl7C,MAAM,uCAElB,IAAI+jD,EAAY6B,EAAOA,EAAO/qD,OAAS,GACnCmrD,EAAO,GACPjqB,EAAWwpB,SACbxB,EAAY6B,EAAO,IAEjB7pB,EAAWwpB,QAAUxpB,EAAWypB,OAClCQ,EAAO,8BACEjqB,EAAWwpB,SAAWxpB,EAAWypB,OAC1CQ,EAAO,6BACGjqB,EAAWwpB,QAAUxpB,EAAWypB,OAC1CQ,EAAO,4BACGjqB,EAAWwpB,QAAWxpB,EAAWypB,SAC3CQ,EAAO,2BAET,MAAM1iB,EAAO4X,EAAYrgD,OAInB6wC,EAAe,qCACOpI,0BAChBA,wBACAA,kBANuB,IAAlBuL,EAAOh0C,OAAe,SAASg0C,EAAO,GAAGxd,KAAKx2B,WAAa,mFACvC,IAAlBg0C,EAAOh0C,OAAe,8BAAgC,iEAanDkpD,8BACVzgB,EAAO,4BACPA,EAAO,0BACT0iB,iEAf2B,IAAlBnX,EAAOh0C,OAAe,yBAA2B,uCAsBpE,OAAO,OAAP,wBACKihD,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3E3F,UAAW,CACT,CAACvqC,KAAM,QAAS8rB,KAAM,QAAS7oB,KAAMq3B,EAAW0pB,OAAQ,CAAChkD,KAAM,OAAQ8rB,KAAM,QAAS7oB,KAAMq3B,EAAW2pB,OAEzGha,gBAAY,EAId0N,EAAiB,CAACvK,EAAkB9S,KACxC,IAAK8S,EACH,MAAM,IAAI7uC,MAAM,oBAElB,GAAI+7B,EAAWupB,cAAgBzW,EAAOh0C,OAAS,GAAKg0C,EAAOh0C,OAAS,GAClE,MAAM,IAAImF,MAAM,uBAElB,IAAK+7B,EAAWupB,aAAiC,IAAlBzW,EAAOh0C,OACpC,MAAM,IAAImF,MAAM,0BAIlB,GAAsB,IAAlB6uC,EAAOh0C,QAA0C,IAA1Bg0C,EAAO,GAAGxd,KAAKx2B,QAA0C,IAA1Bg0C,EAAO,GAAGxd,KAAKx2B,OACvE,MAAM,IAAImF,MAAM,4BAGlB,GAAwB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,MACvB,YAAnBshB,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,MACxB,IAAlBshB,EAAOh0C,QAAmC,YAAnBg0C,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KACpE,MAAM,IAAIvtB,MAAM,uBAGlB,GAAK6uC,EAAO,GAAGthB,OAASshB,EAAO,GAAGthB,MAA4B,IAAlBshB,EAAOh0C,QAAgBg0C,EAAO,GAAGthB,OAASshB,EAAO,GAAGthB,KAC9F,MAAM,IAAIvtB,MAAM,6B,6HClIpB,gBAEA,UAGA,UA0Ea,EAAA4/C,oCACT,CAACzG,EAAyC/9C,EAAWlB,EAAWghD,EAC/Dnf,KACC,MAAM+f,GA3E+B5M,EA2EcnT,EAAWX,SA3EH,CAC/D35B,KAAM,kBACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAYC,QACzBb,cAJwC,IAACA,EA4ErC,OAAO,OAAP,wBACK4M,GAAQ,CACX1yC,IAAK,IAtET,EAAC+vC,EAAyC2C,EAA2B1gD,EAAWlB,EAC/EghD,EAAgCnf,KAC/B,MAAMojB,EAAS/jD,EAAEi2B,KACX40B,EAAS/rD,EAAEm3B,KAGXiS,EAAO4X,EAAYrgD,OACnB0oD,EAAc,CAAC0C,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAI/K,EAAY,GAAKA,EAAY,IAC/EgL,EAAaD,EAAO,GAAKA,EAAO,GAChC1J,EAAgB,EAAAC,oBAChB7Y,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAChE,IAAI8yB,EAAW,GAEf,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1BF,GAAY,qCACYE,gCACPD,qCAEG7C,EAAY,eAAeA,EAAY,oDACzBrI,EAAY5X,EAAO,UAAUvH,EAAWwH,QAAQ,yBAC1ExH,EAAW6iB,KAAK,qCACH7iB,EAAW2iB,UAAU,mBAAmBwH,QAAiBD,EAAO,iCAEvE9G,EApBH,gEAqBwBjE,EAAY5X,EAAO,SAASvH,EAAWwH,QAAQ,2BACxExH,EAAW6iB,KAAK,uCACH7iB,EAAW2iB,UAAU,uBAAuBwH,OAAgBD,EAAO,mCAE1E9G,EAxBL,8DA0BoB+G,mFAEN,EAANE,EAAUC,+LAWjC,MAAM3a,EAAe,WACnB6Q,2MAOI4J,gBACAxiB,EAAK3T,0CAGX,OAAO,OAAP,wBACK8rB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAMkyB,EAAah2B,KAAMnyB,EAAEmyB,KAAMkhB,YAAa,EAAAqB,YAAYC,QACnErE,eACAC,SAAS,GAAI,EAUF2a,CAA8BnN,EAAkB2C,EAAU1gD,EAAGlB,EAAGghD,EAAanf,IAAW,C,4ICpF3G,gBAwEa,EAAAumB,8BACT,CAACnJ,EAAyC/9C,EAAWlB,EAAWghD,EAC/Dnf,KACC,MAAM+f,GAvEyB5M,EAuEcnT,EAAWX,SAvEH,CACzD35B,KAAM,SACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,UACzBzC,cAJkC,IAACA,EAwE/B,OAAO,OAAP,wBACK4M,GAAQ,CACX1yC,IAAK,IAlET,EAAC+vC,EAAyC2C,EAA2B1gD,EAAWlB,EAC/EghD,EAAgCnf,KAC/B,MAAMojB,EAAS/jD,EAAEi2B,KACX40B,EAAS/rD,EAAEm3B,KAEXiS,EAAO4X,EAAYrgD,OACnB0rD,EAAa,EAAA/C,oBAAoBrE,EAAQ8G,EAAQ/K,EAAa,GAE9DxP,EAAe,4BACFyT,EAAO,+BACPA,EAAO,+BACPA,EAAO,+BACPpjB,EAAW4iB,YAAY,+BACvB5iB,EAAW4iB,YAAY,sCAChB5iB,EAAW2iB,UAAU,sCACrB3iB,EAAW2iB,UAAU,oCACvB3iB,EAAWwH,QAAQ,oCACnBxH,EAAWwH,QAAQ,iCACtBxH,EAAW6iB,KAAK,iCAChB7iB,EAAW6iB,KAAK,wJAIRtb,onBAab6b,EAAOtkD,mYAiBvB,OAAO,OAAP,wBACKihD,GAAQ,CACX9rB,OAAQ,CAACqB,KAAMk1B,EAAYh5B,KAAMnyB,EAAEmyB,KAAMkhB,YAAa,EAAAqB,YAAYM,qBAClE1E,gBAAY,EAUD8a,CAAwBrN,EAAkB2C,EAAU1gD,EAAGlB,EAAGghD,EAAanf,IAAW,EAKxF,EAAAynB,oBACT,CAACtH,EAA+ByC,EAAgCzD,EAAgC5K,EAAW,IAEnG,CAAC4K,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAC5CryC,KAAKuM,KAAK8mC,EAAW,GAAKyC,EAAY,GAAKA,EAAY,GAAKrO,G,iICzFzE,eAKA,UAOa,EAAAuF,YACT,CAACsD,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAGR,CADHsK,EAAiBvJ,IAAI6W,EAAmCtN,EAAkBtK,EAAQ9S,GAAa8S,KAI5F,EAAAiH,2BACR77C,IACC,MAAM0/C,EAAQ1/C,EAAK8hC,WAAWO,SAAS,SACjCoqB,EAAOzsD,EAAK8hC,WAAWW,UAAU,QACvC,OAAO,EAAAjB,4BAA4B,CAACke,QAAO+M,QAAM,EAGvD,MAAMC,EAA6B,CACjCllD,KAAM,cACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAyBrB8U,EACF,CAAC1rB,EAAgC8T,EAAkB9S,KACjD,MAAM+f,EAAW,OAAH,wBAAO6K,GAA0B,CAAEzX,UAAWnT,EAAWX,WACvE,OAAO,OAAP,wBAAW0gB,GAAQ,CAAE1yC,IAAK,IAxB5B,EAAC2xB,EAAgC+gB,EAA2BjN,EAAkB9S,KAExE,MAAMmf,EAAcrM,EAAO,GAAGxd,KAAKt2B,QAC7BuoC,EAAO4X,EAAYrgD,OAEnB6wC,EAAe,WADCkb,EAAoB7qB,EAAW2qB,KAAK7rD,4CAGlCyoC,kFAGxB,OAAO,OAAP,wBACKwY,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3E3F,UAAW,CACT,CAACvqC,KAAM,OAAQ8rB,KAAM,QAASof,YAAa5Q,EAAW2qB,KAAK7rD,OAAQ6J,KAAMq3B,EAAW2qB,MACpF,CAACjlD,KAAM,QAAS8rB,KAAM,QAAS7oB,KAAMq3B,EAAW4d,QAElDjO,gBAAY,EAOcmb,CAA6B9rB,EAAS+gB,EAAUjN,EAAQ9S,IAAW,EAGnG6qB,EAAuBE,IAC3B,MAAM9I,EAAsB,CAAC,4BAA4B8I,sBACzD,IAAK,IAAIpuD,EAAI,EAAGA,EAAIouD,IAAepuD,EACvB,IAANA,EACFslD,EAAU97C,KAEN,oBAAkBxJ,oBAAoBA,SACjCA,IAAMouD,EAAc,EAC7B9I,EAAU97C,KAEN,wBAAsBxJ,SAE1BslD,EAAU97C,KAEN,yBAAuBxJ,oBAAoBA,SAMnD,OAHAslD,EAAU97C,KACN,OAEG87C,EAAUpoC,KAAK,KAAK,EAGvBwjC,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,iCAElB,GAA8B,IAA1B6uC,EAAO,GAAGxd,KAAKx2B,OACjB,MAAM,IAAImF,MAAM,wBAElB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,sB,sJCzFpB,gBAEA,UAEa,EAAA+1C,sBACT,CAACoD,EAAyCtK,EAAkByK,KAC1DF,EAAevK,GAEf,MAAMkY,EAAkB5N,EAAiBvJ,IAAIoX,EAAuCnY,EAAO,IAAKA,GAIhG,MAAO,CAHQsK,EAAiBvJ,IAC5BqX,EAAqC9N,EAAkBtK,EAAO,GAAIyK,EAASyN,EAAgB11B,MAC3F,CAACwd,EAAO,GAAIkY,EAAiBlY,EAAO,GAAIA,EAAO,KACpC,EAGR,EAAAmH,qCAAwE/7C,GACjFA,EAAK8hC,WAAWO,SAAS,UAAW,MAExC,MAAM4qB,EAAiC,CACrCzlD,KAAM,wCACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WA8CrBqV,EAA0Cj3B,GAAsC,OAAD,wBAChFm3B,GAA8B,CACjC99C,IAAK,IA7CkC,EAAC0yC,EAA2B/rB,KACnE,MAAMo3B,EAAQp3B,EAAMsB,KAAKt2B,QACnB4hD,EAAUwK,EAAM,GAChBC,EAAcD,EAAM,GAAKA,EAAM,GAC/BjM,EAAc,CAACiM,EAAM,GAAIxK,GAEzBjR,EAAe,uMAOIyb,EAAM,iEAEJA,EAAM,wJAMCC,sDAETD,EAAM,iEAEJA,EAAM,4LAONC,oCAI3B,OAAO,OAAP,wBACKtL,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAYM,qBACvE1E,gBAAY,EAMH2b,CAAiCH,EAAgCn3B,KAGxEu3B,EAA+B,CACnC7lD,KAAM,sCACNqiC,WAAY,CAAC,IAAK,kBAAmB,QAAS,KAC9CgL,WAAY,CAAC,EAAAgB,YAAY6B,SAAU,EAAA7B,YAAYM,oBAAqB,EAAAN,YAAY6B,SAAU,EAAA7B,YAAY6B,WAwClGsV,EACF,CAAC9N,EAAyCppB,EAAeupB,EAAiBiO,KAEpE,MAAMzL,EAAW,OAAH,wBAAOwL,GAA4B,CAAEpY,UAAW,GAAGoK,MACjE,OAAO,OAAP,wBACKwC,GAAQ,CACX1yC,IAAK,IA1Cb,EAAC+vC,EAAyC2C,EAA2B/rB,EAAeupB,EACnFiO,KACC,MAAM5jB,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,UACzDm0B,EAAcC,GACjBtO,EAAiB3K,+BAA+B+Y,EAAsB,EAAAzX,YAAYM,sBAC/EsX,EAAsBC,GAAyB,CAACH,EAAe,EAAGC,GACnE/b,EAAe,0JAGoBgc,MAAyBC,uBACvDhkB,EAAKC,ogBAkBhB,OAAO,OAAP,wBACKkY,GAAQ,CACX9rB,OAAQ,CAACqB,KAAMtB,EAAMsB,KAAM9D,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACtE3F,UAAW,CAAC,CAACvqC,KAAM,UAAW8rB,KAAM,QAAS7oB,KAAM40C,IACnD5N,gBAAY,EAUGkc,CAA+BzO,EAAkB2C,EAAU/rB,EAAOupB,EAASiO,IAAqB,EAIjHnO,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,4CAGlB,MAAMM,EAAIuuC,EAAO,GACX8K,EAAQ9K,EAAO,GACf3uC,EAAI2uC,EAAO,GAIjB,GAAIvuC,EAAE+wB,KAAKx2B,OAAS,GAA2B,IAAtB8+C,EAAMtoB,KAAKx2B,QAAkC,IAAlBqF,EAAEmxB,KAAKx2B,OACzD,MAAM,IAAImF,MAAM,wBAElB,GAAI25C,EAAMtoB,KAAK,KAAO/wB,EAAE+wB,KAAK,IAAMnxB,EAAEmxB,KAAK,KAAO/wB,EAAE+wB,KAAK,GACtD,MAAM,IAAIrxB,MAAM,gCAElB,GAAgB,YAAXM,EAAEitB,MAAiC,YAAXjtB,EAAEitB,MAAuC,YAAfosB,EAAMpsB,MAAqC,YAAfosB,EAAMpsB,MACzE,YAAXrtB,EAAEqtB,MAAiC,YAAXrtB,EAAEqtB,KAC7B,MAAM,IAAIvtB,MAAM,uBAElB,GAA8B,IAA1B6uC,EAAO,GAAGxd,KAAKx2B,OACjB,MAAM,IAAImF,MAAM,gC,4HCrJpB,gBACA,UAEA,UACA,UAEA,UACA,UAyEa,EAAAy/C,oCACT,CAACtG,EAAyCtK,EACzCuS,KACC,MAAMtF,GA1E+BsC,EA0EcvP,EAAOh0C,OAAS,EA1EZq0C,EA0EekS,EAAqBiC,mBA1Ed,CACjF5hD,KAAM,kBACNqiC,WAAYsa,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDtP,WAAYsP,EAAU,CAAC,EAAAtO,YAAYC,OAAQ,EAAAD,YAAYC,OAAQ,EAAAD,YAAYC,QACrD,CAAC,EAAAD,YAAYC,OAAQ,EAAAD,YAAYC,QACvDb,cALwC,IAACkP,EAAkBlP,EA2EvD,OAAO,OAAP,wBACK4M,GAAQ,CACX1yC,IAAK,IApET,EAAC+vC,EAAyC2C,EAA2BjN,EACpEuS,KACC,MAAMhD,EAAUvP,EAAOh0C,OAAS,EAC1BwjD,EAAcD,EAAU,+BAAiC,GACzDwH,EAAS/W,EAAO,GAAGxd,KACnBw0B,EAAShX,EAAO,GAAGxd,KACnB6pB,EAAc,EAAAnW,cAAcsW,UAAUuK,EAAQC,GAAQ,GACtD7K,GAAe,EAAAxV,UAAUyV,SAASpM,EAAO,GAAGxd,KAAMwd,EAAO,GAAGxd,MAElE,IAAK6pB,EACH,MAAM,IAAIl7C,MAAM,yCAElB,MAAM+jD,EAAY6B,EAAOA,EAAO/qD,OAAS,GACnCgtD,EAAiBh/C,KAAKuM,KAAK2uC,EAAY,GACvCzI,EAAQsK,EAAO/qD,OACf0gD,EAAQsK,EAAOhrD,OAEf8oC,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAC1Dy0B,EAAiB,EAAA7iB,kBAAkBiW,EAAYrgD,QAC/CgqC,EAAUqW,EAAYrgD,OACtBktD,EAAgB,EAAA1iB,iBAChB,mBAACyZ,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBoC,GAE7D4G,EACF5J,EAAU,GAAG,EAAA6J,iBAAiBH,EAAgBC,EAAelZ,EAAO,GAAGxd,KAAM6pB,GAAa,KAAU,GAElGgN,EACFlN,EAAc,GA6CxB,SACI8M,EAAwBC,EAAkClZ,EAAkBrN,GAC9E,IAAI2mB,EAAyB,GACzBC,EAAyB,GAE7B,MAAMC,EAAWxZ,EAAO,GAAGxd,KACrBi3B,EAAWzZ,EAAO,GAAGxd,KAErBk3B,EAAUF,EAASxtD,OACnB2tD,EAAUF,EAASztD,OAEnBgqC,EAAUrD,EAAS3mC,OACnB4tD,EAAY5jB,EAAU0jB,EACtBG,EAAY7jB,EAAU2jB,EAE5BL,EAAyBE,EAAS7sB,KAAI,CAAC5iC,EAAGF,IAAM,UAAUqvD,EAAcrvD,EAAI+vD,OAC5EN,EAAuBI,EAAU,GAAK,MACtCJ,EAAuBvyC,KAAK,MAC5BwyC,EAAyBE,EAAS9sB,KAAI,CAAC5iC,EAAGF,IAAM,UAAUqvD,EAAcrvD,EAAIgwD,OAC5EN,EAAuBI,EAAU,GAAK,MACtCJ,EAAuBxyC,KAAK,MAE5B,MAAM+yC,EAAiB,EAAA5jB,cAAcC,iBAAiBqjB,EAAU7mB,GAC1DonB,EAAiB,EAAA7jB,cAAcC,iBAAiBsjB,EAAU9mB,GAE1DqnB,EAAiBF,EAAentB,KAAIpiC,GAAK,UAAU2uD,EAAc3uD,EAAIqvD,YAAmB7yC,KAAK,MAC7FkzC,EAAiBF,EAAeptB,KAAIpiC,GAAK,UAAU2uD,EAAc3uD,EAAIsvD,YAAmB9yC,KAAK,MAC7FmzC,EAAiB,wBAAwBhB,EAAcljB,EAAU,iBAC9DkjB,EAAcljB,EAAU,eAAekjB,EAAcljB,EAAU,iBAC/DkjB,EAAcljB,EAAU,gBAmBjC,MAjBoC,4CAElCijB,oCACAiB,QACAF,gCACwBV,2EAKxBL,oCACAiB,QACAD,gCACwBV,+BAK5B,CA9F2BY,CAAyBlB,EAAgBC,EAAelZ,EAAQqM,KAAiB,GAEhG+N,EAA2BjO,EAAc,2BAA6B,QA8FlF,SAAc+M,EAAyBzkB,GACrC,IAAIjZ,EAAM,GACV,IAAK,IAAI3xB,EAAI,EAAGA,EAAI4qC,EAAO,EAAG5qC,IAC5B2xB,GAAO,MAAM09B,EAAcrvD,OAI7B,OAFA2xB,GAAO,MAAM09B,EAAczkB,EAAO,UAE3BjZ,CACT,CAtG0F6+B,CAAKnB,EAAezM,MAClG6N,EAA2BnO,EAAc,2BAA6B,QAuGlF,SAAc+M,EAAyBzkB,GACrC,IAAIjZ,EAAM,GACV,IAAK,IAAI3xB,EAAI,EAAGA,EAAI4qC,EAAO,EAAG5qC,IAC5B2xB,GAAO,MAAM09B,EAAcrvD,OAI7B,OAFA2xB,GACI,WAAM09B,EAAczkB,EAAO,KACxBjZ,CACT,CA/G0F++B,CAAKrB,EAAexM,MAKlG7P,EAAe,iBACbwc,kBACAF,kBACAlJ,+CAPuB9D,EAAc,GAAK,GAAG8M,yDACXC,EAAcljB,EAAU,UAAUkjB,EAAcljB,EAAU,sBAC3FkjB,EAAcljB,EAAU,UAAUkjB,EAAcljB,EAAU,qGAUrCgjB,uCACToB,gCACAE,kIAKX9K,oBACAU,oBACApb,EAAK3T,iCAEf,OAAO,OAAP,wBACK8rB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAYC,QAC3ErE,eACAC,SAAS,GAAI,EAUF0d,CAA8BlQ,EAAkB2C,EAAUjN,EAAQuS,IAAqB,C,0KCpF1G,gBAEA,UACA,UAEA,UACA,SAwEA,SAAgBgB,EACZvT,EAAkBuS,GACpB,MAAMtF,GAzD6BsC,EAyDUvP,EAAOh0C,OAAS,EAzDRq0C,EAyDWkS,EAAqBiC,mBAzDV,CAC3E5hD,KAAM,SACNqiC,WAAYsa,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDtP,WAAYsP,EAAU,CAAC,EAAAtO,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzDzC,cALkC,IAACkP,EAAkBlP,EA0DrD,OAAO,OAAP,wBAAW4M,GAAQ,CAAE1yC,IAAK,IAlD5B,SACI0yC,EAA2BjN,EAAkBuS,GAC/C,MAAMwE,EAAS/W,EAAO,GAAGxd,KACnBw0B,EAAShX,EAAO,GAAGxd,KACnB6pB,EAAc,EAAAnW,cAAcsW,UAAUuK,EAAQC,GAAQ,GAC5D,IAAK3K,EACH,MAAM,IAAIl7C,MAAM,yCAElB,MAAM8nD,EAAiB,EAAA7iB,kBAAkBiW,EAAYrgD,QAC/CktD,EAAgB,EAAA1iB,iBAChB,mBAACyZ,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBoC,GAE7DhD,EAAUvP,EAAOh0C,OAAS,EAC1BwjD,EAAcD,EAAU,+BAAiC,GACzD4J,EACF5J,EAAU,GAAG6J,EAAiBH,EAAgBC,EAAelZ,EAAO,GAAGxd,KAAM6pB,GAAa,KAAW,GAEnG5X,EAAO4X,EAAYrgD,OACnByuD,EAAQ1D,EAAO/qD,OACf0uD,EAAQ1D,EAAOhrD,OAEf6wC,EAAe,SACjBoT,UACAkJ,oCAC0B1kB,wBAChBgmB,sBACAC,8IANI3D,EAAOA,EAAO/qD,OAAS,6BAY3ByuD,EAAQ,0BACRC,EAAQ,oEAGdlL,cACAU,kCAGR,OAAO,OAAP,wBACKjD,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAEJ,CAKkC8d,CAAwB1N,EAAUjN,EAAQuS,IAC5E,CA1Ea,EAAAhL,OACT,CAAC+C,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAEXsK,EAAiBnf,QAAQ6F,KACpB,CAACsZ,EAAiBvJ,IACrB,EAAA6P,oCAAoCtG,EAAkBtK,EAAQ9S,GAAa8S,IAExE,CAACsK,EAAiBvJ,IAAIwS,EAA8BvT,EAAQ9S,GAAa8S,KAI3E,EAAAwH,sBACRp8C,GAAmD,EAAAonD,kCAAkCpnD,EAAK8hC,YAyD/F,kCAMA,MAAMqd,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,6BAGlB,GAAI6uC,EAAO,GAAGxd,KAAKwd,EAAO,GAAGxd,KAAKx2B,OAAS,KAAOg0C,EAAO,GAAGxd,KAAKwd,EAAO,GAAGxd,KAAKx2B,OAAS,GACvF,MAAM,IAAImF,MAAM,oCAGlB,GAAwB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,MACvB,YAAnBshB,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC7C,MAAM,IAAIvtB,MAAM,+BAGlB,GAAI6uC,EAAO,GAAGthB,OAASshB,EAAO,GAAGthB,KAC/B,MAAM,IAAIvtB,MAAM,4B,EAIpB,SAAgBioD,EACZH,EAAwBC,EAAkCtjB,EAA4BjD,EACtFH,GACF,IAAIiE,EAAwB,GAC5B,MAAMV,EAASH,EAAQ5pC,OACjBgqC,EAAUrD,EAAS3mC,OACnBqqC,EAAWL,EAAUD,EAEzBU,EADET,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQjJ,KAAI,CAAC5iC,EAAGF,IAAM,UAAUqvD,EAAcrvD,EAAIwsC,OAAatvB,KAAK,MAE9F,MACMuvB,EADgB,EAAAJ,cAAcC,iBAAiBP,EAASjD,GAC1BhG,KAAIpiC,GAAK,UAAU2uD,EAAc3uD,EAAI8rC,YAAkBtvB,KAAK,MAGhG,IAAIoa,EAAS,uCAkBb,OAnBiC,IADlB,EAAAwV,UAAU5rB,KAAK6qB,KAI5BzU,EAAS,uBAEoBqR,EAAW,kCAExCymB,oCACA3iB,mCAC2BG,iBACpBtV,QAEiC,mCAExC83B,oCACA3iB,mCAKJ,CAnCA,oB,oHCzGA,gBAEA,UACA,UAEA,UAEMskB,EAAsB,CAC1BhoD,KAAM,OACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY4Z,mBA+Cd,EAAAtW,4BAA8B,CAACrY,EAAgChL,IACvE,OAAD,wBAAK05B,GAAmB,CAAErgD,IAAK,IA7CL,EAAC2xB,EAAgChL,KAC7D,MAAM4T,EAAO,EAAAvB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SACjD6oB,EAAansB,EAAMsB,KAEnBs4B,EAAYzN,EAAWrhD,OAEvBsyC,EAAapd,EAAMsB,KAAKx2B,OAExBitD,EAAiB,EAAA7iB,kBAAkBkI,GACnCmD,EAAW,EAAA+L,YAAY,KAAMlP,GAC7Byc,GA8FUtmB,EA9FO6J,EA8FO9b,EA9FKif,EA8FW5K,EA9FDwW,EAAWA,EAAWrhD,OAAS,GA8FhB8qC,EA9FoBuW,EAAWA,EAAWrhD,OAAS,GA+FlG,IAATyoC,GAAuB,IAATA,EACT,GAIO,iBACJjS,EAAKiS,EAAO,oBACZjS,EAAKiS,EAAO,sBACVjS,EAAKiS,EAAO,0BACZjS,EAAKiS,EAAO,oCACFqC,+BACAD,YAZ1B,IAAkBpC,EAAcjS,EAAgBqU,EAAcC,EA5F5D,IAAIkkB,EAEFA,EADgB,IAAdF,EACgB,CAAC,EAAG,GACC,IAAdA,EACS,CAACzN,EAAW,GAAI,GAEhB,CAACA,EAAW/O,EAAa,GAAI+O,EAAW/O,EAAa,IAEzE,MAAM2c,EA8BR,SAAiCxmB,EAAclQ,EAA0B/B,GACvE,GAAa,IAATiS,EACF,MAAO,QAET,GAAa,IAATA,EACF,MAAO,QAAQlQ,EAAM,KAGvB,IAAI22B,EAAO,GACX,IAAK,IAAIrxD,EAAI4qC,EAAO,EAAG5qC,EAAI4qC,EAAM5qC,IAC/BqxD,GAAQ,GAAG14B,EAAK34B,SAAS06B,EAAM16B,EAAI4qC,EAAO,KACtC5qC,EAAI4qC,EAAO,IACbymB,GAAQ,MAIZ,OAAOA,CACT,CA/C+BC,CAAwB7c,EAAY0c,EAAiBvZ,GAC5EtgB,EAmDR,SAAmBoD,EAA0B/B,GAC3C,MAAMiS,EAAOlQ,EAAMv4B,OAEnB,GAAa,IAATyoC,EACF,MAAO,kBAGT,GAAa,IAATA,EACF,MAAO,oCACalQ,EAAM,4CAQ5B,IAAIx1B,EAAI,GACR,GAAI0lC,EAAO,EACT,IAAK,IAAI5qC,EAAI,EAAGA,EAAI4qC,EAAO,IAAK5qC,EAC9BkF,GAAQ,GAAGyzB,EAAK34B,MAGpB,MAAO,QAAQkF,wCACaA,0CACAA,mDACSA,YACvC,CA9EiBqsD,CAAU/N,EAAY5L,GAE/B5E,EAAe,sCAEXoc,6CAEGgC,qBACDnmB,EAAK3T,sDAEL45B,oBAEAjmB,EAAK3T,iBAAiBA,sCAIlC,OAAO,OAAP,wBACKy5B,GAAmB,CACtB9d,SAAS,EACT3b,OAAQ,CAACqB,KAAMtB,EAAMsB,KAAM9D,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAYC,QACtErE,gBAAY,EAKyBwe,CAAsBnvB,EAAShL,I,yIC3DxE,gBAEA,SAAgBo6B,EAAe1oD,EAAc6hC,GAC3C,OAAO,EAAA+B,cAAc/B,GAAM9H,KAAIpiC,GAAK,GAAGqI,KAAQrI,KACjD,CAFA,mBAIA,uBAA4BqI,EAAc6hC,GACxC,OAAa,IAATA,EACK,CAAC7hC,GAEH0oD,EAAe1oD,EAAM6hC,EAC9B,EAEA,+BACE,MAAO,mXAaT,C,sJC3BA,eAIA,UACA,UAEA,UAQM8mB,EAAqB,CACzB3oD,KAAM,MACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGd,EAAA6E,MACT,CAAC2C,EAAyCtK,EAAkB9S,KAC1DsuB,EAAiBxb,GAQV,CAPQsK,EAAiBvJ,IAAI,OAAD,wBAE1Bwa,GAAkB,CACrBlb,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAMkhD,EAAqBnR,EAAkBtK,EAAO,GAAI9S,KAE/D8S,KAIG,EAAA4H,qBAA+Dx8C,IAC1E,MAAM6oD,EAAO7oD,EAAK8hC,WAAWS,UAAU,OAAQ,YACzC/e,EAAQxjB,EAAK8hC,WAAWO,SAAS,QAAS,GAC1CsiB,EAAO3kD,EAAK8hC,WAAWY,QAAQ,QACrC,OAAO,EAAAlB,4BAA4B,CAACqnB,OAAMrlC,QAAOmhC,QAAM,EAG5C,EAAAlI,OACT,CAACyC,EAAyCtK,EAAkBiU,KAC1DyH,EAAkB1b,GAClB,MAAM2b,EAAaC,EAAgCtR,EAAkBtK,EAAQiU,GAC7E,OAAO,EAAAtM,MAAM2C,EAAkB,CAACtK,EAAO,IAAK2b,EAAW,EAGhD,EAAA7T,sBAAyD18C,GAClEA,EAAK8hC,WAAWS,UAAU,OAAQ,YAEtC,MAAMiuB,EACF,CAACtR,EAAyCtK,EAAkBiU,KAC1D,IAAK3J,EAAiBnf,QAAQ6Y,cAAchE,EAAO,GAAGqB,SACjDrB,EAAOh0C,QAAU,IAAMs+C,EAAiBnf,QAAQ6Y,cAAchE,EAAO,GAAGqB,QAC3E,MAAM,IAAIlwC,MAAM,0CAGlB,MAAM4+C,EAAOpyC,MAAM4pB,KAAKyY,EAAO,GAAG6b,aAC5BjtC,EAASoxB,EAAOh0C,QAAU,EAAKg0C,EAAO,GAAGvd,UAAU,GAAK,EAE9D,OAAO,EAAAmK,4BAA4B,CAACqnB,OAAMlE,OAAMnhC,SAAO,EAGvD6sC,EACF,CAACnR,EAAyCppB,EAAegM,KACvD,MAAMmf,EAAc,EAAA1V,UAAUmlB,SAAS56B,EAAMsB,KAAKt2B,QAASghC,EAAW6iB,MAChEtb,EAAO4X,EAAYrgD,OAEnB6wC,EAAe,WADDkf,EAAezR,EAAkBppB,EAAOgM,+BAGxCuH,0DAGpB,MAAO,CACL7hC,KAAM,MACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,UACzB3hB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACvEjG,eACD,EAGD2e,EAAoBxb,IACxB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,wBAElB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,sB,EAIduqD,EAAqB1b,IACzB,IAAKA,GAA6B,IAAlBA,EAAOh0C,QAAkC,IAAlBg0C,EAAOh0C,OAC5C,MAAM,IAAImF,MAAM,8BAElB,GAAuB,UAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,uBAElB,GAAI6uC,EAAOh0C,QAAU,GAAwB,WAAnBg0C,EAAO,GAAGthB,KAClC,MAAM,IAAIvtB,MAAM,sB,EAId4qD,EAAiB,CAACzR,EAAyCppB,EAAegM,KAC9E,MAAM4H,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,UACzDsO,EAAOC,GAAUuX,EAAiB3K,+BAA+Bze,EAAMsB,KAAM,EAAAye,YAAY6B,UAC1FpO,EAAU,EAAAiC,UAAUqM,eAAe9hB,EAAMsB,MAE/C,OAAQ0K,EAAW+mB,MACjB,IAAK,WACH,OAAO+H,EAAelnB,EAAM5T,EAAMsB,KAAMkS,EAAS5B,EAAOC,EAAQ7F,EAAW6iB,KAAM7iB,EAAWte,OAC9F,IAAK,UACH,OAAOqtC,EAAcnnB,EAAM5T,EAAMsB,KAAMkS,EAAS5B,EAAOC,EAAQ7F,EAAW6iB,MAC5E,IAAK,OACH,OAAOmM,EAAWpnB,EAAM5T,EAAMsB,KAAMkS,EAAS5B,EAAOC,EAAQ7F,EAAW6iB,MACzE,QACE,MAAM,IAAI5+C,MAAM,gB,EAIhB6qD,EACF,CAAClnB,EAAYvQ,EAA0BmQ,EAA4B5B,EAAeC,EAAgBgd,EACjGnhC,KACC,MAAM6lB,EAAOlQ,EAAMv4B,OACnB,IAAIwyC,EAAQ,GACZ,IAAK,IAAI30C,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B20C,GAAS,mBACD30C,QAAQkmD,EAAKlmD,+DAEV06B,EAAM16B,+CACD6qC,EAAQ7qC,gBAG1B,MAAO,4BACY4qC,+CACc7lB,6DAG7B4vB,mDACqC1L,MAAUC,8CACjB+B,EAAKC,gEAGtC,EAGDknB,EACF,CAACnnB,EAAYvQ,EAA0BmQ,EAA4B5B,EAAeC,EAAgBgd,KAE5F,MAAMtb,EAAOlQ,EAAMv4B,OAEnB,IAAIwyC,EAAQ,GACZ,IAAK,IAAI30C,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B20C,GAAS,mBACL30C,QAAQkmD,EAAKlmD,+EAGC,GAAK06B,EAAM16B,GAAK,gFAE1B06B,EAAM16B,4DAEF6qC,EAAQ7qC,gBAGtB,MAAO,4BACQ4qC,+DAGf+J,mDACqC1L,MAAUC,8CACjB+B,EAAKC,gEAGtC,EAGDmnB,EACF,CAACpnB,EAAYvQ,EAA0BmQ,EAA4B5B,EAAeC,EAAgBgd,KAE5F,MAAMtb,EAAOlQ,EAAMv4B,OAEnB,IAAIwyC,EAAQ,GACZ,IAAK,IAAI30C,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B20C,GAAS,mBACL30C,QAAQkmD,EAAKlmD,qDAEV06B,EAAM16B,WAAW06B,EAAM16B,GAAK,6BACvB6qC,EAAQ7qC,cAGtB,MAAO,4BACQ4qC,+DAGf+J,mDACqC1L,MAAUC,8CACjB+B,EAAKC,gEAGtC,C,2OCxMP,eAIA,UAEA,UAWa,EAAAgQ,YACT,CAACuF,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GACf,MAAMiN,EACF,CAACr6C,KAAM,cAAeqiC,WAAY,CAAC,KAAMgL,WAAY,CAAC,EAAAgB,YAAY6B,UAAWzC,UAAWnT,EAAWX,UAGvG,MAAO,CAFQ+d,EAAiBvJ,IAAI,OAAD,wBAC3BkM,GAAQ,CAAE1yC,IAAK,IAAM4hD,EAA6Bnc,EAAQiN,GAAU,EAAO/f,KAAc8S,GAClF,EAGR,EAAAgF,2BACR55C,IACC,MAAMwkD,EAAUxkD,EAAK8hC,WAAWS,UAAU,WAAY,UAChDyuB,EAAWhxD,EAAK8hC,WAAWQ,OAAO,YAAa,GAC/C2uB,EAAsE,IAAnDjxD,EAAK8hC,WAAWQ,OAAO,oBAAqB,GAC/DoiB,EAAc1kD,EAAK8hC,WAAWY,QAAQ,gBACtC4G,EAAUtpC,EAAK8hC,WAAWY,QAAQ,UAAW,IAC7CiiB,EAAO3kD,EAAK8hC,WAAWY,QAAQ,OAAQ,IAG7C,GAAiB,IAAbsuB,EACF,MAAM,IAAIjrD,MAAM,0EAGlB,OAAO,EAAAy7B,4BAA4B,CAACgjB,UAASwM,WAAUC,kBAAiBvM,cAAapb,UAASqb,QAAM,EAG1G,MAAMoM,EACF,CAACnc,EAAkBiN,EAA2BqP,EAA2BpvB,KAEnE,MAAOykB,EAAoBtF,GACvBkQ,EAAwCvc,EAAQ9S,EAAYovB,GAC1DjF,EAAa,EAAA1gB,UAAU5rB,KAAK4mC,EAAmB7B,aAErD,IAAI0M,EAAM,GACN7K,EAAmB0K,gBACrBG,GAAO,kBAAkBnF,MAEzBmF,GAAO,kBAAkBnF,YAE3B,MACMxa,EAAe,aADD4f,EAAoBzc,EAAO,GAAGxd,KAAMmvB,EAP5C,kBAOqE6K,EAAK,iBAItF,OAAO,OAAP,wBACKvP,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAIX,EAAA+J,kBACT,CAAC0D,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GACf,MAAMiN,EAAW,CACfr6C,KAAM,oBACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,UACzBzC,UAAW,GAAGnT,EAAWmvB,mBAI3B,MAAO,CAFQ/R,EAAiBvJ,IAAI,OAAD,wBAC3BkM,GAAQ,CAAE1yC,IAAK,IAAM4hD,EAA6Bnc,EAAQiN,GAAU,EAAM/f,KAAc8S,GACjF,EAGR,EAAA6G,iCACRz7C,IACC,MAAMixD,EAAsE,IAAnDjxD,EAAK8hC,WAAWQ,OAAO,oBAAqB,GACrE,OAAO,EAAAd,4BACH,CAACgjB,QAAS,GAAIwM,SAAU,EAAGC,kBAAiBvM,YAAa,GAAIpb,QAAS,GAAIqb,KAAM,IAAI,EAQjF,EAAAtI,QACT,CAAC6C,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GACf,MAAMiN,EACF,CAACr6C,KAAM,UAAWqiC,WAAY,CAAC,KAAMgL,WAAY,CAAC,EAAAgB,YAAY6B,UAAWzC,UAAWnT,EAAWX,UAGnG,MAAO,CAFQ+d,EAAiBvJ,IAAI,OAAD,wBAC3BkM,GAAQ,CAAE1yC,IAAK,IAAMmiD,EAAyB1c,EAAQiN,GAAU,EAAO/f,KAAc8S,GAC9E,EAGR,EAAA0H,uBACRt8C,IACC,MAAMwkD,EAAUxkD,EAAK8hC,WAAWS,UAAU,WAAY,UAChDyuB,EAAWhxD,EAAK8hC,WAAWQ,OAAO,YAAa,GAC/CoiB,EAAc1kD,EAAK8hC,WAAWY,QAAQ,gBACtC4G,EAAUtpC,EAAK8hC,WAAWY,QAAQ,UAAW,IAC7CiiB,EAAO3kD,EAAK8hC,WAAWY,QAAQ,OAAQ,IACvC6uB,EAAevxD,EAAK8hC,WAAWQ,OAAO,gBAAiB,GACvDmiB,EAAYzkD,EAAK8hC,WAAWY,QAAQ,YAAa,IAGvD,GAAqB,IAAjB6uB,EACF,MAAM,IAAIxrD,MAAM,+DAElB,GAAiB,IAAbirD,EACF,MAAM,IAAIjrD,MAAM,sEAGlB,OAAO,EAAAy7B,4BACH,CAACgjB,UAASwM,WAAUC,iBAAiB,EAAOvM,cAAapb,UAASqb,OAAM4M,eAAc9M,aAAW,EAG3G,MAAM6M,EACF,CAAC1c,EAAkBiN,EAA2BqP,EAA2BpvB,KAEnE,MAAOykB,EAAoBtF,GACvBkQ,EAAwCvc,EAAQ9S,EAAYovB,GAM1Dzf,EAAe,WADD4f,EAAoBzc,EAAO,GAAGxd,KAAMmvB,EAJ5C,2CAGA,GAC0E,gBAItF,OAAO,OAAP,wBACK1E,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAIlB0f,EACF,CAACvc,EAAkB9S,EAAqDovB,KAElE,MAAMjP,EAAarN,EAAO,GAAGxd,KAAKt2B,QAC5B0wD,EAAenyD,OAAOq0B,eAAe5f,KAAKguB,EAAY,aACtD4iB,EAAc5iB,EAAW4iB,YAAY5jD,QACrCwoC,EAAUxH,EAAWwH,QAAQxoC,QAC7B2jD,EAAsB+M,EAAgB1vB,EAAiC2iB,UAAU3jD,QAAU,GAC3F6jD,EAAO7iB,EAAW6iB,KAAK7jD,QAC7B,EAAA0nD,aAAaiJ,qBAAqBP,EAAkBjP,EAAYyC,EAAapb,EAASmb,EAAWE,GAEjG,MAAM1D,EAAc,EAAAuH,aAAakJ,uBAC7BR,EAAkBjP,EAAY3Y,EAASmb,EAAWC,EAAaC,EAAM7iB,EAAW0iB,SAE9E0C,EAAgB7nD,OAAOC,OAAO,CAAC,EAAGwiC,GAMxC,OALI0vB,EACFnyD,OAAOC,OAAO4nD,EAAe,CAACxC,cAAapb,UAASqb,OAAMF,YAAWtjB,SAAUW,EAAWX,WAE1F9hC,OAAOC,OAAO4nD,EAAe,CAACxC,cAAapb,UAASqb,OAAMxjB,SAAUW,EAAWX,WAE1E,CAAC+lB,EAAejG,EAAY,EAGvC0Q,EAA0B,CAC9BnN,QAAS,GACTwM,SAAU,EACVC,iBAAiB,EACjBvM,YAAa,GACbpb,QAAS,GACTqb,KAAM,GACN4M,aAAc,EACd9M,UAAW,GACXtjB,SAAU,IAGNywB,EAAwB,CAC5BpqD,KAAM,gBACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGd,EAAAgE,cAAgB,CAACwD,EAAyCtK,KACrEuK,EAAevK,GAOR,CANQsK,EAAiBvJ,IAAI,OAAD,wBAE1Bic,GAAqB,CACxBziD,IAAK,IAAMmiD,EAAyB1c,EAAQgd,GAAuB,EAAMD,KAE3E/c,KAIN,MAAMuK,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,8BAElB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,sB,EAIdsrD,EACF,CAACQ,EAA8B/vB,EAAmCgwB,EAAaV,EAAa71C,KAEtF,MAAM8tB,EAAOwoB,EAAUjxD,OACvB,GAAIkhC,EAAW4iB,YAAY9jD,QAAU,EAAG,CACtC,MAAMmxD,EAAKjwB,EAAW4iB,YAAY5iB,EAAW4iB,YAAY9jD,OAAS,GAC5DoxD,EAAKlwB,EAAWwH,QAAQxH,EAAWwH,QAAQ1oC,OAAS,GACpDqxD,EAAUnwB,EAAW6iB,KAAK7iB,EAAW6iB,KAAK/jD,OAAS,EAAI,GACvDsxD,EAAQpwB,EAAW6iB,KAAK7iB,EAAW6iB,KAAK/jD,OAAS,GACjDuxD,EAAON,EAAUxoB,EAAO,GAC9B,IAAI+oB,EAAQ,GACRC,EAAQ,GACRC,EAAW,GAmBf,GAjBEF,EADEH,EAAUC,IAAU,EACd,mCACUH,4BAChB1oB,oBAAuBA,YAAe2oB,OAAQC,6BAC1C5oB,mBAAsBA,aAAgB8oB,mFAI5CL,iBAGQ,mCACUC,4BAChB1oB,oBAAuBA,YAAe2oB,OAAQC,uBAChDH,iBAIoC,IAAlChwB,EAAW4iB,YAAY9jD,OAAc,CACvC,MAAM2xD,EAAKzwB,EAAW4iB,YAAY5iB,EAAW4iB,YAAY9jD,OAAS,GAC5D4xD,EAAK1wB,EAAWwH,QAAQxH,EAAWwH,QAAQ1oC,OAAS,GACpD6xD,EAAU3wB,EAAW6iB,KAAK7iB,EAAW6iB,KAAK/jD,OAAS,EAAI,GACvD8xD,EAAQ5wB,EAAW6iB,KAAK7iB,EAAW6iB,KAAK/jD,OAAS,GACjD+xD,EAAOd,EAAUxoB,EAAO,GAE5BgpB,EADEI,EAAUC,IAAU,EACd,qCACUH,8BAChBlpB,oBAAuBA,YAAempB,OAAQC,+BAC1CppB,mBAAsBA,aAAgBspB,+BACpCZ,6DAKA,qCACUQ,8BAChBlpB,oBAAuBA,YAAempB,OAAQC,uBAGlDH,EAAW,yB,CAmBb,MAdoB,uCACIjpB,0BAClBA,kEAGQ9tB,yCAEd82C,gBACAD,gBACAE,gBACAlB,+C,CAKK,CACL,MAAMnF,EAAa,EAAA1gB,UAAU5rB,KAAKmiB,EAAW4iB,aACvCkO,EAAgB,EAAArnB,UAAUqM,eAAe9V,EAAW4iB,aACpDmO,EAAcD,EAAchyD,OAC5BkyD,EAAWhxB,EAAW6iB,KAAK/jD,OAC3BmyD,EAA0BhgB,EAAgB8f,GAC1CG,EAAgBC,EAAUpB,EAAW,aACrCqB,EAAWD,EAAUnxB,EAAW6iB,KAAM,QACtCwO,EAAoBF,EAAUL,EAAe,iBAC7CQ,EAAcH,EAAUnxB,EAAWwH,QAAS,WAElD,IAAI+pB,EAAU,GAiDd,OA/CEA,EAHcvxB,EAAW6iB,KAAK2O,QAAO,CAAChV,EAAKiV,IAAQjV,EAAMiV,IAG/C,oMAQVzB,iBAGU,4BAEZA,cAGoB,aACtBiB,wCAC0B1pB,0BAClBA,6DAEKwpB,2BACFC,gCACKzpB,oCACIwpB,8BACNA,kBACZK,gBACAF,gBACAI,gBACAD,gCAEc53C,4FAGM0wC,2HAGL5iB,OAAUwpB,UAAoBxpB,4DACTA,OAAUwpB,oCAC3BxpB,OAAUwpB,oCACzBQ,6BAEJjC,iD,GASN6B,EAAY,CAACO,EAA0BC,KAC3C,IAAIrgB,EAAQ,GACZ,IAAK,IAAI30C,EAAI,EAAGA,EAAI+0D,EAAM5yD,OAAQnC,IAChC20C,GAAS,WACLqgB,KAAah1D,QAAQ+0D,EAAM/0D,YAGjC,OAAO20C,CAAK,EAGRL,EAAmB1J,GAAyB,4CACTA,uBAA0BA,0BACzDA,4DAGgBA,wHAIZA,uB,gNC1Wd,eAEA,SAEA,UAEA,UAUMiqB,EACF,CAACpU,EAAyCtK,EAAkB9S,EAA8Bt6B,EACzFksD,KACCvU,EAAevK,GAEf,MAAM+e,EAAwB,CAC5BnsD,OACAqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAW3B,MAAO,CARQwH,EAAiBvJ,IAAI,OAAD,wBAE1Bge,GAAqB,CACxB1e,UAAWnT,EAAWX,SACtBhyB,IAAK,IACDykD,EAAwB1U,EAAkBtK,EAAQ9S,EAAYt6B,EAAMksD,EAAUC,KAEpF/e,GACW,EAGR,EAAAiI,sBAAmE78C,IAC9E,MAAM6zD,EAAO7zD,EAAK8hC,WAAWY,QAAQ,OAAQ,IACvCoxB,EAAqD,IAA1C9zD,EAAK8hC,WAAWQ,OAAO,WAAY,GACpD,OAAO,EAAAd,4BAA4B,CAACqyB,OAAMC,YAAU,EAGtD,MAAMF,EACF,CAAC9yB,EAAgC8T,EAAkB9S,EAA8Bt6B,EAAcksD,EAC9FC,KACC,MAAM1S,EAAwB,GACxB8S,EAAQnf,EAAO,GAAGxd,KAAKx2B,QAAU,EAEjCozD,EAAU,GAEVH,EAAO,EAAAtoB,UAAU0oB,cAAcnyB,EAAW+xB,KAAMjf,EAAO,GAAGxd,KAAKx2B,QAC/DszD,EAAMR,EAAS9e,EAAQif,GAC7B,IAAIM,EAAYD,EAAI,GAEpB,IAAK,IAAIt2D,EAAI,EAAGA,EAAIg3C,EAAO,GAAGxd,KAAKx2B,OAAQhD,IAErCi2D,EAAKhyD,QAAQjE,IAAM,GAAqB,IAAhBi2D,EAAKjzD,QAC3BkhC,EAAWgyB,UACb7S,EAAYh5C,KAAK,GAInBksD,EAAY,wBACDv2D,WAAWA,OAAOg3C,EAAO,GAAGxd,KAAKx5B,QAAQA,gCACvCA,SAASA,mBAClBu2D,mBAGJH,EAAQ/rD,KAAK,YAAYrK,kBAAkBqjD,EAAYrgD,YAEvDqgD,EAAYh5C,KAAK2sC,EAAO,GAAGxd,KAAKx5B,KAIpC,MAEM6zC,EAAe,uCAFPwP,EAAYrgD,QAAU,qFAKnBmzD,8CACbC,EAAQr4C,KAAK,kBACbu4C,EAAI,oDACJC,cACAD,EAAI,gFAIR,OAAO,OAAP,wBACKP,GAAqB,CACxB59B,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAId0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,+BAGlB,IAA8C,IAA1C,EAAAmlD,aAAarpD,QAAQ+yC,EAAO,GAAGthB,MACjC,MAAM,IAAIvtB,MAAM,sB,EAIP,EAAAm3C,UACT,CAACgC,EAAyCtK,EAAkB9S,IAEnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,aADzB,IAAgB,CAAC,eAAgB,yBAA0B,MAI/E,EAAAib,WACT,CAACmC,EAAyCtK,EAAkB9S,IAWnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,cAVzB,CAAC8S,EAAkBif,KAC5C,IAAIl0C,EAAO,EACX,IAAK,IAAI/hB,EAAI,EAAGA,EAAIg3C,EAAO,GAAGxd,KAAKx2B,OAAQhD,KACrCi2D,EAAKhyD,QAAQjE,IAAM,GAAqB,IAAhBi2D,EAAKjzD,UAC/B+e,GAAQi1B,EAAO,GAAGxd,KAAKx5B,IAI3B,MAAO,CAAC,eAAgB,yBAA0B,YAAY+hB,MAAS,IAKlE,EAAAm9B,UACT,CAACoC,EAAyCtK,EAAkB9S,IAWnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,aAVzB,CAAC8S,EAAkBif,KAC5C,MAAMO,EAAU,GAChB,IAAK,IAAIx2D,EAAI,EAAGA,EAAIg3C,EAAO,GAAGxd,KAAKx2B,OAAQhD,KACrCi2D,EAAKhyD,QAAQjE,IAAM,GAAqB,IAAhBi2D,EAAKjzD,SAC/BwzD,EAAQnsD,KAAK,YAAYrK,WAI7B,MAAO,CAAC,GAAGw2D,EAAQz4C,KAAK,+BAAgC,oCAAqC,GAAG,IAK3F,EAAAqhC,UACT,CAACkC,EAAyCtK,EAAkB9S,IAWnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,aAVzB,CAAC8S,EAAkBif,KAC5C,MAAMO,EAAU,GAChB,IAAK,IAAIx2D,EAAI,EAAGA,EAAIg3C,EAAO,GAAGxd,KAAKx2B,OAAQhD,KACrCi2D,EAAKhyD,QAAQjE,IAAM,GAAqB,IAAhBi2D,EAAKjzD,SAC/BwzD,EAAQnsD,KAAK,YAAYrK,WAI7B,MAAO,CAAC,GAAGw2D,EAAQz4C,KAAK,+BAAgC,oCAAqC,GAAG,IAK3F,EAAAshC,WACT,CAACiC,EAAyCtK,EAAkB9S,IAEnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,cADzB,IAAgB,CAAC,eAAgB,yBAA0B,MAI/E,EAAA8a,aACT,CAACsC,EAAyCtK,EAAkB9S,IAEnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,gBADzB,IAAgB,CAAC,eAAgB,yBAA0B,yBAI/E,EAAAqb,mBACT,CAAC+B,EAAyCtK,EAAkB9S,IAEnDwxB,EAAOpU,EAAkBtK,EAAQ9S,EAAY,sBADzB,IAAgB,CAAC,wBAAyB,oCAAqC,K,gKC1KhH,gBACA,UAEA,UAEA,UAyEa,EAAAsW,uCACT,CAACtX,EAAgCuzB,EAAiBC,KAChD,MAAMzS,EAzEiC,CAACyS,IAC1C,CAAE9sD,KAAM,mBAAoBqtC,WAAY,CAAC,EAAAgB,YAAYC,QAASjM,WAAY,CAAC,KAAMoL,UAAW,GAAGqf,MAwE5EC,CAAqCD,GACtD,OAAO,OAAP,wBAAWzS,GAAQ,CAAE1yC,IAAK,IAtE5B,EAAC2xB,EAAgCuzB,EAAiBxS,EAA2ByS,KAEvE,MAAME,EAAeH,EAAQj9B,KACvB6gB,EAAsBqc,EAE5B,IAAIG,EAAW,GACf,IAAK,IAAIh2D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIi2D,EAAe,GACnB,OAAQj2D,GACN,KAAK,EACHi2D,EAAe,qBACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,8CACf,MACF,QACE,MAAM,IAAI3uD,MAGd0uD,GAAY,aACdC,cACAj2D,EAAI,EAAI,sDAAwD,+OAMvDA,iFAETA,EAAI,EAAI,IAAM,Y,CAGd,MAAMirC,EAAO,EAAAvB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SAEjDqY,EAAe,WAsE/B,SAAgCtY,GAC9B,MAAMmQ,EAAU,EAAAiC,UAAUqM,eAAeze,GACnCiQ,EAAS,CAAC,IAAK,IAAK,KAEpBI,EAAyBF,EACK/H,KAAI,CAACkI,EAAQhrC,IAKL,OAJc2qC,EAAO3qC,gBAAmBgrC,MACjChrC,IAAM6qC,EAAQ1oC,OAAS,EACjC,OAAOwoC,EAAO3qC,EAAI,gBAAmB2qC,EAAO3qC,QAAQgrC,IACpD,YAAYL,EAAO3qC,QAAQgrC,SAGhC9tB,KAAK,IAEzC,MAAO,oEAED6tB,4CAIR,CAzFQmrB,CAAuBH,aA2F/B,SAAiCr7B,GAC/B,MAAMmQ,EAAU,EAAAiC,UAAUqM,eAAeze,GAEzC,MAAO,+FAGemQ,EAAQ,mBAAmBA,EAAQ,uBAG3D,CAnGQsrB,CAAwB3c,aACxB,EAAAsK,4KAQatK,EAAoB,2BACpBA,EAAoB,kBAE/Bwc,cACA/qB,EAAK3T,kCAIL,OAAO,OAAP,wBACK8rB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAM6gB,EAAqB3kB,KAAM+gC,EAAQ/gC,KAAMkhB,YAAa,EAAAqB,YAAYC,QACjFrE,eACAC,SAAS,GAAI,EAOamjB,CAAiC/zB,EAASuzB,EAASxS,EAAUyS,IAAc,EAGjH,yBAA8Bn7B,GAC5B,GAAqB,IAAjBA,EAAMv4B,OACR,MAAO,CAAC,EAAG,EAAG,GAGhB,IAAIk0D,EAAQ,EACZ,IAAK,IAAIr2D,EAAI,EAAGA,EAAI06B,EAAMv4B,OAAS,IAAKnC,EACtCq2D,GAAS37B,EAAM16B,GAEjB,MAAO,CAACq2D,EAAO37B,EAAMv4B,OAAS,EAAIu4B,EAAMA,EAAMv4B,OAAS,GAAK,EAAGu4B,EAAMA,EAAMv4B,OAAS,GACtF,EAaA,0BAA+Bw2B,EAAyBogB,GACtD,IAAIud,GAAiB,EAUrB,OAREA,EADkB,IAAhB39B,EAAKx2B,QAAwC,IAAxB42C,EAAa52C,SAE3Bw2B,EAAKx2B,OAAS,GAAK42C,EAAa52C,OAAS,EACjCw2B,EAAKA,EAAKx2B,OAAS,KAAO42C,EAAaA,EAAa52C,OAAS,GAE7Dw2B,EAAKA,EAAKx2B,OAAS,KAAO42C,EAAaA,EAAa52C,OAAS,IAC1Ew2B,EAAKA,EAAKx2B,OAAS,KAAO42C,EAAaA,EAAa52C,OAAS,IAG5Dm0D,CACT,C,+FCvHA,gBAGa,EAAA1X,QAAU,CAACvc,EAAgC8T,KACtD,MAAM4C,EAAe,EAAAjM,UAAUypB,sBAAsBpgB,EAAO,GAAGxd,KAAMwd,EAAO,GAAG6b,aAC/E,OAAI3vB,EAAQf,QAAQ6F,KACX,CAAC9E,EAAQ+W,cAAcjD,EAAO,GAAI4C,IAElC,CAAC1W,EAAQyW,gBAAgB3C,EAAO,GAAI4C,G,sJCN/C,gBAEA,UACA,UAEA,UACA,UAEMyd,EAAwB,CAC5BztD,KAAM,SACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAYC,SAGd,EAAAwH,OACT,CAAC4B,EAAyCtK,EAAkB9S,KAC1D,EAAAqd,eAAevK,EAAQ9S,GAQhB,CAPQod,EAAiBvJ,IAAI,OAAD,wBAE1Bsf,GAAqB,CACxBhgB,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAM+lD,EAA8BhW,EAAkBtK,EAAQ9S,KAErE8S,KAIG,EAAA2I,yBACRv9C,GAAyC,EAAAm1D,wBAAwBn1D,EAAM,IAE/D,EAAAw9C,yBACRx9C,GAAyC,EAAAm1D,wBAAwBn1D,EAAM,IAE5E,MAAMk1D,EACF,CAAChW,EAAyCtK,EAAkB9S,KAC1D,MAAM4H,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,UACzDg8B,EAAQnU,GAAeoU,EAAczgB,EAAQ9S,GAIpD,GADIszB,EAAOE,OAAO32D,GAAoB,IAANA,KAAmD,uBAAvCmjC,EAAWyzB,wBAErD,OAAO,OAAP,wBACKN,GAAqB,CACxBl/B,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAYC,QAC3EpE,SAAS,EACTD,aAAc,+CACO/H,EAAKC,iDACdD,EAAK3T,mCAKrB,MAAMwC,EAAM0oB,EAAYrgD,OACxB,GAAI23B,EAAM,EACR,MAAM,IAAIxyB,MAAM,kDAAkDwyB,KAGpE,MAAMi9B,EAAevU,EAAY1oB,EAAM,GACjCk9B,EAAcxU,EAAY1oB,EAAM,GAEhC0pB,EAAarN,EAAO,GAAGxd,KAC7B,GAAImB,IAAQ0pB,EAAWrhD,OACrB,MAAM,IAAImF,MAAM,uCAAuCk8C,EAAWrhD,mBAAmB23B,KAEvF,MAAMm9B,EAAczT,EAAW1pB,EAAM,GAC/Bo9B,EAAa1T,EAAW1pB,EAAM,GAE9Bq9B,EAAeR,EAAO78B,EAAM,GAC5Bs9B,EAAcT,EAAO78B,EAAM,GAEjC,IAAIu9B,EAAqB,GAEzB,GAAwB,WAApBh0B,EAAW+mB,KAEb,MAAM,IAAI9iD,MAAM,2CAA2C+7B,EAAW+mB,SAExE,OAAQ/mB,EAAWyzB,yBACjB,IAAK,aACHO,EAAqB,mKAKrB,MACF,IAAK,aACHA,EAAqB,iLAKrB,MACF,IAAK,gBACHA,EAAqB,8GAEeL,cAAwBD,cAAyBC,2CACjED,6DACiBG,cAAuBD,cAAwBC,2CAChED,+KAKpB,MACF,QAEE,MAAM,IAAI3vD,MAAM,8FACS+7B,EAAWyzB,4BAGxC,MAAM1H,EAAiB,EAAA7iB,kBAAkBzS,GAEnCkZ,EAAe,2CACaikB,QAAkBC,wDACVC,aAAwBC,aAAuBD,aACrFC,qBAJkB,EAAAtT,oCAMduT,iMAKIjI,s8BAiByB2H,EAAe,gDACfC,EAAc,urEAsCvC/rB,EAAK3T,oDAGjB,OAAO,OAAP,wBACKk/B,GAAqB,CACxBl/B,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAYC,QAC3EpE,SAAS,EACTD,gBAAY,EAKd4jB,EAAgB,CAACzgB,EAAkB9S,KACvC,MACMorB,EADItY,EAAO,GACDxd,KAEhB,IACI2+B,EADAX,EAAStzB,EAAWszB,OAExB,GAAsB,IAAlBA,EAAOx0D,OAAc,CACvB,MAAMo1D,EAAephB,EAAO9S,EAAWm0B,gBACvC,GAAID,GAAsC,IAAtBA,EAAar2C,KAAY,CAC3C,GAAIi1B,EAAO9S,EAAWo0B,eACpB,MAAM,IAAInwD,MAAM,0DAElBqvD,EAASe,EAAgBH,EAAcl0B,EAAW+mB,KAAM/mB,EAAWs0B,S,KAC9D,CACL,MAAMC,EAAczhB,EAAO9S,EAAWo0B,eACtC,IAAKG,GAAoC,IAArBA,EAAY12C,KAC9B,MAAM,IAAI5Z,MAAM,qDAGlBgwD,EAAcxjD,MAAM4pB,KAAKk6B,EAAY5F,aACrC2E,EAASkB,EAA8BP,EAAa7I,EAAOprB,EAAW+mB,KAAM/mB,EAAWs0B,S,OAGzF,GAAIxhB,EAAO9S,EAAWo0B,eACpB,MAAM,IAAInwD,MAAM,0DAIpB,MAAMwwD,EAAQR,GAAgB7I,EAAM3rB,KAAI,CAAChJ,EAAK95B,IAAMmQ,KAAKwD,MAAMmmB,EAAM68B,EAAO32D,MAE5E,MAAO,CAAC22D,EAAQmB,EAAM,EAGlBJ,EAAkB,CAACzW,EAAemJ,EAAcuN,KACpD,MAAMhB,EAAS7iD,MAAM4pB,KAAKujB,EAAMroB,WAEhC,OADA,EAAAm/B,iBAAiBpB,EAAQvM,EAAMuN,GACxBhB,CAAM,EAGTkB,EACF,CAACC,EAA0BrJ,EAA0BrE,EAAcuN,KACjE,MAAMx1D,EAASssD,EAAMtsD,OACfw0D,EAAS,IAAI7iD,MAAc3R,GAEjC,IAAK,IAAInC,EAAI,EAAG+c,EAAM5a,EAAQnC,EAAI+c,EAAK/c,IACrC,GAAiB,IAAbyuD,EAAMzuD,GAAU,CAClB,GAAiB,IAAb83D,EAAM93D,GACR,MAAM,IAAIsH,MAAM,0DAElBqvD,EAAO32D,GAAK,C,MAEZ22D,EAAO32D,GAAK83D,EAAM93D,GAAKyuD,EAAMzuD,GAIjC,OADA,EAAA+3D,iBAAiBpB,EAAQvM,EAAMuN,GACxBhB,CAAM,C,8FCvPnB,gBAGa,EAAAj8B,MAAQ,CAAC+lB,EAAyCtK,KAC7DuK,EAAevK,GACR,CAAC,IAAI,EAAA3b,OAAO,CAAC2b,EAAO,GAAGxd,KAAKx2B,QAAS,aAAS2Z,OAAWA,EAAW,IAAIzV,WAAW8vC,EAAO,GAAGxd,SAGtG,MAAM+nB,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,0B,iICVpB,eAEA,SAEA,UAEA,UAQM0wD,EAAuB,CAC3BjvD,KAAM,QACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGd,EAAA52C,MACT,CAACo+C,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAQR,CAPQsK,EAAiBvJ,IAAI,OAAD,wBAE1B8gB,GAAoB,CACvBxhB,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAMunD,EAAuBxX,EAAkBtK,EAAO,GAAI9S,KAEjE8S,KAIG,EAAAgJ,qBAAiE59C,IAC5E,MAAM22D,EAAS32D,EAAK8hC,WAAWY,QAAQ,UACjCk0B,EAAO52D,EAAK8hC,WAAWY,QAAQ,QAC/BmxB,EAAO7zD,EAAK8hC,WAAWY,QAAQ,OAAQ,IAC7C,OAAO,EAAAlB,4BAA4B,CAACm1B,SAAQC,OAAM/C,QAAM,EAG1D,MAAM6C,EACF,CAACxX,EAAyCppB,EAAegM,KACvD,MAAM+xB,EAAmC,IAA3B/xB,EAAW+xB,KAAKjzD,OAAgBk1B,EAAMsB,KAAKt2B,MAAM,GAAGygC,KAAI,CAAC7kB,EAAKje,IAAMA,IAAKqjC,EAAW+xB,KAC5FgD,EAAiB,EAAAtrB,UAAU0oB,cAAcJ,EAAM/9B,EAAMsB,KAAKx2B,QAC1D+1D,EAAS70B,EAAW60B,OAAOp1B,KAAI,CAAChmB,EAAO9c,IACvC8c,EAAQua,EAAMsB,KAAKy/B,EAAep4D,IAAM,EACnCq3B,EAAMsB,KAAKy/B,EAAep4D,IAE5B,EAAA8sC,UAAUwf,cAAcxvC,EAAOua,EAAMsB,KAAKy/B,EAAep4D,OAE5Dm4D,EAAO90B,EAAW80B,KAAKr1B,KAAI,CAAC/lB,EAAK/c,IACjC+c,EAAMsa,EAAMsB,KAAKy/B,EAAep4D,IAAM,EACjCq3B,EAAMsB,KAAKy/B,EAAep4D,IAE5B,EAAA8sC,UAAUwf,cAAcvvC,EAAKsa,EAAMsB,KAAKy/B,EAAep4D,OAG1DwiD,EAAcnrB,EAAMsB,KAAKt2B,QAEzBg2D,EAAqB,GAC3B,IAAK,IAAIr4D,EAAI,EAAGA,EAAIo4D,EAAej2D,OAAQnC,IACzCwiD,EAAY4V,EAAep4D,IAAMm4D,EAAKn4D,GAAKk4D,EAAOl4D,GAC9Ck4D,EAAOl4D,GAAK,GACdq4D,EAAS7uD,KAAK,aAAa4uD,EAAep4D,UAAUk4D,EAAOl4D,OAI/D,MACMgzC,EAAe,uCADRwP,EAAYrgD,uBAGrBk2D,EAASn7C,KAAK,sDAGlB,OAAO,OAAP,wBACK86C,GAAoB,CACvB1gC,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACvEjG,gBAAY,EAId0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,2BAElB,IAA8C,IAA1C,EAAAmlD,aAAarpD,QAAQ+yC,EAAO,GAAGthB,MACjC,MAAM,IAAIvtB,MAAM,sB,EAIP,EAAA43C,SAAW,CAACuB,EAAyCtK,KAChEmiB,EAAkBniB,GAClB,MAAM9S,EAAak1B,EAAkC9X,EAAkBtK,GAQvE,MAAO,CAPQsK,EAAiBvJ,IAAI,OAAD,wBAE1B8gB,GAAoB,CACvBxhB,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAMunD,EAAuBxX,EAAkBtK,EAAO,GAAI9S,KAEjE,CAAC8S,EAAO,KACG,EAGjB,MAAMoiB,EACF,CAAC9X,EAAyCtK,KACxC,IAAKsK,EAAiBnf,QAAQ6Y,cAAchE,EAAO,GAAGqB,UACjDiJ,EAAiBnf,QAAQ6Y,cAAchE,EAAO,GAAGqB,SACjDrB,EAAOh0C,QAAU,IAAMs+C,EAAiBnf,QAAQ6Y,cAAchE,EAAO,GAAGqB,SACxErB,EAAOh0C,QAAU,IAAMs+C,EAAiBnf,QAAQ6Y,cAAchE,EAAO,GAAGqB,QAC3E,MAAM,IAAIlwC,MAAM,4CAGlB,GAAI6uC,EAAOh0C,QAAU,GAAKg0C,EAAO,GAAG6b,YAAYwG,MAAMx4D,GAAoB,IAANA,IAClE,MAAM,IAAIsH,MAAM,oDAGlB,MAAM4wD,EAASpkD,MAAM4pB,KAAKyY,EAAO,GAAG6b,aAC9BmG,EAAOrkD,MAAM4pB,KAAKyY,EAAO,GAAG6b,aAC5BoD,EAAOjf,EAAOh0C,QAAU,EAAI2R,MAAM4pB,KAAKyY,EAAO,GAAG6b,aAAe,GAEtE,MAAO,CAACkG,SAAQC,OAAM/C,OAAM1yB,SADX,GAAG0yB,KAAQ8C,KAAUC,IACD,EAGrCG,EAAqBniB,IACzB,IAAKA,GAAUA,EAAOh0C,OAAS,GAAKg0C,EAAOh0C,OAAS,EAClD,MAAM,IAAImF,MAAM,yBAElB,GAAuB,UAAnB6uC,EAAO,GAAGthB,MAA8C,IAA1BshB,EAAO,GAAGxd,KAAKx2B,OAC/C,MAAM,IAAImF,MAAM,uBAElB,GAAuB,UAAnB6uC,EAAO,GAAGthB,MAA8C,IAA1BshB,EAAO,GAAGxd,KAAKx2B,OAC/C,MAAM,IAAImF,MAAM,uBAElB,GAAI6uC,EAAOh0C,QAAU,IAAyB,UAAnBg0C,EAAO,GAAGthB,MAA8C,IAA1BshB,EAAO,GAAGxd,KAAKx2B,QACtE,MAAM,IAAImF,MAAM,uBAElB,GAAI6uC,EAAOh0C,QAAU,IAAyB,UAAnBg0C,EAAO,GAAGthB,MAA8C,IAA1BshB,EAAO,GAAGxd,KAAKx2B,QACtE,MAAM,IAAImF,MAAM,sB,mKCxIpB,eAIA,UACA,UAEA,UAEA,UAMMmxD,EAAmC,CACvC1vD,KAAM,oBACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGrByf,EAAqC,CACzC3vD,KAAM,sBACNqiC,WAAY,CAAC,IAAK,OAClBgL,WAAY,CAAC,EAAAgB,YAAY6B,SAAU,EAAA7B,YAAY6B,WAG3C0f,EAAyB,CAC7B5vD,KAAM,UACNqiC,WAAY,CAAC,IAAK,MAAO,QACzBgL,WAAY,CAAC,EAAAgB,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,WAG1D,EAAAmG,QACT,CAACqB,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAEf,MAAMqN,EAAarN,EAAO,GAAGxd,KAAKt2B,QAC5BkhD,EAAO,EAAAzW,UAAUwf,cAAcjpB,EAAWkgB,KAAMC,EAAWrhD,QAC3Dy2D,EAAkB,EAAA9rB,UAAU+rB,gBAAgBrV,EAAYD,GACxDuV,EAAe,EAAAhsB,UAAUisB,kBAAkBvV,EAAYD,GAG7D,OADeyV,EAAevY,EAAkBtK,EAAQ9S,EAAYu1B,EAAiBE,EACxE,EAGN,EAAAzZ,uBACR99C,GAAwC,EAAAwhC,4BAA4B,CAACwgB,KAAMhiD,EAAK8hC,WAAWQ,OAAO,OAAQ,KAElG,EAAA0b,0BACRh+C,GAAwC,EAAAwhC,4BAA4B,CAACwgB,KAAMhiD,EAAK8hC,WAAWQ,OAAO,QAAS,KAQnG,EAAAyb,WACT,CAACmB,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAEf,MAAMqN,EAAarN,EAAO,GAAGxd,KAAKt2B,QAC5BkhD,EAAO,EAAAzW,UAAUwf,cAAcjpB,EAAWkgB,KAAMC,EAAWrhD,QAC3DyoC,EAAO4Y,EAAWrhD,OAElB82D,EAAuB1V,IAAS3Y,EAAO,EACvCsuB,EAAiC,GACvC,IAEIC,EAFA3O,EAAiB,GACjB4O,EAA6B,GAG7BH,IACFzO,EAAO12C,MAAM4pB,KAAK,CAACv7B,OAAQyoC,IAAO9H,KAAI,CAAC/hC,EAAGf,IAAMA,IAGhDwqD,EAAKjH,GAAQ3Y,EAAO,EACpB4f,EAAK5f,EAAO,GAAK2Y,EAEjBiH,EAAK1nB,KAAItiC,GAAK04D,EAAqB1vD,KAAKg6C,EAAWhjD,MAEnD24D,EAAqB,EAAAp2B,4BAA4B,CAACynB,SAClD4O,EAAmB,EAAAnpB,UAAUwQ,EAAkBtK,EAAQgjB,IAGzD,MAAMP,EAAkBK,EAAsB,EAAAnsB,UAAU+rB,gBAAgBK,EAAsBtuB,EAAO,GACvD,EAAAkC,UAAU+rB,gBAAgBrV,EAAY5Y,EAAO,GACrFkuB,EAAeG,EAAsB,EAAAnsB,UAAUisB,kBAAkBG,EAAsBtuB,EAAO,GACzD,EAAAkC,UAAUisB,kBAAkBvV,EAAY5Y,EAAO,GAEpFtT,EAAS0hC,EACXvY,EAAkBwY,EAAsBG,EAAmBjjB,EAAQ9S,EAAYu1B,EAAiBE,GAEpG,OAAIG,EACqB,EAAAhpB,UAAUwQ,EAAkBnpB,EAAQ6hC,GAGpD7hC,C,EAIf,MAAM0hC,EACF,CAACvY,EAAyCtK,EAAkB9S,EAA+Bu1B,EAC1FE,KACC,MAAMO,EACFC,EAA4B7Y,EAAkBtK,EAAO,GAAIyiB,EAAiBE,EAAc,CAACF,IACvFxoD,EAAMqwC,EAAiBvJ,IAAI,OAAD,wBACxBuhB,GAAgC,CAAEjiB,UAAWnT,EAAWX,SAAUhyB,IAAK,IAAM2oD,IACjFljB,GAEEojB,EAA0BC,EAC5B/Y,EAAkBtK,EAAO,GAAIyiB,EAAiBE,EAAcO,EAAsB/hC,OAAOqB,KACzF,CAACigC,IACC3X,EAAQR,EAAiBvJ,IAAI,OAAD,wBAC1BwhB,GAAkC,CAAEliB,UAAWnT,EAAWX,SAAUhyB,IAAK,IAAM6oD,IACnF,CAACpjB,EAAO,GAAI/lC,IAEVqpD,EAAqBC,EACvBjZ,EAAkBtK,EAAO,GAAIyiB,EAAiBE,EAAcO,EAAsB/hC,OAAOqB,KACzF4gC,EAAwBjiC,OAAOqB,MAInC,MAAO,CAHQ8nB,EAAiBvJ,IAAI,OAAD,wBAC3ByhB,GAAsB,CAAEniB,UAAWnT,EAAWX,SAAUhyB,IAAK,IAAM+oD,IACvE,CAACtjB,EAAO,GAAI/lC,EAAK6wC,IACN,EAMfqY,EACF,CAAC7Y,EAAyCppB,EAAeuhC,EAAyBE,EACjFtW,KACC,MAAOsM,EAAcC,GACjBtO,EAAiB3K,+BAA+Bze,EAAMsB,KAAM,EAAAye,YAAY6B,UACtErO,EAAO4X,EAAYrgD,OAEzB,GAAIy2D,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAIxxD,MAAM,8EAGlB,GAA2B,IAAvBk7C,EAAYrgD,OACd,MAAM,IAAImF,MAAM,4CAGlB,GAAIk7C,EAAY,KAAOoW,EACrB,MAAM,IAAItxD,MAAM,4DAGlB,MAAM2jC,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAC1DqY,EAAe,6BACDpI,sEAC4BkuB,6CAEhB7tB,EAAKC,yDAAyD4jB,eAC1FC,kCACe+J,iEAEmB7tB,EAAKC,0EACnC4jB,MAAiBC,0GAOzB,OAAO,OAAP,wBACK0J,GAAgC,CACnCnhC,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACvEjG,gBAAY,EAOdwmB,EACF,CAAC/Y,EAAyCppB,EAAeuhC,EAAyBE,EACjFa,EAA4CnX,KAC3C,MAAOsM,EAAcC,GACjBtO,EAAiB3K,+BAA+Bze,EAAMsB,KAAM,EAAAye,YAAY6B,UACtErO,EAAO4X,EAAYrgD,OAEzB,GAAIy2D,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAIxxD,MAAM,8EAGlB,GAA2B,IAAvBk7C,EAAYrgD,OACd,MAAM,IAAImF,MAAM,4CAGlB,GAAIk7C,EAAY,KAAOoW,EACrB,MAAM,IAAItxD,MAAM,4DAGlB,GAAuC,IAAnCqyD,EAAwBx3D,OAC1B,MAAM,IAAImF,MAAM,0DAGlB,GAAIqyD,EAAwB,KAAOf,EACjC,MAAM,IAAItxD,MAAM,0EAGlB,MACM0rC,EAAe,6BACDpI,sEAC4BkuB,sGAI7BA,oEAPN,EAAApvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SASlBuQ,0EACtC4jB,MAAiBC,kEAKzB,OAAO,OAAP,wBACK2J,GAAkC,CACrCphC,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACvEjG,gBAAY,EAId0mB,EACF,CAACjZ,EAAyCppB,EAAeuhC,EAAyBE,EACjFa,EAA4CC,KAC3C,MAAO9K,EAAcC,GACjBtO,EAAiB3K,+BAA+Bze,EAAMsB,KAAM,EAAAye,YAAY6B,UACtErO,EAAOvT,EAAMsB,KAAKx2B,OAExB,GAAIy2D,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAIxxD,MAAM,8EAGlB,GAAuC,IAAnCqyD,EAAwBx3D,QAAsD,IAAtCy3D,EAA2Bz3D,OACrE,MAAM,IAAImF,MAAM,0DAGlB,GAAIqyD,EAAwB,KAAOf,GAAmBgB,EAA2B,KAAOhB,EACtF,MAAM,IAAItxD,MAAM,0EAGlB,MAAM0rC,EAAe,6BACDpI,mKAGqBkkB,MAAiBC,mIAIxB+J,uTAYlC,OAAO,OAAP,wBACKH,GAAsB,CACzBrhC,OAAQ,CAACqB,KAAMtB,EAAMsB,KAAM9D,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACtEjG,gBAAY,EAId0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,6BAGlB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,qB,sHCpRpB,eAIA,UAEA,UAQMuyD,EAAuB,CAC3B9wD,KAAM,QACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGd,EAAAxlC,MACT,CAACgtC,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAEf,MAAMoN,EAAO,EAAAzW,UAAUwf,cAAcjpB,EAAWkgB,KAAMpN,EAAO,GAAGxd,KAAKx2B,QAC/D+oB,EAAQ4uC,EAAgBrZ,EAAkBtK,EAAQoN,EAAMlgB,GACxD/L,EAAmB,GACzB,IAAK,IAAIt3B,EAAI,EAAGA,EAAIkrB,IAASlrB,EAC3Bs3B,EAAO9tB,KAAKi3C,EAAiBvJ,IAAI,OAAD,wBAEvB2iB,GAAoB,CACvBrjB,UAAW,GAAGnT,EAAWX,YAAY1iC,IACrC0Q,IAAK,IAAMqpD,EAAuBtZ,EAAkBtK,EAAO,GAAI9S,EAAYkgB,EAAMvjD,KAEnFm2C,IAGN,OAAO7e,CAAM,EAGN,EAAAkoB,qBAAiEj+C,IAC5E,MAAMgiD,EAAOhiD,EAAK8hC,WAAWQ,OAAO,OAAQ,GACtCpwB,EAAQlS,EAAK8hC,WAAWY,QAAQ,QAAS,IACzC+1B,EAAaz4D,EAAK04D,QAAQ93D,OAChC,OAAO,EAAA4gC,4BAA4B,CAACwgB,OAAM9vC,QAAOumD,cAAY,EAG/D,MAAMF,EACF,CAACrZ,EAAyCtK,EAAkBoN,EAAclgB,KACxE,MAAO,CAAE2gB,GAAW,EAAAkW,UAAUC,WAAWhkB,EAAO,GAAGxd,KAAM4qB,EAAMlgB,EAAW5vB,MAAO4vB,EAAW22B,YAC5F,OAAOhW,EAAQ7hD,MAAM,EAGrB43D,EACF,CAACtZ,EAAyCppB,EAAegM,EAA6BkgB,EAAcpnC,KAE9F,MAAO4nC,EAAQC,GAAW,EAAAkW,UAAUC,WAAW9iC,EAAMsB,KAAM4qB,EAAMlgB,EAAW5vB,MAAO4vB,EAAW22B,YACxF99C,EAAS8nC,EAAQ7nC,GACjBqmC,EAAcuB,EAAO5nC,GAErB62B,EAAe,qCADRwP,EAAYrgD,+BAGjBohD,SAAYrnC,iDAIpB,OAAO,OAAP,wBACK29C,GAAoB,CACvBrjB,UAAW,GAAGnT,EAAWX,YAAYvmB,IACrCmb,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACvEjG,gBAAY,EAIlB0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,6BAGlB,GAAuB,SAAnB6uC,EAAO,GAAGthB,MAAsC,UAAnBshB,EAAO,GAAGthB,MAAuC,UAAnBshB,EAAO,GAAGthB,MAClD,WAAnBshB,EAAO,GAAGthB,MAAwC,UAAnBshB,EAAO,GAAGthB,MAAuC,WAAnBshB,EAAO,GAAGthB,MACpD,YAAnBshB,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,MAAyC,SAAnBshB,EAAO,GAAGthB,KAC5E,MAAM,IAAIvtB,MAAM,sB,uIC/EpB,gBAGa,EAAAo4C,QACT,CAACe,EAAyCtK,EAAkBif,KAC1D1U,EAAevK,GACf,MAAMqM,EAAc,EAAA1V,UAAUmC,aAAakH,EAAO,GAAGxd,KAAMy8B,GAE3D,MAAO,CADQ3U,EAAiB3H,gBAAgB3C,EAAO,GAAIqM,GAC5C,EAGR,EAAA5C,WAAa,CAACa,EAAyCtK,KAClEikB,EAAkBjkB,GACX,EAAAuJ,QAAQe,EAAkB,CAACtK,EAAO,IAAKriC,MAAM4pB,KAAKyY,EAAO,GAAG6b,eAGxD,EAAArS,uBAA4Dp+C,GACrEA,EAAK8hC,WAAWY,QAAQ,QAE5B,MAAMyc,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,6BAGlB,GAAuB,WAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,8B,EAId8yD,EAAqBjkB,IACzB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,8BAGlB,GAAuB,UAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,sB,6FCrCpB,gBAEA,UAEa,EAAAu4C,IAAM,CAACY,EAAyCtK,KAC3DuK,EAAevK,GAEf,MAAMkkB,EAAqB,CACzBtxD,KAAM,MACNqiC,WAAY+K,EAAOrT,KAAI,CAAC1hC,EAAGpB,IAAM,IAAIA,MACrCo2C,WAAY,IAAItiC,MAAMqiC,EAAOh0C,QAAQmhD,KAAK,EAAAlM,YAAY6B,WAKxD,MAAO,CAFQwH,EAAiBvJ,IAAI,OAAD,wBAC3BmjB,GAAkB,CAAE3pD,IAAK,IAAM4pD,EAAqB7Z,EAAkBtK,EAAQkkB,KAAsBlkB,GAC7F,EAGjB,MAAMmkB,EACF,CAAC7Z,EAAyCtK,EAAkBkkB,KAC1D,MAAMpvB,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAC1D6nB,EAAcrM,EAAO,GAAGxd,KAAKt2B,QAC7Bk4D,EAAUpkB,EAAOrT,KAAI,CAAC1hC,EAAGpB,IAAM,GAAGirC,EAAKC,cAAclrC,iBAAgBkd,KAAK,OAC1E81B,EAAe,gDAEHunB,eACdtvB,EAAK3T,kCAGT,OAAO,OAAP,wBACK+iC,GAAkB,CACrB/iC,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EhG,SAAS,EACTD,gBAAY,EAId0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,wBAGlB,MAAMnF,EAASg0C,EAAO,GAAGxd,KAAKx2B,OAC9B,IAAK,IAAInC,EAAI,EAAGA,EAAIm2C,EAAOh0C,OAAQnC,IAAK,CACtC,GAAImC,IAAWg0C,EAAOn2C,GAAG24B,KAAKx2B,OAC5B,MAAM,IAAImF,MAAM,gCAGlB,IAAK,IAAI1B,EAAI,EAAGA,EAAIzD,EAAQyD,IAC1B,GAAIuwC,EAAO,GAAGxd,KAAK/yB,KAAOuwC,EAAOn2C,GAAG24B,KAAK/yB,GACvC,MAAM,IAAI0B,MAAM,gC,CAKtB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,uBAElB,IAAK,IAAItH,EAAI,EAAGA,EAAIm2C,EAAOh0C,OAAQnC,IACjC,GAAIm2C,EAAO,GAAGthB,OAASshB,EAAOn2C,GAAG60B,KAC/B,MAAM,IAAIvtB,MAAM,+B,8FC7DtB,eAGA,UAEa,EAAA04C,KAAO,CAACS,EAAyCtK,KAC5DuK,EAAevK,GAEf,MAAMqkB,EAAsB,CAC1BzxD,KAAM,OACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAM3B,MAAO,CAHQwH,EAAiBvJ,IAAI,OAAD,wBAC3BsjB,GAAmB,CAAE9pD,IAAK,IAAM+pD,EAAsBha,EAAkBtK,EAAQqkB,KACpFrkB,GACW,EAGjB,MAAMskB,EACF,CAACp4B,EAAgC8T,EAAkBqkB,KACjD,MAAMhX,EAAarN,EAAO,GAAGxd,KAAKt2B,QAC5BmgD,EAAc,IAAI1uC,MAAM0vC,EAAWrhD,QAEnCu4D,EAAoB,GAC1B,IAAK,IAAI16D,EAAI,EAAGA,EAAIwjD,EAAWrhD,OAAQnC,IACrCwiD,EAAYxiD,GAAKwjD,EAAWxjD,GAAKm2C,EAAO,GAAG4B,WAAW/3C,GACtD06D,EAAQlxD,KAAK,YAAYxJ,gCAAgCA,QAAQwjD,EAAWxjD,UAG9E,MAAM4qC,EAAO4X,EAAYrgD,OACnB6wC,EAAe,uCACSpI,+BACbA,gBACb8vB,EAAQx9C,KAAK,qDAIjB,OAAO,OAAP,wBACKs9C,GAAmB,CACtBljC,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,gBAAY,EAId0N,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,0BAElB,GAA8B,IAA1B6uC,EAAO,GAAGxd,KAAKx2B,OACjB,MAAM,IAAImF,MAAM,4CAElB,GAAI6uC,EAAO,GAAGxd,KAAK,KAAOwd,EAAO,GAAGxd,KAAKx2B,OACvC,MAAM,IAAImF,MAAM,wBAElB,IAA8C,IAA1C,EAAAmlD,aAAarpD,QAAQ+yC,EAAO,GAAGthB,MACjC,MAAM,IAAIvtB,MAAM,uBAElB,GAAuB,UAAnB6uC,EAAO,GAAGthB,MAAuC,UAAnBshB,EAAO,GAAGthB,KAC1C,MAAM,IAAIvtB,MAAM,uB,8HC5DpB,eAIA,UAEA,UAMMqzD,EAA2B,CAC/B5xD,KAAM,YACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGd,EAAAhJ,UACT,CAACwQ,EAAyCtK,EAAkB9S,KAC1Dqd,EAAevK,GAQR,CAPQsK,EAAiBvJ,IAAI,OAAD,wBAE1ByjB,GAAwB,CAC3BnkB,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAMkqD,EAA2Bna,EAAkBtK,EAAO,GAAI9S,EAAWmnB,QAEhFrU,KAIG,EAAA8J,yBACR1+C,GAA0C,EAAAwhC,4BAA4B,CAACynB,KAAMjpD,EAAK8hC,WAAWY,QAAQ,OAAQ,MAElH,MAAM22B,EACF,CAACna,EAAyCppB,EAAemzB,KACvD,MAAMhH,EAAansB,EAAMsB,KACzB6xB,EAAOqQ,EAAgBrX,EAAYgH,GACnC,MAAMsQ,EAAsBC,EAAevX,EAAYgH,GACjD5f,EAAO4Y,EAAWrhD,OAIlB6wC,EAAe,WACnBgoB,EAAoB,OAAQxQ,EAAM5f,uCACRA,wBAClBA,iEAIV,OAAO,OAAP,wBACK+vB,GAAwB,CAC3BrjC,OAAQ,CAACqB,KAAMmiC,EAAqBjmC,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC/EjG,gBAAY,EAId6nB,EAAkB,CAACrX,EAA+BgH,KAClDA,GAAQA,EAAKroD,SAAWqhD,EAAWrhD,SACrCqoD,EAAO,IAAKhH,EAAWxiC,QAASsuB,WAE3Bkb,GAGHuQ,EAAiB,CAACvX,EAA+BgH,KACrDA,EAAOqQ,EAAgBrX,EAAYgH,GAC5B,EAAA1d,UAAUmuB,gBAAgBzX,EAAYgH,IAGzCwQ,EAAsB,CAACjyD,EAAcyhD,EAAgB5f,KACzD,MAAMswB,EAAc,GACpBA,EAAY1xD,KAAK,QAAQT,eAAkB6hC,eAAkBA,SAC7D,IAAK,IAAI5qC,EAAI,EAAGA,EAAI4qC,IAAQ5qC,EAC1Bk7D,EAAY1xD,KAAK,OAAOghD,EAAKxqD,WAAWA,OAG1C,OADAk7D,EAAY1xD,KAAK,OACV0xD,EAAYh+C,KAAK,KAAK,EAGzBwjC,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,+BAGlB,GAAuB,YAAnB6uC,EAAO,GAAGthB,MAAyC,YAAnBshB,EAAO,GAAGthB,KAC5C,MAAM,IAAIvtB,MAAM,+B,uGCrFpB,gBAEA,UAEa,EAAAmzC,cAAgB,CAACgG,EAAyCppB,KACrE,MAAMmrB,EAAcnrB,EAAMqD,MACpBuQ,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,SAI1DqY,EAAe,0oCA6CD/H,EAAKC,oCACnBD,EAAK3T,wCAEL6T,EAAc,CAClBpiC,KAAM,cACNqtC,WAAY,CAAC,EAAAgB,YAAY6B,UACzB7N,WAAY,CAAC,KACb9T,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMwC,EAAM8f,OAAOtiB,KAAMkhB,YAAa,EAAAqB,YAAY+jB,sBAC9EnoB,eACAC,SAAS,GAEX,OAAOwN,EAAiBxK,eAAe9K,EAAa,CAAC9T,EAAM8f,QAAQ,C,wiBClErE,eAGA,UACA,UACA,UAEA,UAEA,SAAgBikB,IACd,OAAOC,EAAiB,MAC1B,CACA,SAAgBC,IACd,OAAOD,EAAiB,OAC1B,CACA,SAAgBE,IACd,OAAOF,EAAiB,OAC1B,CACA,SAAgBG,IACd,OAAOH,EAAiB,OAC1B,CACA,SAAgBI,IACd,OAAOJ,EAAiB,OAC1B,CACA,SAAgBK,IACd,OAAOL,EAAiB,MAC1B,CACA,SAAgBM,EAAQ5O,GAYtB,MAAO,CAACld,KAVK,iCACekd,sLASdhkD,KAXD,MAWO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBua,IACd,OAAOP,EAAiB,MAC1B,CACA,SAAgBQ,IACd,OAAOR,EAAiB,QAC1B,CACA,SAAgBxP,EAAS92C,EAAa3E,GAapC,MAAO,CAACy/B,KAXK,+BACa96B,kCACA3E,wIASZrH,KAZD,OAYO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBya,IACd,MAAM/yD,EAAO,YASb,MAAO,CAAC8mC,KARK,aACL9mC,6CAGDA,uCAIOA,OAAM8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgB0a,EAAchP,GAC5B,MAAMhkD,EAAO,YAWb,MAAO,CAAC8mC,KAVK,iCACekd,kBAEpBhkD,mEAGDA,iCACSA,YAAeA,YAAeA,YAAeA,qBAG/CA,OAAM8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgB2a,IACd,OAAOX,EAAiB,MAC1B,CACA,SAAgBY,IAUd,MAAO,CAACpsB,KARK,iGAQC9mC,KATD,MASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgB6a,IAgBd,MAAO,CAACrsB,KAdK,wRAcC9mC,KAfD,MAeO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgB8a,IACd,OAAOd,EAAiB,MAC1B,CACA,SAAgB1P,IAUd,MAAO,CAAC9b,KARK,yHAQC9mC,KATD,OASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgBuK,IAUd,MAAO,CAAC/b,KARK,+IAQC9mC,KATD,UASO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAAgB+a,IACd,OAAOf,EAAiB,OAC1B,CACA,SAAgBgB,IACd,OAAOhB,EAAiB,MAC1B,CACA,SAAgBiB,IAcd,MAAO,CAACzsB,KAZK,yOAYC9mC,KAbD,OAaO8rB,KAAM,EAAAsb,aAAakR,WACzC,CACA,SAASga,EAAiBtyD,GASxB,MAAO,CAAC8mC,KARK,aACL9mC,6BACGA,sBAEJA,4BACIA,iBAGGA,OAAM8rB,KAAM,EAAAsb,aAAakR,WACzC,CA3KA,YAGA,aAGA,aAGA,aAGA,aAGA,YAGA,YAcA,YAGA,cAGA,aAeA,iBAYA,kBAcA,YAGA,YAYA,YAkBA,YAGA,aAYA,gBAYA,aAGA,YAGA,aAgCA,MAoBMkb,EACF,CAACl6B,EAAgChL,EAAe8qB,EAA6Bzf,KAEvE,MAAMqT,EAAc1T,EAAQf,QAAQ6F,KAAO,EAAAiQ,YAAYC,OAAS,EAAAD,YAAY6B,SACtEmK,EAAW,CAACr6C,KAAMo5C,EAASp5C,KAAMqtC,WAAY,CAACL,GAAc3K,WAAY,CAAC,KAAMoL,UAAW9T,GAChG,OAAO,OAAP,wBAAW0gB,GAAQ,CAAE1yC,IAAK,IAxBhC,EAAC2xB,EAAgC+gB,EAA2B/rB,EAAe8qB,KAErE,MAAMpM,EAAc1T,EAAQf,QAAQ6F,KAAO,EAAAiQ,YAAYC,OAAS,EAAAD,YAAY6B,SACtEhO,EAAO,EAAAvB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SACvD,OAAO,OAAP,wBACKyoB,GAAQ,CACX9rB,OAAQ,CAACqB,KAAMtB,EAAMsB,KAAM9D,KAAMwC,EAAMxC,KAAMkhB,eAC7C/C,aAAc,UACnBmP,EAAStS,6CAEE5E,EAAKC,wCACViX,EAASp5C,qBACbkiC,EAAK3T,6BAGF2b,SAAS,GAAI,EASiBupB,CAA6Bn6B,EAAS+gB,EAAU/rB,EAAO8qB,IAAS,EAG7F,EAAAvuC,IAAM,CAACyuB,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIilB,KAAYjlB,IAEnF,EAAA2E,KAAO,CAACzY,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAImlB,KAAanlB,IAEpF,EAAA6E,KAAO,CAAC3Y,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIolB,KAAaplB,IAEpF,EAAA8E,KAAO,CAAC5Y,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIqlB,KAAarlB,IAOpF,EAAAoF,KACT,CAAClZ,EAAgC8T,EAAkB9S,IAAyC,CAAChB,EAAQ6U,IACjGqlB,EACIl6B,EAAS8T,EAAO,GAAI0V,EAASxoB,EAAWtuB,IAAKsuB,EAAWjzB,KAAMizB,EAAWX,UAC7EyT,IAEK,EAAAqF,oBAAuBj6C,GAAqC,EAAAwhC,4BACrE,CAAChuB,IAAKxT,EAAK8hC,WAAWO,SAAS,MAAO,EAAAqoB,UAAW77C,IAAK7O,EAAK8hC,WAAWO,SAAS,MAAO,EAAAsoB,YAE7E,EAAAzQ,QAAU,CAACpZ,EAAgC8T,KACtD,MAAM9S,EAAao5B,EAAiCp6B,EAAS8T,GAC7D,OAAO,EAAAoF,KAAKlZ,EAAS,CAAC8T,EAAO,IAAK9S,EAAW,EAG/C,MAAMo5B,EAAmC,CAACp6B,EAAgC8T,KACxE,GAAIA,EAAOh0C,QAAU,KACfkgC,EAAQf,QAAQ6Y,cAAchE,EAAO,GAAGqB,UAAYnV,EAAQf,QAAQ6Y,cAAchE,EAAO,GAAGqB,SAChG,MAAM,IAAIlwC,MAAM,2CAGlB,MAAMyN,EAAOohC,EAAOh0C,QAAU,EAAKg0C,EAAO,GAAG4B,WAAW,GAAK,EAAAkU,SACvD77C,EAAO+lC,EAAOh0C,QAAU,EAAKg0C,EAAO,GAAG4B,WAAW,GAAK,EAAAmU,SAC7D,OAAO,EAAAnpB,4BAA4B,CAAChuB,MAAK3E,OAAK,EAGnC,EAAAsM,KAAO,CAAC2lB,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIslB,KAAatlB,IAEpF,EAAA6F,IAAM,CAAC3Z,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIulB,KAAYvlB,IAMnF,EAAAkG,IACT,CAACha,EAAgC8T,EAAkB9S,IAAwC,CAAChB,EAAQ6U,IAChGqlB,EAAmCl6B,EAAS8T,EAAO,GAAIwlB,EAAQt4B,EAAW0pB,OAAQ1pB,EAAWX,UAC7FyT,IAEK,EAAAmG,mBAAsB/6C,GAC/B,EAAAwhC,4BAA4B,CAACgqB,MAAOxrD,EAAK8hC,WAAWO,SAAS,QAAS,KAE7D,EAAA2Y,IAAM,CAACla,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIylB,KAAYzlB,IAEnF,EAAAxiC,MAAQ,CAAC0uB,EAAgC8T,IACtC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAI0lB,KAAc1lB,IAErF,EAAA8F,SAAW,CAAC5Z,EAAgC8T,IACzC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAI2lB,KAAiB3lB,IAMxF,EAAAoH,UACT,CAAClb,EAAgC8T,EAAkB9S,IAA8C,CAAChB,EAAQ6U,IACtGqlB,EAAmCl6B,EAAS8T,EAAO,GAAI4lB,EAAc14B,EAAW0pB,OAAQ1pB,EAAWX,UACnGyT,IAEK,EAAAqH,yBAA4Bj8C,GACrC,EAAAwhC,4BAA4B,CAACgqB,MAAOxrD,EAAK8hC,WAAWO,SAAS,QAAS,OAE7D,EAAA1/B,IAAM,CAACm+B,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAI6lB,KAAY7lB,IAEnF,EAAAxpB,IAAM,CAAC0V,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAI8lB,KAAY9lB,IAEnF,EAAA9lB,IAAM,CAACgS,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAI+lB,KAAY/lB,IAEnF,EAAAwI,KAAO,CAACtc,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIwV,KAAaxV,IAEpF,EAAA6I,QAAU,CAAC3c,EAAgC8T,IACxC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIyV,KAAgBzV,IAEvF,EAAA8I,IAAM,CAAC5c,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIgmB,KAAYhmB,IAEnF,EAAAsJ,KAAO,CAACpd,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIimB,KAAajmB,IAEpF,EAAA2J,IAAM,CAACzd,EAAgC8T,IACpC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAIkmB,KAAYlmB,IAEnF,EAAA4J,KAAO,CAAC1d,EAAgC8T,IACrC,CAAC9T,EAAQ6U,IAAIqlB,EAAmCl6B,EAAS8T,EAAO,GAAImmB,KAAanmB,G,gJC/TjG,gBAEA,UACA,UAEA,UAEMumB,EAAwB,CAC5B3zD,KAAM,SACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAYC,SAGd,EAAAslB,wBAA0B,CAACt6B,EAAgChL,KACtE,MAAMuT,EAAOvT,EAAMsB,KAAKx2B,OAElBy1C,EAAW,EAAA+L,YAAY,KAAM/Y,GAC7BgyB,EAAYhlB,EAASv1C,OAAO,GAC5B+sD,EAAiB,EAAA7iB,kBAAkB3B,GACnCiZ,EAAgB,EAAAC,oBAEhB+Y,EADkC,IAAtBxlC,EAAMsB,KAAKx2B,OACG,GA0BlC,SAAyByoC,EAAcjS,GACrC,GAAa,IAATiS,EACF,MAAO,KAGT,IAAID,EAAS,GACb,IAAK,IAAI3qC,EAAI,EAAGA,EAAI4qC,EAAM5qC,IACxB2qC,GAAUhS,EAAK34B,GACXA,EAAI4qC,EAAO,IACbD,GAAU,KAGd,OAAOA,CACT,CAvCuCmyB,CAAgBlyB,EAAMgN,GACrDjN,EAASC,GAAQ,EAAI,KAAO,QAAQgyB,EAAU1/C,KAAK,QAEnD81B,EAAe,SACjB6Q,+BAEEuL,4IAGyByN,iBAPlB,EAAAnzB,QAAQrH,EAAQf,QAAQ+E,QAAQe,UAAUzM,SAS3CrD,yCAAyCqT,6BAIrD,OAAO,OAAP,wBACK+xB,GAAqB,CACxBzpB,SAAS,EACT3b,OAAQ,CAACqB,KAAMtB,EAAMsB,KAAM9D,KAAMwC,EAAMxC,KAAMkhB,YAAa,EAAAqB,YAAY6B,UACtEjG,gBAAY,EAIH,EAAA2H,8BAAgC,CAACtY,EAAgChL,IACzE,OAAD,wBAAKqlC,GAAqB,CAAEhsD,IAAK,IAAM,EAAAisD,wBAAwBt6B,EAAShL,I,4IC3C5E,gBAGa,EAAAgpB,UACT,CAACI,EAAyCtK,EAAkBif,KAC1D1U,EAAevK,GACf,MAAMqM,EAAc,EAAA1V,UAAUiwB,eAAe5mB,EAAO,GAAGxd,KAAMy8B,GAE7D,MAAO,CADQ3U,EAAiB3H,gBAAgB3C,EAAO,GAAIqM,GAC5C,EAGR,EAAAjC,aAAe,CAACE,EAAyCtK,KACpEikB,EAAkBjkB,GACX,EAAAkK,UAAUI,EAAkB,CAACtK,EAAO,IAAKriC,MAAM4pB,KAAKyY,EAAO,GAAG6b,eAG1D,EAAA1R,yBAA8D/+C,GACvEA,EAAK8hC,WAAWY,QAAQ,QAE5B,MAAMyc,EAAkBvK,IACtB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,+BAGlB,GAAuB,WAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,8B,EAId8yD,EAAqBjkB,IACzB,IAAKA,GAA4B,IAAlBA,EAAOh0C,OACpB,MAAM,IAAImF,MAAM,gCAGlB,GAAuB,UAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,sB,wNCtCpB,eAIA,UAEA,UAoBM01D,EAA0B,CAC9Bj0D,KAAM,WACNqiC,WAAY,CAAC,KACbgL,WAAY,CAAC,EAAAgB,YAAY6B,WAGd,EAAAiH,SACT,CAACO,EAAyCtK,EAAkB9S,KAC1D,EAAAqd,eAAevK,EAAQ9S,GAQhB,CAPQod,EAAiBvJ,IAAI,OAAD,wBAE1B8lB,GAAuB,CAC1BxmB,UAAWnT,EAAWX,SACtBhyB,IAAK,IAAMusD,EAA0Bxc,EAAkBtK,EAAQ9S,KAEjE8S,KAIG,EAAAgK,0BACR5+C,GAAyC,EAAAm1D,wBAAwBn1D,EAAM,GAE/D,EAAA6+C,0BACR7+C,GAAyC,EAAAm1D,wBAAwBn1D,EAAM,GAE/D,EAAAm1D,wBAA0B,CAACn1D,EAAkB27D,KACxD,MAAMvF,EAAYuF,GAAS,GAGrB9S,EAAO7oD,EAAK8hC,WAAWS,UAAU,OAAQ,WAC/C,GAAa,YAATsmB,GAA+B,WAATA,IAAsB8S,EAAQ,IAAe,UAAT9S,GAC5D,MAAM,IAAI9iD,MAAM,sBAAsB8iD,KAGxC,IAAIuM,EAAmB,GACnBuG,EAAQ,IACVvG,EAASp1D,EAAK8hC,WAAWW,UAAU,UACnC,EAAA+zB,iBAAiBpB,EAAQvM,EAAMuN,IAGjC,MAAMwF,EAAqB57D,EAAK8hC,WAAWO,SAAS,sBAAuB,GAErEkzB,EACFoG,EAAQ,GAAK37D,EAAK8hC,WAAWS,UAAU,iCAAkC,cAAgB,aAC7F,IAE4C,IAFxC,CACE,aAAc,qBAAsB,uBAAwB,gBAAiB,qBAAsB,cACnG1gC,QAAQ0zD,GACZ,MAAM,IAAIxvD,MAAM,8BAA8BwvD,uBAEhD,MAAMsG,EAA4C,uBAA5BtG,EAChBuG,EAAmBD,EAEnBE,EACQ,YAATlT,GAAsB8S,GAAS,GAAM37D,EAAK8hC,WAAWS,UAAU,eAAgB,sBAAwB,GAC5G,IAA+F,IAA3F,CAAC,qBAAsB,oBAAqB,QAAS,OAAQ,IAAI1gC,QAAQk6D,GAC3E,MAAM,IAAIh2D,MAAM,iBAAiBg2D,uBAGnC,MAAMC,EAAoBh8D,EAAK8hC,WAAWO,SAAS,iBAAkB,KAC/D45B,EAAkE,IAAjDj8D,EAAK8hC,WAAWQ,OAAO,kBAAmB,GACjE,GAAI25B,GAA2B,UAATpT,EACpB,MAAM,IAAI9iD,MAAM,4DAGlB,MAAMm2D,EACDP,EAAQ,IAAuB,YAAT9S,GAAkD,eAA5B0M,GAA4D,UAAhBwG,EAE7F,IAAII,EAAc,EACdlG,EAAiB,EACjBC,EAAgB,EAUpB,OARIyF,EAAQ,IACVQ,EAAc,EACdlG,EAAiB,EACjBC,EAAgB,GACG,IAAVyF,IACT1F,EAAiB,GAGZ,EAAAz0B,4BAA4B,CACjCm6B,QACAvF,WACAvN,OACAuM,SACAwG,qBACArG,0BACAuG,mBACAD,eACAE,cACAC,oBACAC,iBACAC,2BACAC,cACAlG,iBACAC,iBACA,EAGJ,MAAMwF,EACF,CAACxc,EAAyCtK,EAAkB9S,KAC1D,MAAM4H,EAAO,EAAAvB,QAAQ+W,EAAiBnf,QAAQ+E,QAAQe,UAAUzM,UACzDu8B,EAAYD,GACfxW,EAAiB3K,+BAA+BK,EAAO,GAAGxd,KAAM,EAAAye,YAAY6B,UAE1EuJ,EAAcrM,EAAO,GAAGxd,KAAKmK,KAAI,CAAChJ,EAAK95B,IAAMmQ,KAAKwD,MAAMmmB,EAAMuJ,EAAWszB,OAAO32D,OAC/Eg3D,EAAaD,GAChBtW,EAAiB3K,+BAA+B0M,EAAa,EAAApL,YAAY6B,UACvEnf,EAAM0oB,EAAYrgD,OAElBw7D,EAAgB,IAAI7pD,MAAcgmB,GAClC8jC,EAAe,IAAI9pD,MAAcgmB,GACvC,IAAI+jC,EAAuB,8BACN/jC,gCACDA,cAEpB,IAAK,IAAIp5B,EAAIo5B,EAAM,EAAGp5B,GAAK,EAAGA,IAC5Bi9D,EAAcj9D,GAAMA,IAAMo5B,EAAM,EAAK,EAAI6jC,EAAcj9D,EAAI,GAAK8hD,EAAY9hD,EAAI,GAChFk9D,EAAal9D,GAAMA,IAAMo5B,EAAM,EAAK,EAAI8jC,EAAal9D,EAAI,GAAKy1C,EAAO,GAAGxd,KAAKj4B,EAAI,GAEjFm9D,GAAwB,4BACPn9D,QAAQi9D,EAAcj9D,8BACvBA,QAAQk9D,EAAal9D,gBAGvC,MAAMo9D,EAAwB,yFAEU5G,MAAeD,8CACrBhsB,EAAKC,iEAKjC8H,EAAmC,YAApB3P,EAAW+mB,KAE5B,SACJ0T,oCAC0BhkC,yFAEqBk9B,MAAgBD,gBAE7D8G,uDAGwB/jC,+YAed,IAARA,EAEI,SACRgkC,0HAG+C9G,MAAgBD,gBAE7D8G,kkCA2B4B1nB,EAAO,GAAGxd,KAAK,gtBAuBrC,SACRmlC,0HAG+C9G,MAAgBD,gBAE7D8G,uvBAoB4B1nB,EAAO,GAAGxd,KAAK,gtBAsB7C,OAAO,OAAP,wBACKqkC,GAAuB,CAC1B1lC,OAAQ,CAACqB,KAAM6pB,EAAa3tB,KAAMshB,EAAO,GAAGthB,KAAMkhB,YAAa,EAAAqB,YAAY6B,UAC3EjG,eACAM,UAAW,CAAC,CACVvqC,KAAM,SACN8rB,KAAM,MACNof,YAAa5Q,EAAWszB,OAAOx0D,OAC/B6J,KAAMq3B,EAAWszB,OAAO7zB,KAAIpgC,GAAKyN,KAAKuM,KAAKha,QAC3C,EAIG,EAAAg+C,eAAiB,CAACvK,EAAkB5e,KAC/C,IAAK4e,GAAW5e,EAAU2lC,MAAQ,GAAuB,IAAlB/mB,EAAOh0C,QACzCo1B,EAAU2lC,OAAS,GAAK3lC,EAAU2lC,MAAQ,IAAwB,IAAlB/mB,EAAOh0C,QACvDo1B,EAAU2lC,OAAS,IAAwB,IAAlB/mB,EAAOh0C,QAAkC,IAAlBg0C,EAAOh0C,OAC1D,MAAM,IAAImF,MAAM,mBAGlB,GAAIiwB,EAAUo/B,OAAOx0D,OAAS,GAAKg0C,EAAO,GAAGxd,KAAKx2B,SAAWo1B,EAAUo/B,OAAOx0D,OAC5E,MAAM,IAAImF,MAAM,wBAGlB,GAAuB,WAAnB6uC,EAAO,GAAGthB,KACZ,MAAM,IAAIvtB,MAAM,8B,EAIP,EAAAywD,iBAAmB,CAACpB,EAAkBvM,EAAcuN,KAC/D,GAAKA,GAOH,IAAK,MAAM1W,KAAS0V,EAClB,GAAI1V,GAAS,EACX,MAAM,IAAI35C,MAAM,8CARpB,IAAK,MAAM25C,KAAS0V,EAClB,GAAI1V,EAAQ,EACV,MAAM,IAAI35C,MAAM,qDAUtB,KAAa,WAAT8iD,GAA8B,UAATA,GACD,IAAlBuM,EAAOx0D,QAAmC,IAAlBw0D,EAAOx0D,QAA8B,IAAdw0D,EAAO,IAA0B,IAAdA,EAAO,IAC3E,MAAM,IAAIrvD,MAAM,+KAELqwD,EAAW,SAAW,uB,wGCjVvC,gBAEA,UAEA,UACA,UAcA,uBAKE3gC,YACW+mC,EAAqC32B,EACrC42B,GADA,KAAAD,WAAqC,KAAA32B,YACrC,KAAA42B,wBACTl1D,KAAKm1D,KAAO,IAAI16B,IAChBz6B,KAAKo1D,iBAAkB,CACzB,CACAtnB,YAAYxe,GACV,OAAOtvB,KAAKm1D,KAAKvtD,IAAI0nB,EACvB,CACA4e,YAAY5e,EAAcse,GACxB5tC,KAAKm1D,KAAKlqD,IAAIqkB,EAAKse,EACrB,CACAQ,IAAIinB,EAAyBhoB,EAAuB7e,G,MAClDxuB,KAAKi1D,SAASK,MAAM,KAAM,sBAAoD,QAA9B,EAAAD,EAAchzB,YAAYpiC,YAAI,QAAI,oBAAoB,K,MACpG,MAAMs1D,EAAKv1D,KAAKs+B,UAAUi3B,GACpBnoB,EAAUioB,EAAcjoB,QAC9BmoB,EAAGC,WAAWpoB,GACd,IACEptC,KAAKy1D,WAAWjnC,GACXxuB,KAAKo1D,iBACRp1D,KAAK01D,eAAeL,EAAcM,iBAEpC31D,KAAK41D,aAAaP,EAAcQ,iBAAqD,QAAnC,EAAAR,EAAchzB,YAAYmI,iBAAS,QAAI,GAAI6C,E,CAC7F,MAAO75B,GAEP,MADA,EAAAgrB,OAAOxkC,MAAM,iBAAkBq7D,EAAchzB,YAAY6H,cACnD12B,C,CAERxT,KAAKi1D,SAASK,MAAM,UAAW,oBAAoB,KACjDt1D,KAAKs+B,UAAUw3B,MAAM,GACrB,GACD91D,KAAKs+B,UACV,CACAZ,UACM19B,KAAK+1D,cACP/1D,KAAKs+B,UAAU03B,aAAah2D,KAAK+1D,cAEnC/1D,KAAKm1D,KAAKpyD,SAAQjM,GAAKkJ,KAAKs+B,UAAU23B,cAAcn/D,EAAEs2C,UACxD,CACAjb,MAAMkQ,EAA0BI,EAAsC7C,GACpE,OAAO5/B,KAAKi1D,SAASK,MAAM,UAAW,wBAAwB,KAC5D,MAAMY,EAAe,IAAI,EAAAC,iBAAiBn2D,KAAKs+B,UAAW+D,EAAaI,EAAqB7C,GACtFw2B,EAAaF,EAAajsB,aAC1BmD,EAAUptC,KAAKq2D,QAAQD,GAQ7B,MAPiB,CACf/zB,cACA+K,UACAyoB,iBAAkB71D,KAAKs2D,oBACnBlpB,EAAS8oB,EAAat3B,QAAQyD,YAAYC,WAAY4zB,EAAat3B,QAAQyD,YAAYmI,WAC3FmrB,gBAAiB31D,KAAKu2D,mBAAmBnpB,GAE5B,GAEnB,CACUipB,QAAQG,GAChB,IAAKx2D,KAAK+1D,aAAc,CACtB,EAAAv3B,OAAOE,QAAQ,kBAAmB,0DAClC,MAAM+3B,EAAqB,EAAAC,sBAAsB12D,KAAKs+B,UAAUzM,SAChE7xB,KAAK+1D,aAAe/1D,KAAKs+B,UAAUq4B,cAAcF,EAAoBz2D,KAAKs+B,UAAUi3B,GAAGqB,c,CAErF,EAAA/9B,IAAIg+B,OACN,EAAAr4B,OAAOE,QAAQ,kBAAmB,gBACtC83B,OAGE,MAAMM,EAAa92D,KAAKs+B,UAAUq4B,cAAcH,EAAkBx2D,KAAKs+B,UAAUi3B,GAAGwB,iBAC9E3pB,EAAUptC,KAAKs+B,UAAU04B,cAAch3D,KAAK+1D,aAAce,GAEhE,OADA92D,KAAKs+B,UAAU03B,aAAac,GACrB1pB,CACT,CACAqoB,WAAWjnB,GACT,MAAMrO,EAAQqO,EAAGrO,MACXC,EAASoO,EAAGpO,OAClB,EAAA5B,OAAOE,QACH,kBACA,8CAA8CyB,KAASC,YAAiBoO,EAAG5c,eAAe4c,EAAGH,OAAOtiB,QACxG/rB,KAAKs+B,UAAU24B,kBAAkBzoB,EAAGf,QAAStN,EAAOC,EACtD,CACAs1B,eAAeC,GACb,MAAMuB,EAAiBvB,EAAgBn6C,SACjC27C,EAAqBxB,EAAgByB,aAC3Cp3D,KAAKs+B,UAAU+4B,oBAAoBH,EAAgBC,GACnDn3D,KAAKo1D,iBAAkB,CACzB,CACAQ,aAAaC,EAA6CrrB,EAA8B8sB,G,MAEtF,MAAM/B,EAAKv1D,KAAKs+B,UAAUi3B,GAC1B,IAAIgC,EAAkB,EACtB,IAAK,MAAM,KAACt3D,EAAI,KAAE8rB,EAAI,SAAE3xB,EAAQ,YAAE+wC,KAAgB0qB,EAAkB,CAClE,MAAM55C,EAA4C,QAApC,EAAAuuB,EAAUgtB,MAAKl/D,GAAKA,EAAE2H,OAASA,WAAK,eAAEiD,KACpD,GAAa,cAAT6oB,IAAyB9P,EAC3B,MAAM,IAAIzd,MAAM,aAAayB,iDAE/B,OAAQ8rB,GACN,IAAK,YACH/rB,KAAKy3D,YAAYH,EAASC,GAAkBn9D,EAAUm9D,GACtDA,IACA,MACF,IAAK,QACCpsB,EACFoqB,EAAGmC,WAAWt9D,EAAU6hB,GAExBs5C,EAAGoC,UAAUv9D,EAAU6hB,GAEzB,MACF,IAAK,MACCkvB,EACFoqB,EAAGqC,WAAWx9D,EAAU6hB,GAExBs5C,EAAGsC,UAAUz9D,EAAU6hB,GAEzB,MACF,QACE,MAAM,IAAIzd,MAAM,4BAA4ButB,K,CAGpD,CACA0rC,YAAYjpB,EAAiBspB,EAAqCt8C,GAChExb,KAAKs+B,UAAUy5B,qBAAqBvpB,EAAGf,QAASjyB,EAAUs8C,EAC5D,CACAvB,mBAAmBnpB,GACjB,MAAO,CACL5xB,SAAUxb,KAAKg4D,kBAAkB5qB,EAAS,YAC1CgqB,aAAcp3D,KAAKg4D,kBAAkB5qB,EAAS,gBAElD,CACAkpB,oBAAoBlpB,EAAuBpC,EAAqBR,GAE9D,MAAMqrB,EAA8C,GACpD,GAAI7qB,EACF,IAAK,MAAME,KAAWF,EACpB6qB,EAAiBn1D,KAAK,CAACT,KAAMirC,EAASnf,KAAM,YAAa3xB,SAAU4F,KAAKi4D,mBAAmB7qB,EAASlC,KAGxG,GAAIV,EACF,IAAK,MAAMrB,KAAYqB,EACrBqrB,EAAiBn1D,KAAK,OAAD,wBAAKyoC,GAAQ,CAAE/uC,SAAU4F,KAAKi4D,mBAAmB7qB,EAASjE,EAASlpC,SAG5F,OAAO41D,CACT,CACAoC,mBAAmB7qB,EAAuBntC,GACxC,MACMi4D,EADKl4D,KAAKs+B,UAAUi3B,GACL0C,mBAAmB7qB,EAASntC,GACjD,GAAkB,OAAdi4D,EACF,MAAM,IAAI15D,MAAM,WAAWyB,gBAE7B,OAAOi4D,CACT,CACAF,kBAAkB5qB,EAAuBntC,GAGvC,OAFWD,KAAKs+B,UAAUi3B,GACWyC,kBAAkB5qB,EAASntC,EAElE,E,4GC9KF,gBAEA,UAKA,UACA,UACA,UACA,UACA,UAGA,4BAWEiuB,YAA4BqP,EAAuCqB,GAAvC,KAAArB,UAAuC,KAAAqB,UACjE5+B,KAAKktC,eAAiB,IAAI,EAAAirB,sBAAsB56B,EAAQe,UAAU85B,gBAClEp4D,KAAK6tC,eAAiB,IAAI,EAAAwqB,eAAer4D,KAAK4+B,QAAQq2B,SAAU13B,EAAQe,UAAWt+B,KAAKktC,gBACxFltC,KAAK6vC,eAAiB,IAAI,EAAAyoB,eACtB/6B,EAAQe,UAAWt+B,KAAKktC,eAAgBltC,KAAK4+B,QAAQq2B,SACrD,CAACsD,cAA4C,SAA7Bh7B,EAAQa,mBAC5Bp+B,KAAK8sC,uBAAyB,IAAIrS,IAClCz6B,KAAK+sC,yBAA2B,IAAItS,IACpCz6B,KAAKq+B,KAAOd,EAAQc,KACpBr+B,KAAKw4D,eAAiB,IAAI/9B,IAC1Bz6B,KAAKy4D,eAAiB,IAAIh+B,GAC5B,CAEAi+B,yBACE,OAAO,IAAI,EAAAC,sBAAsB34D,KACnC,CACA44D,mBAAmBzpC,GACjB,MAAM0pC,EAAe1pC,EAAM2pC,YAAY9vB,QAAO1wC,IAAiB,IAAZA,EAAEs8B,MAAet8B,EAAE+1C,SAAQrU,KAAI1hC,GAAKA,EAAE+1C,OAAQK,SACjG1uC,KAAK64D,aAAe,IAAIpxB,IAAIoxB,EAC9B,CACAxnB,cAAcN,GACZ,QAAO/wC,KAAK64D,cAAe74D,KAAK64D,aAAa9wB,IAAIgJ,EACnD,CACAgoB,eAAehoB,GACb/wC,KAAK64D,aAAan0C,IAAIqsB,EACxB,CACAtC,eAAesC,EAAqBlR,GAClC,OAAIA,EACK7/B,KAAK8sC,uBAAuBllC,IAAImpC,GAEhC/wC,KAAK+sC,yBAAyBnlC,IAAImpC,EAE7C,CACAK,eAAeL,EAAqBC,EAA0BnR,GAAW,GACvE,EAAArB,OAAOE,QAAQ,sBAAuB,iCAClCmB,EACF7/B,KAAK8sC,uBAAuB7hC,IAAI8lC,EAAUC,GAE1ChxC,KAAK+sC,yBAAyB9hC,IAAI8lC,EAAUC,EAEhD,CACAtT,UACE19B,KAAK6tC,eAAenQ,UACpB19B,KAAK6vC,eAAe0B,sBACpBvxC,KAAK8sC,uBAAuB/pC,SAAQyrC,GAAMxuC,KAAK6vC,eAAe2B,eAAehD,GAAI,KACjFxuC,KAAK8sC,uBAAyB,IAAIrS,IAClCz6B,KAAK+sC,yBAAyBhqC,SAAQyrC,GAAMxuC,KAAK6vC,eAAe2B,eAAehD,GAAI,KACnFxuC,KAAK+sC,yBAA2B,IAAItS,GACtC,CACAltB,QAAQ9U,EAAkBugE,EAA0B7pC,GAClD,MAAM8pC,EAAK,EAAAC,gBAAgBzgE,EAAMugE,EAAQ,EAAAlnB,wBACzC,MAAO,CAACqnB,KAAMF,EAAGG,OAAQx6B,QAASq6B,EAAGI,OAASJ,EAAGI,OAAO5gE,EAAM02B,GAAS12B,EACzE,E,wJC/EF,gBAqCA,8BAKEy1B,YAAYqnC,EAA4BzmB,EAAW,GACjD,GAAiB,IAAbA,EACF9uC,KAAKs5D,eAAiB/D,EAAGgE,KACzBv5D,KAAKw5D,OAASjE,EAAGkE,IACjBz5D,KAAKitC,YAAcsoB,EAAG/5B,MACtBx7B,KAAK4lD,YAAc9W,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAItwC,MAAM,+BAA+BswC,KAL/C9uC,KAAKs5D,eAAiB/D,EAAGmE,QACzB15D,KAAKw5D,OAASjE,EAAGoE,KACjB35D,KAAKitC,YAAcsoB,EAAG/5B,MACtBx7B,KAAK4lD,YAAc9W,C,CAIvB,CACA/6B,OAAO7d,EAA4B0jE,GACjC,IAAI/4C,EACAygB,EAcJ,OAbIprC,EAAIg4B,cAAgBpwB,eACtB,EAAA0gC,OAAOG,QAAQ,UAAW,2DAC1B2C,EAAS,IAAIxjC,aAAa5H,IAExB0jE,EAAc55D,KAAK4lD,YAAc1vD,EAAImD,QACvC,EAAAmlC,OAAOG,QAAQ,UAAW,kDAC1B2C,EAASprC,EACT2qB,EAAS7gB,KAAKwa,SAASo/C,EAAc55D,KAAK4lD,aAC1CtkB,EAAOv+B,SAAQ,CAACzK,EAAGpB,IAAM2pB,EAAO3pB,GAAKoB,MAErCgpC,EAASprC,EACT2qB,EAASygB,GAEJzgB,CACT,CACArG,SAASpC,GACP,OAAO,IAAIta,aAAoB,EAAPsa,EAC1B,CACA3b,OAAOnG,EAA+BujE,GACpC,OAAyB,IAArB75D,KAAK4lD,YACetvD,EAAwB0yC,QAAO,CAAC/sB,EAAO5I,IAAUA,EAAQ,GAAM,IAAG1W,SAAS,EAAGk9D,GAG/FvjE,EAAOqG,SAAS,EAAGk9D,EAC5B,GAKF,6BAKE3rC,YAAYqnC,EAA2BzmB,EAAW,EAAG7B,GACnD,GAAiB,IAAb6B,GAA+B,IAAbA,EACpB,MAAM,IAAItwC,MAAM,+BAA+BswC,KAEjD9uC,KAAKs5D,eAAiB/D,EAAGoE,KACzB35D,KAAKw5D,OAASjE,EAAGoE,KACjB35D,KAAK4lD,YAAc9W,EACnB9uC,KAAKitC,YAAcA,GAAesoB,EAAG/5B,KACvC,CACAznB,OAAO7d,EAAmB0jE,GACxB,IAAIE,EAAO5jE,EAMX,OALyB,IAArB8J,KAAK4lD,cACP,EAAApnB,OAAOE,QAAQ,UAAW,iCAC1Bo7B,EAAO95D,KAAKwa,SAASo/C,GACrB1jE,EAAI6M,SAAQ,CAACzK,EAAGpB,IAAM4iE,EAAS,EAAJ5iE,GAASoB,KAE/BwhE,CACT,CACAt/C,SAASpC,GACP,OAAO,IAAIta,aAAoB,EAAPsa,EAC1B,CACA3b,OAAOnG,EAA+BujE,GACpC,OAAyB,IAArB75D,KAAK4lD,YACetvD,EAAwB0yC,QAAO,CAAC/sB,EAAO5I,IAAUA,EAAQ,GAAM,IAAG1W,SAAS,EAAGk9D,GAG/FvjE,EAAOqG,SAAS,EAAGk9D,EAC5B,GAGF,yBAKE3rC,YAAYqnC,EAA2BzmB,EAAW,GAChD,GAFF,KAAA8W,YAAc,EAEK,IAAb9W,EACF9uC,KAAKs5D,eAAiB/D,EAAGwE,MACzB/5D,KAAKw5D,OAASjE,EAAGwE,MACjB/5D,KAAKitC,YAAcsoB,EAAGyE,cACtBh6D,KAAK4lD,YAAc9W,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAItwC,MAAM,+BAA+BswC,KAL/C9uC,KAAKs5D,eAAiB/D,EAAGoE,KACzB35D,KAAKw5D,OAASjE,EAAGoE,KACjB35D,KAAKitC,YAAcsoB,EAAGyE,cACtBh6D,KAAK4lD,YAAc9W,C,CAIvB,CACA/6B,OAAO7d,EAAiB+jE,GACtB,OAAO,IAAI/gE,WAAWhD,EAAII,OAAQJ,EAAIgkE,WAAYhkE,EAAIuI,WACxD,CACA+b,SAASpC,GACP,OAAO,IAAIlf,WAAWkf,EAAOpY,KAAK4lD,YACpC,CACAnpD,OAAOnG,EAA+BujE,GACpC,GAAIvjE,aAAkB4C,WACpB,OAAO5C,EAAOqG,SAAS,EAAGk9D,GAE5B,MAAM,IAAIr7D,MAAM,uBAAuBlI,EAAO43B,cAChD,E,yPC3JF,gBACA,UAqJA,SAAgBiY,EAAavU,EAAiB6oB,GAC5C,MAAMvU,EAAqB,GACrBZ,EAAqB,GACrB60B,EAAuB,MAAR1f,GAAgBzvC,MAAMoiB,QAAQqtB,IAAyB,IAAhBA,EAAKphD,OAC3DizD,EAAgB,MAAR7R,GAAgB0f,EAAgB,KAAOC,EAAe3f,EAAM7oB,GAAOmI,OACjF,IAAIj9B,EAAI,EACR,IAAK,IAAI5F,EAAI,EAAGA,EAAI06B,EAAMv4B,SAAUnC,EAAG,CACrC,GAAY,MAARo1D,EAAc,CAChB,GAAIA,EAAKxvD,KAAO5F,GAAkB,IAAb06B,EAAM16B,GACzB,MAAM,IAAIsH,MAAM,sBAAsBtH,oBAAoB06B,EAAM16B,iBAElD,MAAXo1D,EAAKxvD,IAAcwvD,EAAKxvD,GAAK5F,IAAmB,IAAb06B,EAAM16B,KAC5CgvC,EAASxlC,KAAKkxB,EAAM16B,IACpBouC,EAAS5kC,KAAKxJ,IAEZo1D,EAAKxvD,IAAM5F,GACb4F,G,CAGa,IAAb80B,EAAM16B,KACRgvC,EAASxlC,KAAKkxB,EAAM16B,IACpBouC,EAAS5kC,KAAKxJ,G,CAGlB,MAAO,CAACgvC,WAAUZ,WACpB,CAEA,SAAgB80B,EAAe3f,EAAuB7oB,GACpD,MAAMkQ,EAAOlQ,EAAMv4B,OAkBnB,OAfAohD,EAAe,MAARA,EAAe7oB,EAAMoI,KAAI,CAAC5iC,EAAGF,IAAMA,IAAM,GAAgB07C,OAAO6H,GAGvE,EAAA4f,OACI5f,EAAKsT,OAAMuM,GAAMA,IAAOx4B,GAAQw4B,EAAKx4B,KACrC,IAAM,+CAA+CA,MAASA,mBAC9C2Y,MAGpB,EAAA4f,OACI5f,EAAKsT,MAAMwM,IACX,IACI,0DAAY9f,MAGbA,EAAKzgB,KAAIljC,GAAKA,EAAI,EAAIgrC,EAAOhrC,EAAIA,GAC1C,CACA,SAAgByjE,EAAMzjE,GACpB,OAAOA,EAAI,GAAM,CACnB,CACA,SAAgB0jE,EAAc5oC,GAC5B,GAAqB,IAAjBA,EAAMv4B,OAER,OAAO,EAET,IAAI+e,EAAOwZ,EAAM,GACjB,IAAK,IAAI16B,EAAI,EAAGA,EAAI06B,EAAMv4B,OAAQnC,IAChCkhB,GAAQwZ,EAAM16B,GAEhB,OAAOkhB,CACT,CAQA,SAAgBqiD,EAAoBriD,GAClC,MAAM+nB,EAAQ94B,KAAKuM,KAAKvM,KAAKsvC,KAAKv+B,IAClC,MAAO,CAAC+nB,EAAO94B,KAAKuM,KAAKwE,EAAO+nB,GAClC,CA1MA,uCACEjS,YAAmBkqC,GAAA,KAAAA,gBAAyB,CAC5CsC,iBAAiB9oC,EAA0B+oC,GAEzC,GAAqB,IAAjB/oC,EAAMv4B,OACR,MAAO,CAAC,EAAG,GAEb,MAAM++D,EAAiBp4D,KAAKo4D,eAC5B,GAAIuC,QAA6B3nD,IAApB2nD,EAAMC,UAAyB,CAE1C,MAAMC,EAAQF,EAAMC,WAAahpC,EAAMv4B,OAAS,EAAIu4B,EAAMr4B,MAAMohE,EAAMC,WAAW7O,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAChG0iE,EAAQH,EAAMC,WAAa,EAAI,EAAIhpC,EAAMr4B,MAAM,EAAGohE,EAAMC,WAAW7O,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAC9F,KAAIyiE,EAAQzC,GAAkB0C,EAAQ1C,GAOpC,MAAO,CAACyC,EAAOC,GAJf,EAAAt8B,OAAOE,QACH,gBACA,2DAA2D9M,gBAAoB+oC,EAAMC,Y,CAK7F,MAAMG,EAAYnpC,EAAMm6B,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAE7C,IAAI+nC,EAAQ94B,KAAKwD,MAAMxD,KAAKsvC,KAAKokB,IAEjC,KAAO56B,EAAQi4B,GAAkBj4B,EAAQ46B,GACnCA,EAAY56B,GAAU,EADwBA,KAMpD,GAAIA,GAASi4B,GAAkB2C,EAAY56B,GAAU,EACnD,MAAM,IAAI3hC,MAAM,2DAA2DozB,KAE7E,MAAO,CAACuO,EAAO46B,EAAY56B,EAC7B,GAGF,8BACEjS,YAAmBkqC,GAAA,KAAAA,gBAAyB,CAC5CsC,iBAAiB9oC,EAA0B+oC,GACzC,MAAMK,EAAKh7D,KAAKi7D,eAAerpC,EAAO+oC,GAKtC,OAJIA,GAASA,EAAM96B,WACjBm7B,EAAG,IAAM,EACTA,EAAG,IAAM,GAEPL,GAASA,EAAMlrB,UACV,CAACurB,EAAG,GAAIA,EAAG,IAEbA,CACT,CAEAC,eAAerpC,EAA0B+oC,GACvC,MAAM96B,EAAW86B,GAASA,EAAM96B,SAEhC,GAAqB,IAAjBjO,EAAMv4B,OACR,OAAOwmC,EAAW,CAAC,EAAG,GAAK,CAAC,EAAG,GAEjC,IAAIu4B,EAAiBp4D,KAAKo4D,eAC1B,GAAIuC,QAA6B3nD,IAApB2nD,EAAMC,UAAyB,CAE1C,MAAMC,EAAQF,EAAMC,WAAahpC,EAAMv4B,OAAS,EAAIu4B,EAAMr4B,MAAMohE,EAAMC,WAAW7O,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAChG0iE,EAAQH,EAAMC,WAAa,EAAI,EAAIhpC,EAAMr4B,MAAM,EAAGohE,EAAMC,WAAW7O,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAC9F,KAAIyiE,EAAQzC,GAAkB0C,EAAQ1C,GAOpC,MAAO,CAACyC,EAAOC,GAJf,EAAAt8B,OAAOE,QACH,gBACA,2DAA2D9M,gBAAoB+oC,EAAMC,Y,CAK7F,IAAIM,EAAWtpC,EAAMr4B,MAAM,GAoB3B,GAnBIsmC,IACFu4B,GAAkC,EAOlC8C,EAAWA,EAASlhC,KAChB,CAACpiC,EAAGV,IAAMA,GAAKgkE,EAAS7hE,OAAS,EAAK6hE,EAAShkE,GAAK,GAAM,EAAIgkE,EAAShkE,GAAKgkE,EAAShkE,GAAK,EAAKgkE,EAAShkE,KAIpF,IAApBgkE,EAAS7hE,SACX6hE,EAAW,CAAC,EAAGA,EAAS,MAKJ,IAApBA,EAAS7hE,OAAc,CACzB,MAAM8hE,EAAgBh1B,EAAa+0B,GACnCA,EAAWC,EAAcj1B,Q,CAG3B,MAAM9tB,EAAOoiD,EAAcU,GAC3B,OAAIA,EAAS7hE,QAAU,GAAK+e,GAAQggD,EAC3B,CAAC,EAAGhgD,GACkB,IAApB8iD,EAAS7hE,QAAgB6hE,EAAS,IAAM9C,GAAkB8C,EAAS,IAAM9C,EAC3E8C,EACsB,IAApBA,EAAS7hE,QAAgB6hE,EAAS,GAAKA,EAAS,IAAM9C,GAAkB8C,EAAS,IAAM9C,EACzF,CAAC8C,EAAS,GAAKA,EAAS,GAAIA,EAAS,IACf,IAApBA,EAAS7hE,QAAgB6hE,EAAS,IAAM9C,GAAkB8C,EAAS,GAAKA,EAAS,IAAM9C,EACzF,CAAC8C,EAAS,GAAIA,EAAS,GAAKA,EAAS,IAEtB,IAApBA,EAAS7hE,QAAgB6hE,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM9C,GACpE8C,EAAS,IAAM9C,EACV,CAAC8C,EAAS,GAAKA,EAAS,GAAKA,EAAS,GAAIA,EAAS,IAEpC,IAApBA,EAAS7hE,QAAgB6hE,EAAS,IAAM9C,GACxC8C,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM9C,EACtC,CAAC8C,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAEtDr7B,EAMK46B,EAAoBriD,EAAO,GAAG4hB,KAAIpiC,GAAS,EAAJA,IAEzC6iE,EAAoBriD,EAE/B,GAGF,iBA2BA,mBAqBA,UAGA,kBAWA,uBAA4BwZ,GAC1B,GAAqB,IAAjBA,EAAMv4B,OACR,MAAMmF,MAAM,wDAGd,MAAO,CAACozB,EAAMv4B,OAAS,EAAIu4B,EAAMA,EAAMv4B,OAAS,GAAK,EAAGu4B,EAAMA,EAAMv4B,OAAS,GAC/E,EACA,wBAIA,uBAA4Bu4B,EAAiBwpC,EAAa,GACxD,OAAOZ,EAAc5oC,EAAMr4B,MAAM,EAAGq4B,EAAMv4B,OAAS+hE,GACrD,C,2LCjOA,gBAGA,UAEa,EAAArtB,mCACT,CAACmnB,EAA8CtjC,EAC9Cqb,KACC,MAAMkO,EAAWlO,IAAgB,EAAAqB,YAAY6B,UAAYlD,IAAgB,EAAAqB,YAAY4Z,iBAAoB,EAAI,EACvGroB,EAAWoN,IAAgB,EAAAqB,YAAYC,OACvCkB,EAAaxC,IAAgB,EAAAqB,YAAY4Z,kBAAoBjb,IAAgB,EAAAqB,YAAYC,OACzFqsB,EAAY3tB,IAAgB,EAAAqB,YAAYM,oBAAsBhd,EAAMv4B,OAAS,OAAI2Z,EACjFitB,EAAgBgN,IAAgB,EAAAqB,YAAYM,oBAC9Chd,EAAMoI,KAAI,CAACpiC,EAAGV,IAAMA,IAAM06B,EAAMv4B,OAAS,EAAQ,EAAJzB,EAAQA,SACrDob,EACJ,OAAO,EAAAw8B,6BACH0lB,EAAuBtjC,EAAOupB,EAASlb,EAAe,CAACJ,WAAU4P,YAAWmrB,aAAW,EAGpF,EAAA5tB,+BACT,CAACkoB,EAA8CtjC,EAA0Bqb,KAEnE,MAAMjG,EAAS,EAAA+G,mCAAmCmnB,EAAuBtjC,EAAOqb,GAChF,MAAO,CAACjG,EAAO7G,MAAO6G,EAAO5G,OAAO,EAMjC,EAAAoP,6BACT,CAAC0lB,EAA8CtjC,EAA0Bkd,EAAgB,EACxF7O,EAAmC06B,KAClC,MAAM96B,KAAc86B,IAASA,EAAM96B,WAC5BM,EAAOC,GAAU80B,EAAsBwF,iBAAiB76B,GAAWI,GAAyBrO,EAAO+oC,GACpG74B,EAAOlQ,EAAMv4B,OACnB,IAAIgiE,EAAezpC,EAAMr4B,MAAM,GAI/B,GAHa,IAATuoC,IACFu5B,EAAe,CAAC,IAED,IAAbvsB,EAEF7O,EAAgBrO,OACX,GAAIiO,EAAU,CACnB,GAAiB,IAAbiP,EACF,MAAM,IAAItwC,MAAM,sCAElByhC,EAAgBrO,EACZkQ,EAAO,IACTu5B,EAAav5B,EAAO,GAAKz6B,KAAKuM,KAAKynD,EAAav5B,EAAO,GAAK,IAE1DA,EAAO,IACTu5B,EAAav5B,EAAO,GAAKz6B,KAAKuM,KAAKynD,EAAav5B,EAAO,GAAK,G,MAEzD,IAAK7B,EACV,MAAM,IAAIzhC,MAAM,oDAElB,MAAO,CACL2hC,QACAC,SACA0O,WACAjP,WACAjO,MAAOypC,EACPt5B,QAAS,EAAAiC,UAAUqM,eAAegrB,GAClCp7B,gBACAq7B,WAAaX,GAASA,EAAMlrB,UAC7B,C,uGCjEP,gBAsBA,uBAMEvhB,YACWoQ,EAAgC4O,EAA8C+nB,EAC7EsG,GADD,KAAAj9B,YAAgC,KAAA4O,iBAA8C,KAAA+nB,WAC7E,KAAAsG,SAJK,KAAAC,YAAuE,IAAI/gC,IAKtF8gC,EAAOhD,gBACTv4D,KAAKy7D,cAAgB,IAAIhhC,IACzBz6B,KAAK07D,aAAe,IAAIjhC,IACxBz6B,KAAK27D,cAAgB,IAAIlhC,IAE7B,CACAqV,wBACIzf,EAA2B2W,EAAuB9jC,EAA0B0sC,GAC9E,MAAMgsB,EAAkB57D,KAAK67D,cAAcxrC,GAErCyrC,EAAU97D,KAAKs+B,UAAUy9B,WAAWH,EAAiB50B,EAAO8H,UAAY,EAAGc,GACjF,GAAI5I,EAAOnH,UAAsB,IAAV+P,EACrB,MAAM,IAAIpxC,MAAM,mBAElB,MAAM2hC,EAAQ6G,EAAO7G,MACfC,EAAS4G,EAAO5G,OAEtB,IAAI9Q,EACAmsC,EACJ,GAAIz7D,KAAKu7D,OAAOhD,cAAe,CAC7BjpC,EAAM,GAAG6Q,KAASC,KAAU07B,EAAQtC,UAAUsC,EAAQxC,kBAAkBwC,EAAQ7uB,cAChFwuB,EAAgBz7D,KAAKy7D,cAAc7zD,IAAI0nB,GAClCmsC,IACHA,EAAgB,GAChBz7D,KAAKy7D,cAAcxwD,IAAIqkB,EAAKmsC,IAG9B,MAAMC,EAAe17D,KAAK07D,aAAa9zD,IAAI0nB,GAC3C,GAAIosC,GAAgBA,EAAariE,OAAS,EAAG,CAC3C,MAAMo0C,EAAUiuB,EAAat3D,MAK7B,OAJAq3D,EAAc/6D,KAAK+sC,GACL,IAAVmC,GACF5vC,KAAKs+B,UAAU09B,cAAcvuB,EAAStN,EAAOC,EAAQ07B,EAAS97D,KAAKi8D,cAAc5rC,EAAUntB,IAEtFuqC,C,EAIX,EAAAjP,OAAOE,QAAQ,iBAAkB,gCAAgCsI,EAAO7G,SAAS6G,EAAO5G,UACxF,MAAMqN,EAAUztC,KAAKs+B,UAAU49B,gBAAgB/7B,EAAOC,EAAQ07B,EAAS97D,KAAKi8D,cAAc5rC,EAAUntB,IAMpG,OAJIlD,KAAKu7D,OAAOhD,gBACdkD,EAAe/6D,KAAK+sC,GACpBztC,KAAK27D,cAAc1wD,IAAIwiC,EAASne,IAE3Bme,CACT,CACAyD,YAAY1C,EAAiBne,EAA2Bye,GAItD,OAHKA,IACHA,EAAW,GAEN9uC,KAAKi1D,SAASK,MAAM,UAAW,8BAA8B,KAClE,MAAMuE,EAAWrrB,EAAG5c,MAAMm6B,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAAK02C,EAC9C5rC,EAAOlD,KAAKs+B,UAAU4S,YACxB1C,EAAGf,QAASe,EAAGrO,MAAOqO,EAAGpO,OAAQy5B,EAAU75D,KAAK67D,cAAcxrC,GAAWye,GAC7E,OAAO9uC,KAAKm8D,aAAa9rC,EAAUntB,EAAK,GAE5C,CACAo1B,uBAAuBkW,EAAiBne,EAA2Bye,GACjE,MAAMJ,EAASF,EAAGH,OAAOK,OAIzB,GAHKI,IACHA,EAAW,GAET9uC,KAAKw7D,YAAYzzB,IAAI2G,GAAS,CAChC,MAAM0tB,EAAcp8D,KAAKw7D,YAAY5zD,IAAI8mC,GACzC,OAAO,IAAIp3C,SAA2BiW,GAAW6uD,aAAW,EAAXA,EAAa17D,KAAK6M,I,CAErE,OAAOvN,KAAKi1D,SAASK,MAAM,UAAW,mCAAmCh9B,UACvEt4B,KAAKw7D,YAAYvwD,IAAIyjC,EAAQ,IAC7B,MAAMmrB,EAAWrrB,EAAG5c,MAAMm6B,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAAK02C,QAE9C9uC,KAAKs+B,UAAU+9B,wBACrB,MAAMn5D,EAAOlD,KAAKs+B,UAAU4S,YACxB1C,EAAGf,QAASe,EAAGrO,MAAOqO,EAAGpO,OAAQy5B,EAAU75D,KAAK67D,cAAcxrC,GAAWye,GACvEwtB,EAAat8D,KAAKm8D,aAAa9rC,EAAUntB,GACzCk5D,EAAcp8D,KAAKw7D,YAAY5zD,IAAI8mC,GAGzC,OAFA1uC,KAAKw7D,YAAY3gC,OAAO6T,GACxB0tB,WAAar5D,SAAQwK,GAAWA,EAAQ+uD,KACjCA,CAAU,GAErB,CACA5qB,wBAAwBlD,GACtB,OAAOxuC,KAAKi1D,SAASK,MAAM,UAAW,0CAA0C,KAC9E,MAAMuE,EAAWrrB,EAAG5c,MAAMm6B,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IACzC8K,EAAOlD,KAAKs+B,UAAU4S,YAAY1C,EAAGf,QAASe,EAAGrO,MAAOqO,EAAGpO,OAAmB,EAAXy5B,EAAc,OAAQ,GAC/F,OAAO,IAAI/7D,aAAaoF,EAAK5M,OAAQ4M,EAAKg3D,WAAYL,EAAS,GAEnE,CACAroB,eAAeR,EAA0BurB,GACvC,IAAIjtC,EACJ,GAAItvB,KAAKu7D,OAAOhD,gBACdjpC,EAAMtvB,KAAK27D,cAAc/zD,IAAIopC,EAAYvD,SACrCne,GAAK,CACHitC,GACFv8D,KAAK27D,cAAc9gC,OAAOvL,GAE5B,MAAMmsC,EAAgBz7D,KAAKy7D,cAAc7zD,IAAI0nB,GAC7C,GAAImsC,EAAe,CACjB,MAAMpoD,EAAQooD,EAAcnhE,QAAQ02C,EAAYvD,SAChD,IAAe,IAAXp6B,EAAc,CAChBooD,EAAc54D,OAAOwQ,EAAO,GAC5B,IAAIqoD,EAAe17D,KAAK07D,aAAa9zD,IAAI0nB,GACpCosC,IACHA,EAAe,GACf17D,KAAK07D,aAAazwD,IAAIqkB,EAAKosC,IAE7BA,EAAah7D,KAAKswC,EAAYvD,Q,GAMjCne,IAAOitC,IACV,EAAA/9B,OAAOE,QAAQ,iBAAkB,4BAA4BsS,EAAY7Q,SAAS6Q,EAAY5Q,UAC9FpgC,KAAKs+B,UAAUi+B,cAAcvrB,EAAYvD,SAE7C,CACA0uB,aAAa9rC,EAA2BntB,GACtC,OAAQmtB,GACN,IAAK,QACH,OAAOntB,aAAgB7F,WAAa6F,EAAO7F,WAAWu3B,KAAK1xB,GAC7D,IAAK,QACH,OAAOA,aAAgB3F,WAAa2F,EAAO3F,WAAWq3B,KAAK1xB,GAC7D,IAAK,OACH,OAAOA,aAAgB/F,UAAY+F,EAAO/F,UAAUy3B,KAAK1xB,GAC3D,IAAK,SACH,OAAOA,aAAgBxF,YAAcwF,EAAOxF,YAAYk3B,KAAK1xB,GAC/D,IAAK,SACH,OAAOA,aAAgBtF,YAAcsF,EAAOtF,YAAYg3B,KAAK1xB,GAC/D,IAAK,QACL,IAAK,OACH,OAAOA,aAAgBhK,WAAagK,EAAOhK,WAAW07B,KAAK1xB,GAC7D,IAAK,UACH,OAAOA,aAAgBpF,aAAeoF,EAAOpF,aAAa82B,KAAK1xB,GACjE,IAAK,UACH,OAAOA,aAAgBlF,aAAekF,EAAOlF,aAAa42B,KAAK1xB,GACjE,QACE,MAAM,IAAI1E,MAAM,mBAAmB6xB,sBAEzC,CACA4rC,cAAc5rC,EAA2BntB,GACvC,GAAKA,EAGL,OAAQA,aAAgBpF,aAAgBoF,EAAO,IAAIpF,aAAaoF,EAmBlE,CACA24D,cAAcW,GACZ,MAAO,OAgBT,CACAjrB,sBACEvxC,KAAKs+B,UAAUiT,qBACjB,E,4BCjLF,IAAYjD,E,uEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,yBACA,2CACA,uBACA,mDACA,gD,sSC3CF,gBAOA,0BAA+BrO,GAC7B,MAAMxnB,EAAMwnB,EAAc5mC,OAC1B,OAAO4mC,EAAc1mC,MAAM,EAAGkf,EAAM,GAAGm6B,OAAO3S,EAAcxnB,EAAM,GAAK,EACzE,EAEA,cAAO6f,eACHmkC,EAAwBC,EAAU,CAACC,GAAqB,GAAGC,GAC7D,OAAO,IAAItlE,SAAc,CAACiW,EAASgG,KACjC,IAAIspD,EAAW,EAEf,MAAMC,EAAQ,KACZ,GAAIL,IAEF,YADAlvD,IAIFsvD,IAEA,MAAME,EAAcL,EAAQG,GAEV,MAAdD,GAAsBC,GAAYD,EACpCrpD,IAGFlI,WAAWyxD,EAAOC,EAAY,EAGhCD,GAAO,GAEX,EAMA,sDAA2Dv6B,GAEzD,OADA,EAAA83B,YAA8B,IAAhB93B,GAAsD,IAAvBA,EAAYlpC,QAAc,IAAM,wCACtE,MAAQkpC,EAAY5uB,OAAO,GAAGqpD,cAAgBz6B,EAAYhpC,MAAM,EACzE,EAMA,iEAAsEgpC,GAEpE,OADA,EAAA83B,YAA8B,IAAhB93B,GAAsD,IAAvBA,EAAYlpC,QAAc,IAAM,wCACtE,MAAQkpC,EAAY5uB,OAAO,GAAGqpD,cAAgBz6B,EAAYhpC,MAAM,GAAK,aAC9E,EAGA,6BAAkCmhD,EAA+BrV,GAE/D,IAAIE,EAA0BG,KAAKxjB,MAAMwjB,KAAKC,UAAU+U,IAExD,OADAnV,EAAgBF,EACTE,CACT,EAGA,6BAAkCpyB,EAAkBmyB,GAClD,OAAOA,EAAStL,KAAIpiC,GAAKub,EAAOvb,KAAIwc,KAAK,KAC3C,EAGA,6BAAkC0tB,GAChC,GAAIA,GAAQ,EACV,MAAO,MACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QAEP,MAAMtjC,MAAM,gBAAgBsjC,yBAEhC,EAEA,yBAA8BA,EAAO,GACnC,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKvoC,MAAM,EAAGuoC,EACjD,C,mIC1FA,gBAEA,UAEM1e,EAA6C,CAAC,EAuCpD,SAAgB65C,EAAsB/+B,GACpC,MAAMg/B,EAyCR,WACE,GAAwB,oBAAblnE,SAA0B,CACnC,GAA+B,oBAApBmnE,gBACT,MAAM,IAAIv7C,UAAU,6DAEtB,OAAO,IAAIu7C,gBAAgB,EAAG,E,CAEhC,MAAMD,EAA4BlnE,SAASonE,cAAc,UAGzD,OAFAF,EAAO/8B,MAAQ,EACf+8B,EAAO98B,OAAS,EACT88B,CACT,CApDiBG,GAUf,IAAI9H,EACJ,MAAMpnD,EAV4C,CAChD81C,OAAO,EACPqZ,OAAO,EACPC,WAAW,EACXC,SAAS,EACTC,uBAAuB,EACvBC,oBAAoB,EACpBC,8BAA8B,GAIhC,KAAKz/B,GAA2B,WAAdA,KAChBq3B,EAAK2H,EAAOU,WAAW,SAAUzvD,GAC7BonD,GACF,IACE,OAAO,IAAI,EAAAsI,aAAatI,EAAI,E,CAC5B,MAAO/hD,GACP,EAAAgrB,OAAOG,QAAQ,mBAAoB,kEAAkEnrB,I,CAI3G,KAAK0qB,GAA2B,UAAdA,KAChBq3B,EAAK2H,EAAOU,WAAW,QAASzvD,IAAO+uD,EAAOU,WAAW,qBAAsBzvD,GAC3EonD,GACF,IACE,OAAO,IAAI,EAAAsI,aAAatI,EAAI,E,CAC5B,MAAO/hD,GACP,EAAAgrB,OAAOG,QACH,mBACA,yFAAyFnrB,I,CAKnG,MAAM,IAAIhV,MAAM,yBAClB,CArEA,8BAAgB+/B,EAAmBL,GACjC,IAAIU,EACEV,GAA2B,WAAdA,KAA2B,WAAY9a,GAE7C8a,GAA2B,UAAdA,KAA0B,UAAW9a,KAC7Dwb,EAAUxb,EAAMya,OAFhBe,EAAUxb,EAAM06C,OAKlBl/B,EAAUA,GAAWq+B,EAAsB/+B,GAC3CA,EAAYA,GAAiC,IAApBU,EAAQ/M,QAAgB,QAAU,SAC3D,MAAM0jC,EAAK32B,EAAQ22B,GAInB,OAFAnyC,EAAM8a,GAAaU,EAEf22B,EAAGwI,wBACE36C,EAAM8a,GACNK,EAAmBL,KAG5Bq3B,EAAGyI,QAAQzI,EAAG0I,YACd1I,EAAGyI,QAAQzI,EAAG2I,cACd3I,EAAGyI,QAAQzI,EAAG4I,OACd5I,EAAGyI,QAAQzI,EAAG6I,QACd7I,EAAGyI,QAAQzI,EAAG8I,qBACd9I,EAAGyI,QAAQzI,EAAG+I,iBACd/I,EAAGgJ,OAAOhJ,EAAGiJ,cACbjJ,EAAGgJ,OAAOhJ,EAAGkJ,WACblJ,EAAGmJ,SAASnJ,EAAGoJ,MAER//B,EACT,EAEA,yB,+pBC3CA,gBAEA,aAEA,UAWA,SAAgBggC,EAAqBtiC,GACnC,IAAIplC,EAAI,EACR,KAAOA,EAAIolC,EAAIjjC,QACEijC,EAAIplC,OADIA,GAMzB,OAAOA,EAAI,CACb,CATA,yBAcA,qBAwCEg3B,YAAYqnC,EAA2B1jC,GAF/B,KAAAgtC,kBAAmB,EAogBnB,KAAAC,YAA0B,GAjgBhC9+D,KAAKu1D,GAAKA,EACVv1D,KAAK6xB,QAAUA,EAEf7xB,KAAK++D,gBACL/+D,KAAKg/D,aAAeh/D,KAAKi/D,qBACzBj/D,KAAKk/D,YAAcl/D,KAAKm/D,oBACxBn/D,KAAKo/D,sBACP,CAEAlD,gBAAgB/7B,EAAeC,EAAgB07B,EAAsB54D,GACnE,MAAMqyD,EAAKv1D,KAAKu1D,GAEV9nB,EAAU8nB,EAAG8J,gBAEnB9J,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAC9B8nB,EAAGgK,cAAchK,EAAG+J,WAAY/J,EAAGiK,mBAAoBjK,EAAGkK,SAC1DlK,EAAGgK,cAAchK,EAAG+J,WAAY/J,EAAGmK,mBAAoBnK,EAAGkK,SAC1DlK,EAAGgK,cAAchK,EAAG+J,WAAY/J,EAAGoK,eAAgBpK,EAAGqK,eACtDrK,EAAGgK,cAAchK,EAAG+J,WAAY/J,EAAGsK,eAAgBtK,EAAGqK,eACtD,MAAMtpE,EAAS4M,EAAO44D,EAAQ/nD,OAAO7Q,EAAMi9B,EAAQC,GAAU,KAQ7D,OAPAm1B,EAAGuK,WACCvK,EAAG+J,WACH,EACAxD,EAAQxC,eAAgBn5B,EAAOC,EAC/B,EACA07B,EAAQtC,OAAQsC,EAAQ7uB,YAAa32C,GACzC0J,KAAK+/D,aACEtyB,CACT,CACAuuB,cACIvuB,EAAuBtN,EAAeC,EAAgB07B,EAAsB54D,GAC9E,MAAMqyD,EAAKv1D,KAAKu1D,GAChBA,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAC9B,MAAMn3C,EAASwlE,EAAQ/nD,OAAO7Q,EAAMi9B,EAAQC,GAC5Cm1B,EAAGyK,cACCzK,EAAG+J,WACH,EACA,EACA,EACAn/B,EAAOC,EAAQ07B,EAAQtC,OAAQsC,EAAQ7uB,YAAa32C,GACxD0J,KAAK+/D,YACP,CACA9I,kBAAkBxpB,EAAuBtN,EAAeC,GACtD,MAAMm1B,EAAKv1D,KAAKu1D,GAEhBA,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAC9B8nB,EAAG0K,gBAAgB1K,EAAG2K,YAAalgE,KAAKk/D,aACxC3J,EAAG4K,qBACC5K,EAAG2K,YAAa3K,EAAG6K,kBAAmB7K,EAAG+J,WAAY7xB,EACrD,GACJztC,KAAK+/D,aACLxK,EAAG8K,SAAS,EAAG,EAAGlgC,EAAOC,GACzBm1B,EAAG+K,QAAQ,EAAG,EAAGngC,EAAOC,EAC1B,CACA8Q,YACIzD,EAAuBtN,EAAeC,EAAgBy5B,EAAkBxpC,EACxEye,GACF,MAAMymB,EAAKv1D,KAAKu1D,GACXzmB,IACHA,EAAW,GAER9uC,KAAK6+D,kBACR7+D,KAAKi3D,kBAAkBxpB,EAAStN,EAAOC,GAEzC,MAAM07B,EAAU97D,KAAK+7D,WAAW1rC,EAAUye,GACpCx4C,EAASwlE,EAAQthD,SAAS2lB,EAAQC,GAUxC,OARAm1B,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAC9B8nB,EAAG4K,qBACC5K,EAAG2K,YAAa3K,EAAG6K,kBAAmB7K,EAAG+J,WAAY7xB,EACrD,GAEJ8nB,EAAGgL,WAAW,EAAG,EAAGpgC,EAAOC,EAAQm1B,EAAGoE,KAAMmC,EAAQ7uB,YAAa32C,GACjE0J,KAAK+/D,aAEEjE,EAAQr/D,OAAOnG,EAAQujE,EAChC,CAEA2G,qBAEE,OAAO,CACT,CACAC,mBACE,MAAMlL,EAAKv1D,KAAKu1D,GAEhB,MAAO,WADGA,EAAGmL,aAAa1gE,KAAKu1D,GAAGoL,gBACZpL,EAAGqL,SAC3B,CACAC,oBACE,OAAO7gE,KAAKu1D,GAAGmL,aAAa1gE,KAAKu1D,GAAGuL,mBACtC,CACAC,wBACE,OAAO/gE,KAAKu1D,GAAGmL,aAAa1gE,KAAKu1D,GAAGyL,oBACtC,CACA3J,oBAAoBH,EAAwBC,GAC1C,MAAM5B,EAAKv1D,KAAKu1D,GAChBA,EAAG0L,oBAAoB/J,EAAgB,EAAG3B,EAAG/5B,OAAO,EAAO,GAAI,GAC/D+5B,EAAG2L,wBAAwBhK,IACC,IAAxBC,IACF5B,EAAG0L,oBAAoB9J,EAAoB,EAAG5B,EAAG/5B,OAAO,EAAO,GAAI,IACnE+5B,EAAG2L,wBAAwB/J,IAE7Bn3D,KAAK+/D,YACP,CACA/I,cACIjB,EACAe,GAEF,MAAMvB,EAAKv1D,KAAKu1D,GACVnoB,EAAUmoB,EAAGyB,gBAMnB,OAHAzB,EAAG4L,aAAa/zB,EAAS2oB,GACzBR,EAAG4L,aAAa/zB,EAAS0pB,GACzBvB,EAAG6L,YAAYh0B,GACRA,CACT,CACAupB,cAAczsB,EAAsBm3B,GAClC,MAAM9L,EAAKv1D,KAAKu1D,GACV+L,EAAS/L,EAAGgM,aAAaF,GAC/B,IAAKC,EACH,MAAM,IAAI9iE,MAAM,0CAA0C6iE,KAK5D,GAFA9L,EAAGrrB,aAAao3B,EAAQp3B,GACxBqrB,EAAGoB,cAAc2K,IACwC,IAArD/L,EAAGiM,mBAAmBF,EAAQ/L,EAAGkM,gBACnC,MAAM,IAAIjjE,MAAM,6BAA6B+2D,EAAGmM,iBAAiBJ,uBAErEp3B,KAEE,OAAOo3B,CACT,CACAtL,aAAasL,GACXthE,KAAKu1D,GAAGS,aAAasL,EACvB,CACAvJ,qBAAqBtqB,EAAuBjyB,EAAkBs8C,GAC5D,MAAMvC,EAAKv1D,KAAKu1D,GAChBA,EAAGoM,cAAcpM,EAAGqL,SAAWplD,GAC/Bxb,KAAK+/D,aACLxK,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAC9BztC,KAAK+/D,aACLxK,EAAGsC,UAAUC,EAAet8C,GAC5Bxb,KAAK+/D,YACP,CACAjK,OACE91D,KAAKu1D,GAAGqM,WAAW5hE,KAAKu1D,GAAGsM,eAAgB,EAAG,GAC9C7hE,KAAK+/D,YACP,CACAA,aACE,GAAI,EAAAlnC,IAAIg+B,MAAO,CACb,MAAMtB,EAAKv1D,KAAKu1D,GACVv7D,EAAQu7D,EAAGuM,WACjB,IAAIC,EAAQ,GACZ,OAAQ/nE,GACN,KAAMu7D,EAAW,SACf,OACF,KAAMA,EAAe,aACnBwM,EAAQ,eACR,MACF,KAAMxM,EAAgB,cACpBwM,EAAQ,gBACR,MACF,KAAMxM,EAAoB,kBACxBwM,EAAQ,oBACR,MACF,KAAMxM,EAAgC,8BACpCwM,EAAQ,gCACR,MACF,KAAMxM,EAAgB,cACpBwM,EAAQ,gBACR,MACF,KAAMxM,EAAqB,mBACzBwM,EAAQ,qBACR,MACF,QACEA,EAAQ,wBAAwB/nE,EAAMuP,SAAS,MAEnD,MAAM,IAAI/K,MAAMujE,E,CAEpB,CACAxF,cAAc9uB,GACZztC,KAAKu1D,GAAGgH,cAAc9uB,EACxB,CACAwoB,cAAc7oB,GACZptC,KAAKu1D,GAAGU,cAAc7oB,EACxB,CACA2uB,WAAW1rC,EAA4Bye,EAAkBc,EAAA,GACvD,GAAqB,IAAjB5vC,KAAK6xB,QACP,OAAO,IAAImwC,EAAaC,sBAAsBjiE,KAAKu1D,GAA8BzmB,GAGnF,OAAQze,GACN,IAAK,QACH,OAAc,IAAVuf,GAAsC5vC,KAAKkiE,yBACtC,IAAIF,EAAaG,qBAAqBniE,KAAKu1D,GAAIzmB,GAE/C,IAAIkzB,EAAaG,qBACpBniE,KAAKu1D,GAAIzmB,EAAU9uC,KAAKoiE,0BAA2BC,gBAE3D,IAAK,MACH,MAAM,IAAI7jE,MAAM,mBAClB,IAAK,OACH,OAAO,IAAIwjE,EAAaM,iBAAiBtiE,KAAKu1D,GAAIzmB,GACpD,QACE,MAAM,IAAItwC,MAAM,qBAAqB6xB,KAE3C,CACAkhB,sBACE,MAAMgkB,EAAKv1D,KAAKu1D,GAChB,IAAK,IAAIgN,EAAO,EAAGA,EAAOviE,KAAKwiE,uBAAwBD,EACrDhN,EAAGoM,cAAcpM,EAAGqL,SAAW2B,GAC/BhN,EAAGkC,YAAYlC,EAAG+J,WAAY,KAElC,CACA5hC,UACE,GAAI19B,KAAKyiE,SACP,OAEF,MAAMlN,EAAKv1D,KAAKu1D,GAChBA,EAAG0K,gBAAgB1K,EAAG2K,YAAa,MACnC3K,EAAGmN,kBAAkB1iE,KAAKk/D,aAC1B3J,EAAGoN,WAAWpN,EAAGqN,aAAc,MAC/BrN,EAAGsN,aAAa7iE,KAAKg/D,cACrBzJ,EAAGoN,WAAWpN,EAAGuN,qBAAsB,MACvCvN,EAAG92C,SACHze,KAAKyiE,UAAW,CAClB,CAEQM,wBAEN,OAAO,IAAIjlE,aAAa,EACrB,EAAK,EAAM,EAAK,EAAK,GACrB,GAAM,EAAK,EAAK,EAAK,EACtB,EAAM,EAAM,EAAK,EAAK,EACtB,GAAO,EAAK,EAAK,EAAK,GAE1B,CACQmhE,qBACN,MAAM1J,EAAKv1D,KAAKu1D,GACVj/D,EAASi/D,EAAGyN,eAClB,IAAK1sE,EACH,MAAM,IAAIkI,MAAM,gCAElB,MAAMykE,EAAWjjE,KAAK+iE,wBAItB,OAHAxN,EAAGoN,WAAWpN,EAAGqN,aAActsE,GAC/Bi/D,EAAG2N,WAAW3N,EAAGqN,aAAcK,EAAU1N,EAAG4N,aAC5CnjE,KAAK+/D,aACEzpE,CACT,CACQ6oE,oBACN,MAAMj6D,EAAKlF,KAAKu1D,GAAG4J,oBACnB,IAAKj6D,EACH,MAAM,IAAI1G,MAAM,mCAElB,OAAO0G,CACT,CAEQk6D,uBACN,MAAM7J,EAAKv1D,KAAKu1D,GAMhB,GAJAv1D,KAAKojE,sCAAwCpjE,KAAKqjE,2CAClDrjE,KAAKkiE,yBAA2BliE,KAAKsjE,qBACrCtjE,KAAKyxC,2BAA6BzxC,KAAKujE,uBAElB,IAAjBvjE,KAAK6xB,UAAkB7xB,KAAKoiE,4BAA8BpiE,KAAKkiE,yBACjE,MAAM,IAAI1jE,MAAM,0DAGlBwB,KAAKwjE,kBAAoBxjE,KAAKkiE,0BAA4BliE,KAAKyjE,oBAG/DzjE,KAAKo4D,eAAiB7C,EAAGmL,aAAanL,EAAGmO,kBACzC1jE,KAAKwiE,qBAAuBjN,EAAGmL,aAAanL,EAAGoO,yBAM3C3jE,KAAK6xB,OAMX,CACQktC,gBACe,IAAjB/+D,KAAK6xB,SACP7xB,KAAK4jE,0BAA4B5jE,KAAKu1D,GAAGsO,aAAa,0BACtD7jE,KAAK8jE,kCAAoC9jE,KAAKu1D,GAAGsO,aAAa,qCAE9D7jE,KAAK+jE,sBAAwB/jE,KAAKu1D,GAAGsO,aAAa,qBAClD7jE,KAAKoiE,0BAA4BpiE,KAAKu1D,GAAGsO,aAAa,0BAE1D,CAEQR,2CAGN,MAAM9N,EAAKv1D,KAAKu1D,GACV9nB,EAAU8nB,EAAG8J,gBACnB9J,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAE9B,MAAM6rB,EAAkC,IAAjBt5D,KAAK6xB,QAAiB0jC,EAAoCmE,QAAUnE,EAAGoE,KAC9FpE,EAAGuK,WAAWvK,EAAG+J,WAAY,EAAGhG,EAAgB,EAAG,EAAG,EAAG/D,EAAGoE,KAAMpE,EAAG/5B,MAAO,MAE5E,MAAMwoC,EAAczO,EAAG4J,oBACvB5J,EAAG0K,gBAAgB1K,EAAG2K,YAAa8D,GAEnCzO,EAAG4K,qBAAqB5K,EAAG2K,YAAa3K,EAAG6K,kBAAmB7K,EAAG+J,WAAY7xB,EAAS,GAEtF,MAAMw2B,EAAa1O,EAAG2O,uBAAuB3O,EAAG2K,eAAiB3K,EAAG4O,qBAKpE,OAJA5O,EAAGkC,YAAYlC,EAAG+J,WAAY,MAC9B/J,EAAG0K,gBAAgB1K,EAAG2K,YAAa,MACnC3K,EAAGgH,cAAc9uB,GACjB8nB,EAAGmN,kBAAkBsB,GACdC,CACT,CAEQX,qBACN,GAAqB,IAAjBtjE,KAAK6xB,SACP,IAAK7xB,KAAK4jE,0BACR,OAAO,OAGT,IAAK5jE,KAAK+jE,sBACR,OAAO,EAGX,OAAO/jE,KAAKojE,qCACd,CAEQG,uBACN,GAAqB,IAAjBvjE,KAAK6xB,SACP,IAAK7xB,KAAK4jE,0BACR,OAAO,MAEJ,CACL,IAAK5jE,KAAK+jE,sBACR,OAAO,EAET,IAAK/jE,KAAKu1D,GAAGsO,aAAa,4BACxB,OAAO,C,CAGX,OAAO7jE,KAAKojE,qCACd,CAKQK,oBAIN,MAAMlO,EAAKv1D,KAAKu1D,GAEhB,IAAI9nB,EACAu2B,EACAjO,EACAqO,EACAh3B,EAEJ,IACEK,EAAU8nB,EAAG8J,gBACb2E,EAAczO,EAAG4J,oBACjB5J,EAAGkC,YAAYlC,EAAG+J,WAAY7xB,GAG9B,MAAM6rB,EAAkC,IAAjBt5D,KAAK6xB,QAAiB0jC,EAAoCmE,QAAUnE,EAAGoE,KAS9F,OARApE,EAAGuK,WAAWvK,EAAG+J,WAAY,EAAGhG,EAAgB,EAAG,EAAG,EAAG/D,EAAGoE,KAAMpE,EAAG/5B,MAAO,MAE5E+5B,EAAG0K,gBAAgB1K,EAAG2K,YAAa8D,GACnCzO,EAAG4K,qBAAqB5K,EAAG2K,YAAa3K,EAAG6K,kBAAmB7K,EAAG+J,WAAY7xB,EAAS,GAEtF8nB,EAAGgJ,OAAOhJ,EAAG4I,OAEbpI,EAAeR,EAAGgM,aAAahM,EAAGqB,iBAC7Bb,IAGLR,EAAGrrB,aAAa6rB,EAAc,iBAC9BR,EAAGoB,cAAcZ,GAEjBqO,EAAiB7O,EAAGgM,aAAahM,EAAGwB,mBAC/BqN,IAGL7O,EAAGrrB,aAAak6B,EAAgB,8DAChC7O,EAAGoB,cAAcyN,GAEjBh3B,EAAUmoB,EAAGyB,kBACR5pB,IAGLmoB,EAAG4L,aAAa/zB,EAAS2oB,GACzBR,EAAG4L,aAAa/zB,EAASg3B,GACzB7O,EAAG6L,YAAYh0B,GACfmoB,EAAGC,WAAWpoB,GAEdmoB,EAAGqM,WAAWrM,EAAG8O,OAAQ,EAAG,GACrB9O,EAAGuM,aAAevM,EAAG+O,W,SAG5B/O,EAAGyI,QAAQzI,EAAG4I,OAEV/wB,GACFmoB,EAAGU,cAAc7oB,GAEf2oB,GACFR,EAAGS,aAAaD,GAEdqO,GACF7O,EAAGS,aAAaoO,GAEdJ,IACFzO,EAAG0K,gBAAgB1K,EAAG2K,YAAa,MACnC3K,EAAGmN,kBAAkBsB,IAEnBv2B,IACF8nB,EAAGkC,YAAYlC,EAAG+J,WAAY,MAC9B/J,EAAGgH,cAAc9uB,G,CAGvB,CAEA82B,aACE,GAAqB,IAAjBvkE,KAAK6xB,SAAiB7xB,KAAK8jE,kCAAmC,CAChE,MAAMU,EAAMxkE,KAAKu1D,GACXkP,EAAMzkE,KAAK8jE,kCAEXY,EAAQF,EAAIG,cAElB,OADAH,EAAII,WAAWH,EAAII,iBAAkBH,GAC9BA,C,CAGP,MAAM,IAAIlmE,MAAM,4CAEpB,CAEAsmE,WACE,GAAqB,IAAjB9kE,KAAK6xB,UAAiB7xB,KAAK8jE,kCAO7B,MAAM,IAAItlE,MAAM,4CAPlB,CACE,MAAMgmE,EAAMxkE,KAAKu1D,GACXkP,EAAMzkE,KAAK8jE,kCACjBU,EAAIO,SAASN,EAAII,iB,CAMrB,CAEAG,uBAAuBN,GACrB,IAAIO,GAAY,EAAOC,GAAW,EAClC,GAAqB,IAAjBllE,KAAK6xB,UAAiB7xB,KAAK8jE,kCAQ7B,MAAM,IAAItlE,MAAM,4CARgD,CAChE,MAAMgmE,EAAMxkE,KAAKu1D,GACXkP,EAAMzkE,KAAK8jE,kCAEjBmB,EAAYT,EAAIW,kBAAkBT,EAAOF,EAAIY,wBAC7CF,EAAWV,EAAI9D,aAAa+D,EAAIY,iB,CAMlC,OAAOJ,IAAcC,CACvB,CAEAI,eAAeZ,GACb,IAAIa,EAAc,EAClB,GAAqB,IAAjBvlE,KAAK6xB,QAMP,MAAM,IAAIrzB,MAAM,4CANM,CACtB,MAAMgmE,EAAMxkE,KAAKu1D,GACjBgQ,EAAcf,EAAIW,kBAAkBT,EAAOF,EAAIgB,cAC/ChB,EAAIiB,YAAYf,E,CAMlB,OAAOa,EAAc,GACvB,CAEAjtC,6BAA6BosC,GAE3B,aADM,EAAAgB,aAAY,IAAM1lE,KAAKglE,uBAAuBN,KAC7C1kE,KAAKslE,eAAeZ,EAC7B,CAEOpsC,8BACL,MAAMqtC,EAAe3lE,KAAK4lE,YAAY5lE,KAAKu1D,IAC3C,OAAOv1D,KAAK6lE,UAAUF,EACxB,CAEQC,YAAYrQ,GAClB,IAAIuQ,EACJ,MAAMtB,EAAMjP,EACNmP,EAAQF,EAAIuB,UAAUvB,EAAIwB,2BAA4B,GAU5D,OATAzQ,EAAG0Q,QAEDH,EADY,OAAVpB,EACc,KAAM,EAEN,KACd,MAAM1pE,EAASwpE,EAAI0B,eAAexB,EAAO,EAAG,GAC5C,OAAO1pE,IAAWwpE,EAAI2B,kBAAoBnrE,IAAWwpE,EAAI4B,mBAAmB,EAGzE,CAAC1B,QAAOoB,gBACjB,CAEAxtC,gBAAgBqtC,GACd,OAAO,IAAIruE,SAAciW,IAClBvN,KAAKqmE,eAAc,IAAMV,EAAaG,kBAAiB,IAAMv4D,KAAU,GAEhF,CAIA+4D,YAEE,MAAMjzD,EAAQurD,EAAqB5+D,KAAK8+D,YAAY9kC,KAAIpgC,GAAKA,EAAE2sE,YAC/D,IAAK,IAAIrvE,EAAI,EAAGA,GAAKmc,IAASnc,EAAG,CAC/B,MAAM,UAACsvE,GAAaxmE,KAAK8+D,YAAY5nE,GACrCsvE,G,CAEFxmE,KAAK8+D,YAAc9+D,KAAK8+D,YAAYvlE,MAAM8Z,EAAQ,EACpD,CAEQilB,oBAAoBiuC,EAAyBC,GACnDxmE,KAAK8+D,YAAYp+D,KAAK,CAAC6lE,WAAUC,cAC7BxmE,KAAK8+D,YAAYzlE,OAAS,SAKxB,EAAAqsE,aAAY,KAChB1lE,KAAKsmE,YAE8B,IAA5BtmE,KAAK8+D,YAAYzlE,SAE5B,E,sGC7lBF,gBAIA,MAAMotE,EACJv4C,YAAmB+qC,EAAqBxgE,GAArB,KAAAwgE,KAAqB,KAAAxgE,MAAmB,EAG7D,sBACEy1B,YAAoBiB,EAAcw9B,EAAyBsI,GAAvC,KAAA9lC,QAAuC,KAAA8lC,WACzDj1D,KAAKw9B,WAAWmvB,EAClB,CAEAnvB,WAAWmvB,GACT3sD,KAAKi1D,SAASK,MAAM,UAAW,4BAA4B,KACzD,MAAM1tB,EAAa5nC,KAAKmvB,MAAMu3C,WAC9B,GAAI9+B,EAAWvuC,SAAWszD,EAAItzD,OAC5B,MAAM,IAAImF,MAAM,2CAGlBwB,KAAK2mE,KAAOha,EAAI3yB,KAAI,CAACi/B,EAAI/hE,IAAM,IAAIuvE,EAASxN,EAAIrxB,EAAW1wC,MAC3D8I,KAAKi4B,QAGLj4B,KAAK4mE,SAAW,GAChB5mE,KAAK2mE,KAAK5jE,SAAQ,CAACk2D,EAAI/hE,KACrB,IAAI2vE,GAAW,EACf,IAAK,MAAMt4C,KAAS0qC,EAAGxgE,KAAK40C,OAC1B,IACKrtC,KAAK8mE,QAAQv4C,KACsC,IAAjDvuB,KAAKmvB,MAAM43C,kBAAkBzsE,QAAQi0B,GAC1C,CACAs4C,GAAW,EACX,K,CAGAA,GACF7mE,KAAK4mE,SAASlmE,KAAKxJ,E,GAErB,GAEN,CAEA+gC,QACEj4B,KAAK8mE,QAAU9mE,KAAKmvB,MAAM2pC,YAAY9+B,KAAI9iC,GAAKA,EAAEm3C,QACnD,CAEA/V,cAAc0uC,EAAgCC,GAC5C,OAAOjnE,KAAKi1D,SAASK,MAAM,UAAW,yBAAyBh9B,UAE7Dt4B,KAAKi4B,QAGL,MAAM0f,EAAmBqvB,EAAetO,yBAGlCwO,EAAclnE,KAAKmvB,MAAM43C,kBAC/B,GAAIE,EAAY5tE,SAAW6tE,EAAY7tE,OACrC,MAAM,IAAImF,MAAM,kFACZyoE,EAAY5tE,oBAAoB6tE,EAAY7tE,UAGlD4tE,EAAYlkE,SAAQ,CAACwrB,EAAOr3B,KAC1B,MAAMmc,EAAQ6zD,EAAYhwE,GAC1B8I,KAAK8mE,QAAQzzD,GAASkb,CAAK,IAI7B,MAAM44C,EAAqBnnE,KAAK4mE,SAASrtE,MAAM,GAGzC6tE,EAAcpnE,KAAKmvB,MAAM2pC,YACzBlxB,EAAa5nC,KAAKmvB,MAAMu3C,WAE9B,IAAIW,EAAO,EACX,KAAOA,EAAOF,EAAS9tE,QAAQ,CAC7B,MAAMiuE,EAAcH,EAASE,KACvBE,EAASvnE,KAAK2mE,KAAKW,GAGnBE,EAAYD,EAAO9uE,KAAK40C,OAAOrT,KAAI9iC,GAAK8I,KAAK8mE,QAAQ5vE,KAC3D,IAAsC,IAAlCswE,EAAUltE,aAAQ0Y,GACpB,MAAM,IAAIxU,MAAM,kCAAkC+oE,EAAO9uE,QAI3D,MAAMgvE,EAAeD,EACrB,EAAAhpC,OAAOE,QACH,WACA,aAAa6oC,EAAO9uE,KAAKwH,SACrBwnE,EAAaztC,KAAI,CAACtjC,EAAGQ,IAAM,IAAIqwE,EAAO9uE,KAAK40C,OAAOn2C,QAAQR,EAAEq1B,QAAQr1B,EAAEm5B,KAAKzb,KAAK,UAASA,KAAK,UAEtG,MAAMszD,QAAmB1nE,KAAKi1D,SAASK,MACnC,OAAQiS,EAAO9uE,KAAKwH,MAAMq4B,SAAYivC,EAAOtO,GAAGE,KAAKxhB,EAAkB8vB,EAAcF,EAAOtO,GAAGr6B,WAGnG,GAAI8oC,EAAWruE,SAAWkuE,EAAO9uE,KAAK04D,QAAQ93D,OAC5C,MAAM,IAAImF,MAAM,uDAIlBkpE,EAAW3kE,SAAQ,CAACyrB,EAAQt3B,KAC1B,MAAM4F,EAAIyqE,EAAO9uE,KAAK04D,QAAQj6D,GAC9B,GAAI8I,KAAK8mE,QAAQhqE,GACf,MAAM,IAAI0B,MAAM,WAAW1B,4BAA4ByqE,EAAO9uE,KAAKwH,QAErED,KAAK8mE,QAAQhqE,GAAK0xB,CAAM,IAI1B,MAAMm5C,EAAkB,IAAIlgC,IAC5BigC,EAAW3kE,SAAQ,CAACyrB,EAAQt3B,KAC1B,MAAM4F,EAAIyqE,EAAO9uE,KAAK04D,QAAQj6D,GAC9B,IAAK,MAAM0wE,KAA8BR,EAAYtqE,GAAGo9C,GAAI,CAC1D,MAAM2tB,EAAwBjgC,EAAWggC,GACzC,IAAIf,GAAW,EACf,IAAK,MAAMxwE,KAAKwxE,EAAsBx6B,OACpC,IAAKrtC,KAAK8mE,QAAQzwE,GAAI,CACpBwwE,GAAW,EACX,K,CAGAA,GACFc,EAAgBjjD,IAAIkjD,E,KAI1BT,EAASzmE,QAAQinE,E,CAGnB,MAAMn5C,EAAmB,GACzB,IAAK,IAAIt3B,EAAI,EAAGA,EAAI8I,KAAKmvB,MAAM24C,mBAAmBzuE,OAAQnC,IAAK,CAC7D,MAAM6wE,EAAc/nE,KAAKmvB,MAAM24C,mBAAmB5wE,GAC5C8wE,EAAehoE,KAAK8mE,QAAQiB,GAClC,QAAqB/0D,IAAjBg1D,EACF,MAAM,IAAIxpE,MAAM,oBAAoBupE,0BAElB,IAAhBA,QACIC,EAAaC,UAGnBD,EAAa9kE,KAEfsrB,EAAO9tB,KAAKsnE,E,CAId,OAFA,EAAAxpC,OAAOE,QAAQ,WAAY,iCAC3BiZ,EAAiBja,UACVlP,CAAM,GAEjB,E,8FCvJF,gBAEA,UACA,UACA,UACA,UAEA,IAAO0L,EAAS,EAAAC,YAAYC,aAAaC,IAmE5B,EAAA6tC,MAAQ,CAInBtzC,KAAM,CAACuzC,EAA2Cz4C,IAC9C,IAAI04C,EAAUD,EAAYz4C,IAGhC,MAAM24C,EACJn6C,YAAYyB,GACV3vB,KAAKsoE,WAAQt1D,EACbhT,KAAKuoE,IAAM,GACXvoE,KAAKquC,YAASr7B,EACdhT,KAAK+rB,UAAO/Y,EAER2c,IACF3vB,KAAK+rB,KAAO,EAAAouB,UAAUquB,yBAAyB74C,EAAU5D,KAAM0F,YAEnE,CAGImD,WACF,OAAO50B,KAAKsoE,KACd,CAEIpuB,SACF,OAAOl6C,KAAKuoE,GACd,EAKF,MAAME,EACJv6C,YAAYw6C,EAAyCzoE,GAC/CyoE,aAAsB,EAAA/9C,KAAK2D,WAC7BtuB,KAAKC,KAAOyoE,EAAWzoE,KACvBD,KAAK0uB,OAASg6C,EAAWh6C,OACzB1uB,KAAKu6B,WAAa,IAAI,EAAAD,UAAUouC,EAAWj6C,YAClCi6C,aAAsBxuC,EAAOuuC,OACtCzoE,KAAKC,KAAOA,UAAQyoE,EAAWzoE,OAC/BD,KAAK0uB,OAASg6C,EAAWh6C,SACzB1uB,KAAKu6B,WAAa,IAAI,EAAAD,UAAU,EAAA6f,UAAUwuB,8BAA8BD,KAG1E1oE,KAAKqtC,OAAS,GACdrtC,KAAKmxD,QAAU,GACfnxD,KAAK4oE,aAAc,CACrB,EAUF,MAAMR,EAWJl6C,YAAYiB,EAAsC05C,GAChD,IAAK15C,EACH,MAAM,IAAIvN,UAAU,kBAItB5hB,KAAK8oE,WAAW35C,GAGhBnvB,KAAK+oE,eAAeF,GAGpB7oE,KAAKgpE,gBACP,CAEAjC,kBACE,OAAO/mE,KAAKipE,gBACd,CAEAC,gBACE,OAAOlpE,KAAKmpE,cACd,CAEArB,mBACE,OAAO9nE,KAAKopE,iBACd,CAEAC,iBACE,OAAOrpE,KAAKspE,eACd,CAEAxQ,YACE,OAAO94D,KAAKupE,QACd,CAEA7C,WACE,OAAO1mE,KAAKwpE,MACd,CAEQV,WAAW35C,GAEjB,GAAIA,aAAiB,EAAAxE,KAAK+B,WACxB1sB,KAAKypE,yBAAyBt6C,OACzB,MAAIA,aAAiB+K,EAAOguC,OAGjC,MAAM,IAAItmD,UAAU,gCAFpB5hB,KAAK0pE,wBAAwBv6C,E,CAIjC,CACQs6C,yBAAyBt6C,GAC/B,MAAMw6C,EAAc,IAAIlvC,IACxBz6B,KAAKupE,SAAW,GAEhBvpE,KAAKipE,iBAAmB,GACxBjpE,KAAKmpE,eAAiB,GAEtBnpE,KAAKopE,kBAAoB,GACzBppE,KAAKspE,gBAAkB,GAEvBtpE,KAAKwpE,OAAS,GAEd,MAAMI,EAAe,IAAInvC,IAGzB,IAAKtL,EAAMZ,MACT,MAAM,IAAI/vB,MAAM,uCAElB,MAAMqrE,EAAkB,GACxB,IAAK,MAAM3yE,KAAKi4B,EAAMZ,MAAO,CAC3B,GAAIo7C,EAAY5hC,IAAI7wC,EAAE+I,MACpB,MAAM,IAAIzB,MAAM,0BAA0BtH,EAAE+I,QAE9C,MAAM6pE,EAAe9pE,KAAKupE,SAAS7oE,KAAK,IAAI2nE,EAAMnxE,IAAM,EACxDyyE,EAAY1+D,IAAI/T,EAAE+I,KAAO6pE,GACzBD,EAAgBnpE,KAAKxJ,EAAE+I,K,CAIzB,IAAKkvB,EAAMO,YACT,MAAM,IAAIlxB,MAAM,6CAElB,IAAK,MAAMtH,KAAKi4B,EAAMO,YAAa,CACjC,IAAIrc,EAAQs2D,EAAY/hE,IAAI1Q,EAAE+I,MAC9B,QAAc+S,IAAVK,EAAqB,CACvB,MAAM4I,EAAQ,IAAIosD,EAClBpsD,EAAM8P,KAAO,CACX6F,MAAO,CAAC/B,KAAM,EAAAsqB,UAAU4vB,oBAAoB7yE,EAAE24B,OAC9C4B,WAAY,EAAA0oB,UAAUC,wBAAwBljD,EAAEm5B,WAElDhd,EAAQrT,KAAKupE,SAAS7oE,KAAKub,GAAS,EACpC0tD,EAAY1+D,IAAI/T,EAAE+I,KAAOoT,E,CAE3BrT,KAAKupE,SAASl2D,GAAOi1D,OAAS,EAC9BtoE,KAAKupE,SAASl2D,GAAOg7B,OAAS,EAAA3c,OAAO+K,UAAUvlC,E,CAIjD,IAAK,IAAIA,EAAI,EAAGA,EAAI8I,KAAKupE,SAASlwE,OAAQnC,IACnC8I,KAAKupE,SAASryE,GAAGm3C,SACpBruC,KAAKipE,iBAAiBvoE,KAAKxJ,GAC3B8I,KAAKmpE,eAAezoE,KAAKmpE,EAAgB3yE,KAK7C,IAAKi4B,EAAMX,OACT,MAAM,IAAIhwB,MAAM,wCAElB,IAAK,MAAMtH,KAAKi4B,EAAMX,OAAQ,CAC5B,GAAIm7C,EAAY5hC,IAAI7wC,EAAE+I,MACpB,MAAM,IAAIzB,MAAM,2BAA2BtH,EAAE+I,QAE/C,MAAM6pE,EAAe9pE,KAAKupE,SAAS7oE,KAAK,IAAI2nE,EAAMnxE,IAAM,EACxDyyE,EAAY1+D,IAAI/T,EAAE+I,KAAO6pE,GACzB9pE,KAAKopE,kBAAkB1oE,KAAKopE,GAC5B9pE,KAAKspE,gBAAgB5oE,KAAKxJ,EAAE+I,K,CAI9B,IAAKkvB,EAAM12B,KACT,MAAM,IAAI+F,MAAM,sCAElB,IAAK,MAAMwrE,KAAa76C,EAAM12B,KAAM,CAClC,IAAKuxE,EAAU/pE,KAEb,IAAK,IAAIgqE,EAAO,GAAIA,IAAQ,CAC1B,MAAMhqE,EAAO,WAAW+pE,EAAUt7C,UAAUu7C,IAC5C,IAAKL,EAAa7hC,IAAI9nC,GAAO,CAC3B+pE,EAAU/pE,KAAOA,EACjB,K,EAKN,GAAI2pE,EAAa7hC,IAAIiiC,EAAU/pE,MAC7B,MAAM,IAAIzB,MAAM,yBAAyBwrE,EAAU/pE,QAErD,MAAM6pE,EAAe9pE,KAAKwpE,OAAO9oE,KAAK,IAAI+nE,EAAKuB,IAAc,EAC7DJ,EAAa3+D,IAAI++D,EAAU/pE,KAAM6pE,E,CAInC,IAAK,IAAI5yE,EAAI,EAAGA,EAAI8I,KAAKwpE,OAAOnwE,OAAQnC,IAAK,CAC3C,MAAMuB,EAAOuH,KAAKwpE,OAAOtyE,GACnB8yE,EAAY76C,EAAM12B,KAAKvB,GAC7B,IAAK8yE,EAAUx7C,OACb,MAAM,IAAIhwB,MAAM,4BAA4BwrE,EAAU/pE,QAExD,IAAK,MAAMuuB,KAAUw7C,EAAUx7C,OAAQ,CACrC,IAAI07C,EAAYP,EAAY/hE,IAAI4mB,GAOhC,QANyB,IAAd07C,IACTA,EAAYlqE,KAAKupE,SAAS7oE,KAAK,IAAI2nE,GAAW,EAC9CsB,EAAY1+D,IAAIujB,EAAQ07C,IAE1BzxE,EAAK04D,QAAQzwD,KAAKwpE,QAEqBl3D,IAAnChT,KAAKupE,SAASW,GAAW5B,MAC3B,MAAM,IAAI9pE,MAAM,4CAA4C0rE,KAM9D,GAJAlqE,KAAKupE,SAASW,GAAW5B,MAAQpxE,EAIR,aAArB8yE,EAAUt7C,OAAuB,CACnC,IAAKs7C,EAAUv7C,WAA4C,IAA/Bu7C,EAAUv7C,UAAUp1B,SAAiB2wE,EAAUv7C,UAAU,GAAG/3B,EACtF,MAAM,IAAI8H,MAAM,uFAElB,IAAKwrE,EAAUx7C,QAAsC,IAA5Bw7C,EAAUx7C,OAAOn1B,OACxC,MAAM,IAAImF,MAAM,4EAElB/F,EAAK04D,QAAQ/sD,MACb3L,EAAKmwE,aAAc,EAEnB5oE,KAAKupE,SAASW,GAAW5B,OAAS,EAClCtoE,KAAKupE,SAASW,GAAW77B,OAAS,EAAA3c,OAAO+K,UAAUutC,EAAUv7C,UAAU,GAAG/3B,E,GAMhF,IAAK,IAAIQ,EAAI,EAAGA,EAAI8I,KAAKwpE,OAAOnwE,OAAQnC,IAAK,CAC3C,MAAMuB,EAAOuH,KAAKwpE,OAAOtyE,GACnB8yE,EAAY76C,EAAM12B,KAAKvB,GAE7B,IAAK8yE,EAAUz7C,MACb,MAAM,IAAI/vB,MAAM,2BAA2BwrE,EAAU/pE,QAEvD,IAAK,MAAMsuB,KAASy7C,EAAUz7C,MAAO,CACnC,MAAM27C,EAAYP,EAAY/hE,IAAI2mB,GAClC,QAAyB,IAAd27C,EACT,MAAM,IAAI1rE,MAAM,uBAAuB+vB,gBAAoBy7C,EAAU/pE,QAEvExH,EAAK40C,OAAO3sC,KAAKwpE,GAEjBlqE,KAAKupE,SAASW,GAAW3B,IAAI7nE,KAAKxJ,E,EAItC,OAAO,CACT,CAEQwyE,wBAAwBv6C,G,UAC9B,MAAMw6C,EAAc,IAAIlvC,IACxBz6B,KAAKupE,SAAW,GAEhBvpE,KAAKipE,iBAAmB,GACxBjpE,KAAKmpE,eAAiB,GAEtBnpE,KAAKopE,kBAAoB,GACzBppE,KAAKspE,gBAAkB,GAEvBtpE,KAAKwpE,OAAS,GAEd,MAAMI,EAAe,IAAInvC,IAGnBovC,EAAkB,GACxB,IAAK,IAAI3yE,EAAI,EAAGA,EAAIi4B,EAAMg7C,eAAgBjzE,IAAK,CAC7C,MAAMkzE,EAAYj7C,EAAMke,OAAOn2C,GAC/B,GAAIyyE,EAAY5hC,IAAIqiC,GAClB,MAAM,IAAI5rE,MAAM,0BAA0B4rE,KAG5C,IAAK,IAAIttE,EAAI,EAAGA,EAAIqyB,EAAMk7C,iBAAkBvtE,IAC1C,IAAqB,QAAjB,EAAAqyB,EAAMm7C,SAASxtE,UAAE,eAAEmD,UAAWmqE,EAAW,CAC3C,MAAMnuD,EAAQ,IAAIosD,EAElB,IAD2C,QAAzB,EAAiB,QAAjB,EAAAl5C,EAAMm7C,SAASxtE,UAAE,eAAEivB,cAAM,eAAEw+C,eAC3BrwC,EAAOswC,cAAcC,YACrC,MAAM,IAAIjsE,MAAM,0CAElB,MAAMmxB,EAAYR,EAAMm7C,SAASxtE,GAAIivB,OAAQ9P,MAAM,IAAIie,EAAOwwC,oBACxD3+C,EAAO,EAAAouB,UAAUC,wBAAwBzqB,EAAUgC,YACnDC,EAAQjC,EAAUiC,QAClB/B,EAAO,GACb,IAAK,IAAIx5B,EAAI,EAAGA,EAAIu7B,EAAM+4C,YAAct0E,IACtCw5B,EAAKnvB,KAAK,EAAA07B,SAASC,aAAazK,EAAMZ,IAAI36B,GAAI4lB,QAASkV,aAEzDlV,EAAM8P,KAAO,CAAC6F,MAAO,CAAC/B,QAAO4B,WAAY1F,GACzC,MAAM+9C,EAAe9pE,KAAKupE,SAAS7oE,KAAKub,GAAS,EACjD0tD,EAAY1+D,IAAIm/D,EAAWN,GAC3BD,EAAgBnpE,KAAK0pE,E,EAK3B,IAAK,IAAIlzE,EAAI,EAAGA,EAAIi4B,EAAMy7C,qBAAsB1zE,IAAK,CACnD,MAAMw4B,EAAcP,EAAM0pC,aAAa3hE,GACvC,IAAImc,EAAQs2D,EAAY/hE,IAAI8nB,EAAYzvB,QACxC,QAAc+S,IAAVK,EAAqB,CACvB,MAAM4I,EAAQ,IAAIosD,EACZx4C,EAAO,EAAAsqB,UAAU0wB,wBAAwBn7C,GACzC3D,EAAO,EAAAouB,UAAUC,wBAAwB1qB,EAAYW,YAC3DpU,EAAM8P,KAAO,CAAC6F,MAAO,CAAC/B,QAAO4B,WAAY1F,GACzC1Y,EAAQrT,KAAKupE,SAAS7oE,KAAKub,GAAS,EACpC0tD,EAAY1+D,IAAIykB,EAAYzvB,OAASoT,E,CAEvCrT,KAAKupE,SAASl2D,GAAOi1D,OAAS,EAC9BtoE,KAAKupE,SAASl2D,GAAOg7B,OAAS,EAAA3c,OAAOgL,cAAchN,E,CAIrD,IAAK,IAAIx4B,EAAI,EAAGA,EAAI8I,KAAKupE,SAASlwE,OAAQnC,IACnC8I,KAAKupE,SAASryE,GAAGm3C,SACpBruC,KAAKipE,iBAAiBvoE,KAAKxJ,GAC3B8I,KAAKmpE,eAAezoE,KAAKmpE,EAAgB3yE,KAK7C,IAAK,IAAIA,EAAI,EAAGA,EAAIi4B,EAAM27C,gBAAiB5zE,IAAK,CAC9C,MAAM6zE,EAAa57C,EAAMgiC,QAAQj6D,GACjC,GAAIyyE,EAAY5hC,IAAIgjC,GAClB,MAAM,IAAIvsE,MAAM,2BAA2BusE,KAE7C,MAAMjB,EAAe9pE,KAAKupE,SAAS7oE,KAAK,IAAI2nE,GAAW,EACvDsB,EAAY1+D,IAAI8/D,EAAYjB,GAC5B9pE,KAAKopE,kBAAkB1oE,KAAKopE,GAC5B9pE,KAAKspE,gBAAgB5oE,KAAKqqE,E,CAI5B,IAAK57C,EAAMoY,MACT,MAAM,IAAI/oC,MAAM,sCAElB,IAAK,IAAItH,EAAI,EAAGA,EAAIi4B,EAAM67C,cAAe9zE,IAAK,CAC5C,MAAM8yE,EAAY76C,EAAMoY,MAAMrwC,GAC9B,IAAI+I,EAAO+pE,EAAW/pE,OACtB,IAAKA,EAEH,IAAK,IAAIgqE,EAAO,EACdhqE,EAAO,WAAW+pE,EAAWt7C,YAAYu7C,IACpCL,EAAa7hC,IAAI9nC,GAFJgqE,KAStB,GAAIL,EAAa7hC,IAAI9nC,GACnB,MAAM,IAAIzB,MAAM,yBAAyByB,KAE3C,MAAM6pE,EAAe9pE,KAAKwpE,OAAO9oE,KAAK,IAAI+nE,EAAKuB,EAAY/pE,IAAS,EACpE2pE,EAAa3+D,IAAIhL,EAAM6pE,E,CAIzB,IAAK,IAAI5yE,EAAI,EAAGA,EAAI8I,KAAKwpE,OAAOnwE,OAAQnC,IAAK,CAC3C,MAAMuB,EAAOuH,KAAKwpE,OAAOtyE,GACnB8yE,EAAY76C,EAAMoY,MAAMrwC,GAC9B,GAAiB,MAAb8yE,EACF,MAAM,IAAIxrE,MAAM,2BAA2BtH,KAE7C,GAAmC,KAA/B8yE,aAAS,EAATA,EAAWc,iBACb,MAAM,IAAItsE,MAAM,4BAA4BwrE,EAAU/pE,QAExD,IAAK,IAAInD,EAAI,EAAGA,GAAIktE,aAAS,EAATA,EAAWc,iBAAiBhuE,IAAK,CACnD,MAAM0xB,EAASw7C,aAAS,EAATA,EAAW7Y,QAAQr0D,GAClC,IAAIotE,EAAYP,EAAY/hE,IAAI4mB,GAOhC,QANyB,IAAd07C,IACTA,EAAYlqE,KAAKupE,SAAS7oE,KAAK,IAAI2nE,GAAW,EAC9CsB,EAAY1+D,IAAIujB,EAAQ07C,IAE1BzxE,EAAK04D,QAAQzwD,KAAKwpE,QAEqBl3D,IAAnChT,KAAKupE,SAASW,GAAW5B,MAC3B,MAAM,IAAI9pE,MAAM,4CAA4C0rE,KAM9D,GAJAlqE,KAAKupE,SAASW,GAAW5B,MAAQpxE,EAIN,aAAvB8yE,EAAUt7C,SAAyB,CACrC,GAAqC,IAAjCs7C,EAAUiB,qBAA6BjB,EAAUzvC,WAAW,GAAI7jC,IAClE,MAAM,IAAI8H,MAAM,uFAElB,GAAkC,IAA9BwrE,EAAUc,gBACZ,MAAM,IAAItsE,MAAM,4EAElB/F,EAAK04D,QAAQ/sD,MACb3L,EAAKmwE,aAAc,EAEnB5oE,KAAKupE,SAASW,GAAW5B,OAAS,EAClCtoE,KAAKupE,SAASW,GAAW77B,OAAS,EAAA3c,OAAOgL,cAAcstC,EAAUzvC,WAAW,GAAI7jC,I,GAMtF,IAAK,IAAIQ,EAAI,EAAGA,EAAI8I,KAAKwpE,OAAOnwE,OAAQnC,IAAK,CAC3C,MAAMuB,EAAOuH,KAAKwpE,OAAOtyE,GACnB8yE,EAAY76C,EAAMoY,MAAMrwC,GAE9B,GAAiC,IAA7B8yE,EAAUG,eACZ,MAAM,IAAI3rE,MAAM,2BAA2BwrE,EAAU/pE,QAEvD,IAAK,IAAInD,EAAI,EAAGA,EAAIktE,EAAUG,eAAiBrtE,IAAK,CAClD,MAAMyxB,EAAQy7C,EAAU38B,OAAOvwC,GACzBotE,EAAYP,EAAY/hE,IAAI2mB,GAClC,QAAyB,IAAd27C,EACT,MAAM,IAAI1rE,MAAM,uBAAuB+vB,gBAAoBy7C,EAAW/pE,UAExExH,EAAK40C,OAAO3sC,KAAKwpE,GAEjBlqE,KAAKupE,SAASW,GAAW3B,IAAI7nE,KAAKxJ,E,EAGxC,CAEQ8xE,iBAEN,MAAMkC,EAAwB,IAAIzjC,IAClCznC,KAAKipE,iBAAiBlmE,SAAQ7L,IACf8I,KAAKupE,SAASryE,GACtBqxE,IAAIxlE,SAAQjG,IACfouE,EAASxmD,IAAI5nB,EAAE,GACf,IAIJ,MAAMquE,EAAangE,MAAM4pB,KAAKs2C,GACxBE,EAAa,IAAIpgE,MAAchL,KAAKwpE,OAAOnwE,QAAQmhD,KAAK,SAE9D,KAAO2wB,EAAW9xE,OAAS,GAAG,CAC5B,MAAMgyE,EAAYF,EAAW/mE,MAEC,SAA1BgnE,EAAWC,GACbD,EAAWC,GAAa,SAGxBF,EAAWzqE,KAAK2qE,GAChBD,EAAWC,GAAa,OAExBrrE,KAAKwpE,OAAO6B,GAAWla,QAAQpuD,SAASuoE,IACtC,MAAMpoE,EAAOlD,KAAKupE,SAAS+B,GAC3B,QAA2B,IAAhBpoE,EAAKmrC,OACd,MAAM,IAAI7vC,MAAM,0CAElB,GAAI0E,EAAKolE,QAAU+C,EACjB,MAAM,IAAI7sE,MAAM,iFAElB0E,EAAKqlE,IAAIxlE,SAASwoE,IAEhB,GAAwC,SAApCH,EAAWG,GACb,MAAM,IAAI/sE,MAAM,yBAG2B,UAApC4sE,EAAWG,IAClBJ,EAAWzqE,KAAK6qE,E,GAElB,I,CAIV,CAEQxC,eAAeF,GAErB7oE,KAAKwrE,yBACLxrE,KAAKyrE,wBACLzrE,KAAK0rE,0BAED7C,GACFA,EAAiBE,eAAe/oE,MAIlCA,KAAK2rE,eACP,CAQAA,gBACE,IAAIv4D,EAAS,EAEb,IAAK,IAAIlc,EAAI,EAAGA,EAAI8I,KAAKwpE,OAAOnwE,OAAQnC,IACjC8I,KAAKwpE,OAAOtyE,GAAG0xE,YAWhBx1D,EAAS,IAEXpT,KAAKwpE,OAAOtyE,GAAGm2C,OAAOtqC,SAAQkZ,IAC5B,MAAM2vD,EAAM5rE,KAAKupE,SAASttD,GAAOssD,IAAIjuE,QAAQpD,EAAIkc,IACpC,IAATw4D,IACF5rE,KAAKupE,SAASttD,GAAOssD,IAAIqD,GAAO10E,E,IAGpC8I,KAAKwpE,OAAOtyE,GAAGi6D,QAAQpuD,SAAQkZ,IACzBjc,KAAKupE,SAASttD,GAAOqsD,OAAStoE,KAAKupE,SAASttD,GAAOqsD,QAAWpxE,EAAIkc,IACpEpT,KAAKupE,SAASttD,GAAOqsD,MAASpxE,E,MAnBlCkc,IAEApT,KAAKwpE,OAAOtyE,GAAGi6D,QAAQpuD,SAAQ6oE,IAC7B5rE,KAAKupE,SAASqC,GAAKtD,OAAS,CAAC,IAE/BtoE,KAAKwpE,OAAO3mE,OAAO3L,EAAG,GACtBA,KAkBJkc,EAAS,EAET,IAAK,IAAIlc,EAAI,EAAGA,EAAI8I,KAAKupE,SAASlwE,OAAQnC,IAExC,IAA+B,IAA3B8I,KAAKupE,SAASryE,GAAG09B,OAA+D,IAAhD50B,KAAKopE,kBAAkB9uE,QAAQpD,EAAIkc,IAMvE,GAAIA,EAAS,EAAG,CACd,IAAIw4D,GAAO,OAGmB54D,IAA1BhT,KAAKupE,SAASryE,GAAG09B,OAAiD,IAA3B50B,KAAKupE,SAASryE,GAAG09B,MAC1Dg3C,EAAM5rE,KAAKwpE,OAAOxpE,KAAKupE,SAASryE,GAAG09B,MAAMu8B,QAAQ72D,QAAQpD,EAAIkc,IAChD,IAATw4D,IACF5rE,KAAKwpE,OAAOxpE,KAAKupE,SAASryE,GAAG09B,MAAMu8B,QAAQya,GAAO10E,KAIpD00E,EAAM5rE,KAAKipE,iBAAiB3uE,QAAQpD,EAAIkc,IAC3B,IAATw4D,IACF5rE,KAAKipE,iBAAiB2C,GAAO10E,IAKjC8I,KAAKupE,SAASryE,GAAGgjD,GAAGn3C,SAAQtK,IAC1BmzE,EAAM5rE,KAAKwpE,OAAO/wE,GAAM40C,OAAO/yC,QAAQpD,EAAIkc,IAC9B,IAATw4D,IACF5rE,KAAKwpE,OAAO/wE,GAAM40C,OAAOu+B,GAAO10E,E,IAGD,IAA/B8I,KAAKupE,SAASryE,GAAGgjD,GAAG7gD,SAEtBuyE,EAAM5rE,KAAKopE,kBAAkB9uE,QAAQpD,EAAIkc,IAC5B,IAATw4D,IACF5rE,KAAKopE,kBAAkBwC,GAAO10E,G,OAjClCkc,IACApT,KAAKupE,SAAS1mE,OAAO3L,EAAG,GACxBA,GAoCN,CAOQ20E,WAAWR,GACjB,MAAM5yE,EAAOuH,KAAKwpE,OAAO6B,GACzB,GAAI5yE,EAAK04D,QAAQ93D,OAAS,EACxB,IAAK,IAAInC,EAAI,EAAGA,EAAIuB,EAAK04D,QAAQ93D,OAAQnC,IACvC,GAAI8I,KAAKupE,SAAS9wE,EAAK04D,QAAQj6D,IAAIgjD,GAAG7gD,OAAS,EAC7C,MAAM,IAAImF,MAAM,uFAMtB/F,EAAKmwE,aAAc,EACnB,MAAMkD,EAAkBrzE,EAAK40C,OAAO,GAC9B0+B,EAAmBtzE,EAAK04D,QAAQ,GAChC6a,EAAuBhsE,KAAKupE,SAASwC,GAAkB7xB,GAGvD+xB,EAAWjsE,KAAKupE,SAASuC,GAAiB5xB,GAAG5/C,QAAQ+wE,GAE3D,IAAkB,IAAdY,EACF,MAAM,IAAIztE,MAAM,yEAElBwB,KAAKupE,SAASuC,GAAiB5xB,GAAGr3C,OAAOopE,EAAU,GAGnDjsE,KAAKupE,SAASwC,GAAkBxD,IAAM,GAGtC,MAAMl1D,EAAQrT,KAAKopE,kBAAkB9uE,QAAQyxE,GAM7C,IALe,IAAX14D,IACFrT,KAAKopE,kBAAkB/1D,GAASy4D,GAI9BE,GAAwBA,EAAqB3yE,OAAS,EACxD,IAAK,MAAMgyE,KAAaW,EAAsB,CAC5C,MAAME,EAAelsE,KAAKwpE,OAAO6B,GAAWh+B,OAAO/yC,QAAQyxE,GAE3D,IAAsB,IAAlBG,EACF,MAAM,IAAI1tE,MAAM,4EAElBwB,KAAKwpE,OAAO6B,GAAWh+B,OAAO6+B,GAAgBJ,EAC9C9rE,KAAKupE,SAASuC,GAAiB5xB,GAAGx5C,KAAK2qE,E,CAG7C,CAEAI,wBACE,IAAIJ,EAAY,EAChB,IAAK,MAAM5yE,KAAQuH,KAAKwpE,OAAQ,CAE9B,GAAoB,YAAhB/wE,EAAKi2B,OAAsB,CAE7B,GAA2B,IAAvBj2B,EAAK40C,OAAOh0C,OACd,MAAM,IAAImF,MAAM,iDAElB,GAA4B,IAAxB/F,EAAK04D,QAAQ93D,QAAwC,IAAxBZ,EAAK04D,QAAQ93D,OAC5C,MAAM,IAAImF,MAAM,wDAGlB,GAA4B,IAAxB/F,EAAK04D,QAAQ93D,QAA8D,IAA9C2G,KAAKupE,SAAS9wE,EAAK04D,QAAQ,IAAIoX,IAAIlvE,OAClE,MAAM,IAAImF,MAAM,yEAElBwB,KAAK6rE,WAAWR,E,CAElBA,G,CAEJ,CAEAG,yBACE,IAAIH,EAAY,EAChB,IAAK,MAAM5yE,KAAQuH,KAAKwpE,OAEF,aAAhB/wE,EAAKi2B,QACP1uB,KAAK6rE,WAAWR,GAElBA,GAEJ,CAEAc,aAAa/1E,GACX,OAAQA,EAAEs4B,QAER,IAAK,OACL,IAAK,UACL,IAAK,OACH,OAAO,EACT,QACE,OAAO,EAEb,CAEAg9C,0BACE,IAAK,MAAMjzE,KAAQuH,KAAKwpE,OACtB,GAAoB,SAAhB/wE,EAAKi2B,OAAmB,CAC1B,MAAM2I,EAAOr3B,KAAKupE,SAAS9wE,EAAK04D,QAAQ,IAAIoX,IAC5C,GAAoB,IAAhBlxC,EAAKh+B,QAAgB2G,KAAKmsE,aAAansE,KAAKwpE,OAAOnyC,EAAK,KAAM,CAChE,MAAM+0C,EAAQpsE,KAAKwpE,OAAOnyC,EAAK,IAC/B,GAAqB,SAAjB+0C,EAAM19C,OACR,GAA4B,IAAxB09C,EAAM/+B,OAAOh0C,OACf,IACEZ,EAAK8hC,WAAWtvB,IACZ,oBAAqB,SACrB,CAACmhE,EAAM7xC,WAAWO,SAAS,OAAQsxC,EAAM7xC,WAAWO,SAAS,Q,CACjE,MAAO/kC,GACP0C,EAAK8hC,WAAWtvB,IAAI,oBAAqB,SAAU,CAAC,EAAAk4C,SAAU,EAAAC,U,KAE3D,MACHgpB,EAAM/+B,OAAOh0C,QAAU,QAA+C2Z,IAA1ChT,KAAKupE,SAAS6C,EAAM/+B,OAAO,IAAIgB,aACjBr7B,IAA1ChT,KAAKupE,SAAS6C,EAAM/+B,OAAO,IAAIgB,QAMjC,SALA51C,EAAK8hC,WAAWtvB,IAAI,oBAAqB,SAAU,CACjDjL,KAAKupE,SAAS6C,EAAM/+B,OAAO,IAAIgB,OAAQve,UAAU,GAAI9vB,KAAKupE,SAAS6C,EAAM/+B,OAAO,IAAIgB,OAAQve,UAAU,I,CAO5Gr3B,EAAK8hC,WAAWtvB,IAAI,aAAc,SAAWmhE,EAAY,QACzDpsE,KAAK6rE,WAAWx0C,EAAK,G,EAI7B,E,8GCzpBF,MAAMg1C,EAAiB,CACrB3tC,QAAS,IACT4tC,KAAM,IACN3tC,QAAS,IACT3kC,MAAO,IACPuyE,MAAO,KAGHC,EAA+E,CACnF,KAAU,IAtCZ,MACEpxE,IAAIqxE,EAA4BC,EAAkBC,GAElD,GAoCA,QAAa,IAlCf,MACEvxE,IAAIwxE,EAA2BC,EAAiBC,GAE9C/yE,QAAQqB,IAAI,GAAG4E,KAAK+sE,MAAMH,MAAaE,EAAW,QAAaA,EAAW,QAAa,KAAKD,IAC9F,CAEQE,MAAMH,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,gBACT,IAAK,OACH,MAAO,aACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,gBACT,IAAK,QACH,MAAO,cACT,QACE,MAAM,IAAIpuE,MAAM,yBAAyBouE,KAE/C,IAeII,EAAwB,CAC5BC,SAAU,UACVC,gBAAiB,UACjBC,aAAa,EACbC,mBAAmB,GAErB,IAAIC,EAC0D,CAAC,GAAML,GAMrE,SAAS5xE,EACLkyE,EAA8BC,EAAeC,EAAsBC,GACrE,QAAaz6D,IAATu6D,EAEF,OAkB6BT,EAlBEQ,EAmB1B,CACL5uC,QAAStjC,EAAIsjC,QAAQrjC,KAAK,KAAMyxE,GAChCR,KAAMlxE,EAAIkxE,KAAKjxE,KAAK,KAAMyxE,GAC1BnuC,QAASvjC,EAAIujC,QAAQtjC,KAAK,KAAMyxE,GAChC9yE,MAAOoB,EAAIpB,MAAMqB,KAAK,KAAMyxE,GAC5BP,MAAOnxE,EAAImxE,MAAMlxE,KAAK,KAAMyxE,IAvBvB,QAAa95D,IAATw6D,EAETE,EAAYJ,EAAyBC,QAChC,GAAoB,iBAATC,QAA8Bx6D,IAATy6D,EAErCC,EAAYJ,EAAyBC,QAChC,GAAoB,iBAATC,QAA8Bx6D,IAATy6D,EAErCC,EAAYJ,EAAyBE,EAAM,EAAGD,OACzC,IAAoB,iBAATC,GAAqC,iBAATC,EAI5C,MAAM,IAAI7rD,UAAU,kBAFpB8rD,EAAYJ,EAAyBE,EAAMC,EAAMF,E,CAMrD,IAAiCT,CAFjC,CAeA,SAASY,EAAYd,EAA2BC,EAAiBn3C,EAAeo3C,GAC9E,MAAMvR,EAAS8R,EAAkBP,GAAY,KAAOO,EAAkB,IAClEhB,EAAeO,GAAYP,EAAe9Q,EAAO2R,mBAIjD3R,EAAO4R,cACTN,EAAU,IAAG,IAAI3lE,MAAOymE,iBAAiBd,KAGvCtR,EAAO6R,kBAIXZ,EAAoBjR,EAAO0R,UAAU7xE,IAAIwxE,EAAUC,EAASC,GAC9D,EAGA,SAAU1xE,GA2BR,SAAgB68B,EAAMsjC,GACpB8R,EAAoB,CAAC,EACrBpiE,EAAI,GAAIswD,GAAU,CAAC,EACrB,CACA,SAAgBtwD,EAAI6hE,EAAkBvR,GACpC,GAAiB,MAAbuR,EACF70C,EAAMsjC,OACD,CACL,MAAMqS,EAAiBP,EAAkBP,IAAaE,EACtDK,EAAkBP,GAAY,CAC5BG,SAAU1R,EAAO0R,UAAYW,EAAeX,SAC5CC,gBAAiB3R,EAAO2R,iBAAmBU,EAAeV,gBAC1DC,iBAAqCn6D,IAAvBuoD,EAAO4R,YAA6BS,EAAeT,YAAc5R,EAAO4R,YACtFC,uBAAiDp6D,IAA7BuoD,EAAO6R,kBAAmCQ,EAAeR,kBACf7R,EAAO6R,kB,CAK3E,CA3CgB,EAAA1uC,QAAhB,SAAwB4uC,EAAcC,GACpCnyE,EAAI,UAAWkyE,EAAMC,EACvB,EAGgB,EAAAjB,KAAhB,SAAqBgB,EAAcC,GACjCnyE,EAAI,OAAQkyE,EAAMC,EACpB,EAGgB,EAAA5uC,QAAhB,SAAwB2uC,EAAcC,GACpCnyE,EAAI,UAAWkyE,EAAMC,EACvB,EAGgB,EAAAvzE,MAAhB,SAAsBszE,EAAcC,GAClCnyE,EAAI,QAASkyE,EAAMC,EACrB,EAGgB,EAAAhB,MAAhB,SAAsBe,EAAcC,GAClCnyE,EAAI,QAASkyE,EAAMC,EACrB,EAEgB,EAAAt1C,MAAK,EAIL,EAAAhtB,IAAG,EAiBH,EAAAwzB,WAAhB,SAA2B5F,GACzB,MAAM0iC,EAAwB,CAAC,EAC3B1iC,EAAIg1C,WACNtS,EAAO2R,gBAAkBr0C,EAAIg1C,UAE/B5iE,EAAI,GAAIswD,EACV,CACD,CAvDD,CAAUngE,MAAG,KA0DA,EAAAojC,OAAiBpjC,EAkB9B,MAAM0yE,EACJ5/C,YACW4+C,EAAyC7sE,EAAqB8tE,EAC7DC,EAAsDC,EAA2B/6D,GADlF,KAAA45D,WAAyC,KAAA7sE,OAAqB,KAAA8tE,YAC7D,KAAAC,cAAsD,KAAAC,QAA2B,KAAA/6D,KAAqB,CAElHe,MACE,OAAOjU,KAAKguE,YAAYhuE,KAC1B,CAEAs4B,mBACE,QAAiBtlB,IAAbhT,KAAKkT,UAAoCF,IAAfhT,KAAKiuE,MACjC,MAAM,IAAIzvE,MAAM,wBAGhB,OADAwB,KAAKkT,IAAI4xD,WACF9kE,KAAKkT,IAAIg7D,uBAAuBluE,KAAKiuE,MAEhD,EAGF,MAAME,EACJjgD,YACW4+C,EAAyC7sE,EAAqB8tE,EAA0BK,GAAxF,KAAAtB,WAAyC,KAAA7sE,OAAqB,KAAA8tE,YAA0B,KAAAK,SAAkB,EAGvH,iBAQE,YAAoBC,EAA0BC,EAAyBC,GA+H/D,KAAAC,UAAW,EASX,KAAAC,cAAgB,EAvItBzuE,KAAKwuE,UAAW,EAChBxuE,KAAK0uE,sBAAuC17D,IAApBq7D,EAAgC,IAAQA,EAChEruE,KAAK2uE,qBAAqC37D,IAAnBs7D,EAA+B,GAAKA,EAC3DtuE,KAAK4uE,kCAA+D57D,IAAhCu7D,EAA4C,IAAOA,CACzF,CAZAhzC,cAAcggC,GACZ,YAAevoD,IAAXuoD,EACK,IAAIv7D,KAEN,IAAIA,KAAKu7D,EAAO8S,gBAAiB9S,EAAO+S,eAAgB/S,EAAOgT,4BACxE,CAUAv6D,QACEhU,KAAKwuE,UAAW,EAChBxuE,KAAK6uE,cAAgB,GACrB7uE,KAAK8uE,WAAa,EAAA5tE,MAClBlB,KAAKyuE,cAAgB,CACvB,CAGAM,OAEE,IADA/uE,KAAKwuE,UAAW,EACTxuE,KAAKyuE,cAAgBzuE,KAAK6uE,cAAcx1E,OAAQ2G,KAAKyuE,gBAC1DzuE,KAAKgvE,YAAYhvE,KAAK6uE,cAAc7uE,KAAKyuE,eAE7C,CAMAnZ,MAASwX,EAAkC7sE,EAAc0iD,EAA4BzvC,GAEnF,MAAMoiD,EAAQt1D,KAAKwuE,SAAWxuE,KAAK8wB,MAAMg8C,EAAU7sE,EAAMiT,QAAOF,EAChE,IAAIi8D,GAAY,EAEhB,MAAMpmD,EAAM85B,IAGZ,GAAI95B,GAA2C,mBAA5BA,EAAmB1b,KAEpC,OADA8hE,GAAY,EACL,IAAI33E,SAAW,CAACiW,EAASgG,KAC7BsV,EACI1b,MACGmrB,MAAMrc,IACAq5C,SACIA,EAAMrhD,MAEd1G,EAAQ0O,EAAM,IAEhBqc,MAAM42C,IACA5Z,SACIA,EAAMrhD,MAEdV,EAAO27D,EAAO,GACd,IAGd,IAAKD,GAAa3Z,EAAO,CACvB,MAAM6Z,EAAW7Z,EAAMrhD,MACvB,GAAIk7D,GAAqC,mBAAlBA,EAAShiE,KAC9B,OAAO,IAAI7V,SAAW,CAACiW,EAASgG,KAC9B,EAAWpG,MACP,KACEI,EAAQsb,EAAI,IAEbqmD,IACC37D,EAAO27D,EAAO,GACd,G,CAIZ,OAAOrmD,CACT,CAGAiI,MAAMg8C,EAAkC7sE,EAAciT,GACpD,IAAKlT,KAAKwuE,SACR,MAAM,IAAIhwE,MAAM,+BAElB,QAAYwU,IAARE,EAAmB,CACrB,MAAM66D,EAAY,EAAA7sE,MAElB,OADAlB,KAAKimE,MAAM8H,GACJ,IAAID,EAAMhB,EAAU7sE,EAAM8tE,GAAWh4E,GAAKiK,KAAKovE,QAAQr5E,I,CACzD,CACL,MAAMk4E,EAAoB/6D,EAAIqxD,aAC9B,OAAO,IAAIuJ,EAAMhB,EAAU7sE,EAAM,GAAGq4B,MAAMviC,GAAKiK,KAAKiU,IAAIle,IAAIk4E,EAAO/6D,E,CAEvE,CAGQolB,UAAUg9B,GAChB,MAAM8Y,QAAwB9Y,EAAM+Z,aAChCrvE,KAAK6uE,cAAcx1E,OAAS2G,KAAK0uE,mBACnC1uE,KAAK6uE,cAAcnuE,KAAK,IAAIytE,EAAY7Y,EAAMwX,SAAUxX,EAAMr1D,KAAMq1D,EAAMyY,UAAWK,IACrFpuE,KAAKimE,MAAMmI,GAEf,CAEQgB,QAAQ9Z,GACd,MAAM8Y,EAAkB,EAAAltE,MACpBlB,KAAK6uE,cAAcx1E,OAAS2G,KAAK0uE,mBACnC1uE,KAAK6uE,cAAcnuE,KAAK,IAAIytE,EAAY7Y,EAAMwX,SAAUxX,EAAMr1D,KAAMq1D,EAAMyY,UAAWK,IACrFpuE,KAAKimE,MAAMmI,GAEf,CAEQY,YAAY1Z,GAClB,EAAA92B,OAAOE,QACH,YAAY42B,EAAMwX,WAClB,IAAIxX,EAAM8Y,QAAU9Y,EAAMyY,WAAWuB,QAAQ,kBAAkBha,EAAMr1D,YAAYq1D,EAAM8Y,QAAQkB,QAAQ,KAC7G,CAEQrJ,MAAMsJ,GACZ,GAAIvvE,KAAK6uE,cAAcx1E,OAAS2G,KAAKyuE,eAAiBzuE,KAAK2uE,iBACvDY,EAAcvvE,KAAK8uE,YAAc9uE,KAAK4uE,6BAA8B,CAGtE,IAAK,MAAMY,EAAkBxvE,KAAKyuE,cAAezuE,KAAKyuE,cAAgBe,EAAkBxvE,KAAK2uE,iBACxF3uE,KAAKyuE,cAAgBzuE,KAAK6uE,cAAcx1E,OACxC2G,KAAKyuE,gBACRzuE,KAAKgvE,YAAYhvE,KAAK6uE,cAAc7uE,KAAKyuE,gBAG3CzuE,KAAK8uE,WAAa,EAAA5tE,K,CAEtB,CAEIuuE,cACF,OAAOzvE,KAAKwuE,QACd,GAgBW,EAAAttE,IAA8B,oBAAhBhG,aAA+BA,YAAYgG,IAAO,IAAMhG,YAAYgG,MAAQgG,KAAKhG,G,8FC3b5G,gBACA,UAEA,UAEA,UACA,UAEA,IAAOg5B,EAAS,EAAAC,YAAYC,aAAaC,IAEzC,cAEEnM,cAAe,CAEfwhD,KAAKt6D,EAAiByzD,EAAsC8G,GAC1D,IAAKA,EAEH,IAEE,YADA3vE,KAAK4vE,mBAAmBx6D,EAAKyzD,E,CAE7B,MAAO9yE,GACP,QAAoBid,IAAhB28D,EACF,MAAM55E,C,CAKZiK,KAAK6vE,kBAAkBz6D,EAAKyzD,EAC9B,CAEQ+G,mBAAmBx6D,EAAiByzD,GAC1C,MAAMiH,EAAa,EAAAnlD,KAAKiE,WAAWnyB,OAAO2Y,GAE1C,GADkB,EAAAgnB,SAASC,aAAayzC,EAAW/gD,WACnC,EACd,MAAM,IAAIvwB,MAAM,8CAGlBwB,KAAK+vE,QACDD,EAAWjhD,YAAYmL,KAAI9iC,IAAK,CAAEy3B,OAAQz3B,EAAEy3B,OAAkBkD,QAAS,EAAAuK,SAASC,aAAanlC,EAAE26B,aAEnG7xB,KAAKgwE,OAAS,EAAA9H,MAAMtzC,KAAKk7C,EAAW3gD,MAAQ05C,EAC9C,CAEQgH,kBAAkBz6D,EAAiByzD,GACzC,MAAM3jE,EAAK,IAAI,EAAA4T,YAAYyB,WAAWnF,GAChC66D,EAAW/1C,EAAOg2C,iBAAiBC,0BAA0BjrE,GAAIkrE,QAEvE,GADkB,EAAAh0C,SAASC,aAAa4zC,EAASlhD,aACjC,EACd,MAAM,IAAIvwB,MAAM,8CAElBwB,KAAK+vE,QAAU,GACf,IAAK,IAAI74E,EAAI,EAAGA,EAAI+4E,EAASI,oBAAqBn5E,IAAK,CACrD,MAAMo5E,EAAUL,EAASphD,YAAY33B,GACrC8I,KAAK+vE,QAAQrvE,KAAK,CAACiuB,OAAQ2hD,aAAO,EAAPA,EAAS3hD,SAAoBkD,QAAS,EAAAuK,SAASC,aAAai0C,EAAQz+C,Y,CAGjG7xB,KAAKgwE,OAAS,EAAA9H,MAAMtzC,KAAKq7C,EAAS9gD,QAAU05C,EAC9C,CAGI15C,YACF,OAAOnvB,KAAKgwE,MACd,CAGIhX,aACF,OAAOh5D,KAAK+vE,OACd,E,4HCvDW,EAAApsB,aACT,CAAC,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC5D,EAAA4sB,UAAwC,CAAC,QAAS,QAAS,OAAQ,SAAU,SAAU,SACvF,EAAAC,YAA0C,CAAC,UAAW,U,4BCgCnE,SAASC,EAAc5+C,EAAiB6+C,GACtC,GAAIA,EAASC,SAAS,KAAM,CAE1B,MAAMC,EAAarpE,OAAOgd,SAASmsD,EAAS9lE,UAAU,EAAG8lE,EAASr3E,OAAS,GAAI,IAC/E,OAAQ2c,MAAM46D,IAAeA,GAAc/+C,C,CACtC,GAAmC,IAA/B6+C,EAAS/lE,MAAM,KAAKtR,OAAc,CAE3C,MAAMw3E,EAAOH,EAAS/lE,MAAM,KACtBimE,EAAarpE,OAAOgd,SAASssD,EAAK,GAAI,IACtCC,EAAWvpE,OAAOgd,SAASssD,EAAK,GAAI,IAC1C,OAAQ76D,MAAM46D,KAAgB56D,MAAM86D,IAAaF,GAAc/+C,GAAWA,GAAWi/C,C,CAGrF,OAAOvpE,OAAOgd,SAASmsD,EAAU,MAAQ7+C,CAE7C,C,0EAvCA,2BAAgCp5B,EAAkBugE,EAA0B+X,GAC1E,IAAK,MAAMC,KAAQD,EAAO,CACxB,MAAMriD,EAASsiD,EAAK,GACdriD,EAASqiD,EAAK,GACdC,EAAkBD,EAAK,GACvB5X,EAAS4X,EAAK,GACd3X,EAAS2X,EAAK,GAEpB,GAAIv4E,EAAKi2B,SAAWA,EAClB,IAAK,MAAM0lC,KAAS4E,EAElB,IAAI5E,EAAMzlC,SAAWA,GAA4B,YAAjBylC,EAAMzlC,QAAmC,KAAXA,IACxD8hD,EAAcrc,EAAMviC,QAASo/C,GAC/B,MAAO,CAAC7X,SAAQC,S,CAO1B,MAAM,IAAIz3C,UAAU,4BAA4BnpB,EAAKi2B,wBACjDsqC,EAAOh/B,KAAI/uB,GAAO,GAAGA,EAAI0jB,QAAU,cAAc1jB,EAAI4mB,YAAWzd,KAAK,QAC3E,C,oGC7CA,gBAKA,IAAiB+lB,EAAYC,EAAZD,EAAA,EAAAA,cAAA,EAAAA,YAAW,IAAc,SAAAE,GACxC,IAAYpM,GAAZ,SAAYA,GACV,6BACA,qBACA,iBACA,uBACA,uBACA,qBACA,uBACA,mBACA,yBACA,yBACA,wBACA,sCACA,uCACD,CAdD,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,IAe1B,CAhByC,EAAbmM,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAACC,MAAA,EAAAA,IAAG,KAqB7C,SAAiBF,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAY62C,GAAZ,SAAYA,GAAoB,yBAAa,qBAAW,oBAAU,CAAlE,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,IAC/B,CAFyC,GAAA72C,MAAA,EAAAA,IAAG,IAE5C,CAF4B,GAAAD,eAAA,EAAAA,aAAY,IAExC,CAFD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAY82C,GAAZ,SAAYA,GACV,6BACA,qBACA,qBACA,mBACA,uBACA,qBACA,qBACA,qBACA,uBACA,mBACA,0BACA,wBACA,wBACA,wBACA,8BACA,gCACA,2BACD,CAlBD,CAAYA,EAAA,EAAAA,iBAAA,EAAAA,eAAc,IAmB3B,CApByC,GAAA92C,MAAA,EAAAA,IAAG,IAoB5C,CApB4B,GAAAD,eAAA,EAAAA,aAAY,IAoBxC,CApBD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyB5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAY+2C,GAAZ,SAAYA,GAAU,6BAAe,oBAAU,CAA/C,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,IACrB,CAFyC,GAAA/2C,MAAA,EAAAA,IAAG,IAE5C,CAF4B,GAAAD,eAAA,EAAAA,aAAY,IAExC,CAFD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYmwC,GAAZ,SAAYA,GAAe,mBAAU,iCAAiB,qCAAmB,0BAAa,CAAtF,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,IAC1B,CAFyC,GAAAnwC,MAAA,EAAAA,IAAG,IAE5C,CAF4B,GAAAD,eAAA,EAAAA,aAAY,IAExC,CAFD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAag3C,EAAb,cACE,KAAAhsE,GAAkC,KAElC,KAAA0b,OAAS,CAqGX,CA/FEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,sBAAsBl2B,EAA4BqY,GAChD,OAAQA,GAAO,IAAI2zD,GAASC,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAClF,CAOAk2B,kCAAkCl2B,EAA4BqY,GAE5D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI2zD,GAASC,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAClF,CAOA2rB,IAAI3d,EAAeqK,GACjB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIpJ,WACpCqgD,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKAslE,YACE,IAAIv3D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,kBAAkBg2C,GAChBA,EAAQxzD,YAAY,EACtB,CAMAwd,cAAcg2C,EAA8B3lC,GAC1C2lC,EAAQj0D,eAAe,EAAGsuB,EAAW,EACvC,CAOArQ,uBAAuBg2C,EAA8BruE,GACnDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,sBAAsBg2C,EAA8BC,GAClDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,gBAAgBg2C,GAEd,OADaA,EAAQtzD,WAEvB,CAEAsd,mBAAmBg2C,EAA8B3lC,GAG/C,OAFAylC,EAAMI,WAAWF,GACjBF,EAAMK,OAAOH,EAAS3lC,GACfylC,EAAMM,SAASJ,EACxB,EAvGW,EAAAF,MAAK,CAyGnB,CA1GyC,GAAAh3C,MAAA,EAAAA,IAAG,IA0G5C,CA1G4B,GAAAD,eAAA,EAAAA,aAAY,IA0GxC,CA1GD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA8G5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAapJ,EAAb,cACE,KAAA5rB,GAAkC,KAElC,KAAA0b,OAAS,CA6FX,CAvFEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,0BAA0Bl2B,EAA4BqY,GACpD,OAAQA,GAAO,IAAIuT,GAAaqgD,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACtF,CAOAk2B,sCAAsCl2B,EAA4BqY,GAEhE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIuT,GAAaqgD,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACtF,CAMA4W,MAAMyB,GACJ,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIu3C,gBACpCN,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAQAgsB,WAAWwgD,GACT,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKAt2C,sBAAsBg2C,GACpBA,EAAQxzD,YAAY,EACtB,CAMAwd,gBAAgBg2C,EAA8BO,GAC5CP,EAAQj0D,eAAe,EAAGw0D,EAAa,EACzC,CAMAv2C,qBAAqBg2C,EAA8BQ,GACjDR,EAAQj0D,eAAe,EAAGy0D,EAAkB,EAC9C,CAMAx2C,oBAAoBg2C,GAElB,OADaA,EAAQtzD,WAEvB,CAEAsd,uBACIg2C,EAA8BO,EAC9BC,GAIF,OAHA9gD,EAAU+gD,eAAeT,GACzBtgD,EAAUghD,SAASV,EAASO,GAC5B7gD,EAAUihD,cAAcX,EAASQ,GAC1B9gD,EAAUkhD,aAAaZ,EAChC,EA/FW,EAAAtgD,UAAS,CAiGvB,CAlGyC,GAAAoJ,MAAA,EAAAA,IAAG,IAkG5C,CAlG4B,GAAAD,eAAA,EAAAA,aAAY,IAkGxC,CAlGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAau3C,EAAb,cACE,KAAAvsE,GAAkC,KAElC,KAAA0b,OAAS,CA4GX,CAtGEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,+BAA+Bl2B,EAA4BqY,GACzD,OAAQA,GAAO,IAAIk0D,GAAkBN,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC3F,CAOAk2B,2CAA2Cl2B,EAA4BqY,GAErE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIk0D,GAAkBN,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC3F,CAKA+sE,UACE,IAAIh/D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAI2a,SAAShgB,KAAK+gB,OAAS3N,GACzC+mB,EAAYC,aAAaC,IAAI62C,mBAAmBmB,OAClE,CAKAlhD,WACE,IAAI/d,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAK+gB,OAAS3N,GAAUpT,KAAKqF,GAAIwa,WAAW,EAAG,EACpF,CAQAuR,SAASygD,GACP,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKAt2C,2BAA2Bg2C,GACzBA,EAAQxzD,YAAY,EACtB,CAMAwd,kBAAkBg2C,EAA8Ba,GAC9Cb,EAAQ10D,aAAa,EAAGu1D,EAASj4C,EAAYC,aAAaC,IAAI62C,mBAAmBmB,QACnF,CAMA92C,mBAAmBg2C,EAA8BpgD,GAC/CogD,EAAQp0D,cAAc,EAAGgU,EAAUogD,EAAQ1xD,WAAW,EAAG,GAC3D,CAMA0b,mBAAmBg2C,EAA8Be,GAC/Cf,EAAQj0D,eAAe,EAAGg1D,EAAgB,EAC5C,CAMA/2C,yBAAyBg2C,GAEvB,OADaA,EAAQtzD,WAEvB,CAEAsd,4BACIg2C,EAA8Ba,EAC9BjhD,EAA4BmhD,GAK9B,OAJAV,EAAeW,oBAAoBhB,GACnCK,EAAeY,WAAWjB,EAASa,GACnCR,EAAea,YAAYlB,EAASpgD,GACpCygD,EAAec,YAAYnB,EAASe,GAC7BV,EAAee,kBAAkBpB,EAC1C,EA9GW,EAAAK,eAAc,CAgH5B,CAjHyC,GAAAv3C,MAAA,EAAAA,IAAG,IAiH5C,CAjH4B,GAAAD,eAAA,EAAAA,aAAY,IAiHxC,CAjHD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaqwC,EAAb,cACE,KAAArlE,GAAkC,KAElC,KAAA0b,OAAS,CA4FX,CAtFEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,mCAAmCl2B,EAA4BqY,GAC7D,OAAQA,GAAO,IAAIgtD,GAAsB4G,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC/F,CAOAk2B,+CAA+Cl2B,EAA4BqY,GAGzE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIgtD,GAAsB4G,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC/F,CAKAssB,WACE,IAAIve,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS3N,GAC1C+mB,EAAYC,aAAaC,IAAI82C,eAAeyB,SAC9D,CAMAhhD,MAAMlU,GACJ,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIg3C,OACpCC,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAKAk2B,+BAA+Bg2C,GAC7BA,EAAQxzD,YAAY,EACtB,CAMAwd,mBAAmBg2C,EAA8B5/C,GAC/C4/C,EAAQr0D,cAAc,EAAGyU,EAAUwI,EAAYC,aAAaC,IAAI82C,eAAeyB,UACjF,CAMAr3C,gBAAgBg2C,EAA8BsB,GAC5CtB,EAAQj0D,eAAe,EAAGu1D,EAAa,EACzC,CAMAt3C,6BAA6Bg2C,GAE3B,OADaA,EAAQtzD,WAEvB,CAEAsd,gCACIg2C,EAA8B5/C,EAC9BkhD,GAIF,OAHAnI,EAAmBoI,wBAAwBvB,GAC3C7G,EAAmBqI,YAAYxB,EAAS5/C,GACxC+4C,EAAmBsI,SAASzB,EAASsB,GAC9BnI,EAAmBuI,sBAAsB1B,EAClD,EA9FW,EAAA7G,mBAAkB,CAgGhC,CAjGyC,GAAArwC,MAAA,EAAAA,IAAG,IAiG5C,CAjG4B,GAAAD,eAAA,EAAAA,aAAY,IAiGxC,CAjGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa64C,EAAb,cACE,KAAA7tE,GAAkC,KAElC,KAAA0b,OAAS,CA2FX,CArFEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,wBAAwBl2B,EAA4BqY,GAClD,OAAQA,GAAO,IAAIw1D,GAAW5B,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACpF,CAOAk2B,oCAAoCl2B,EAA4BqY,GAE9D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIw1D,GAAW5B,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACpF,CAKA8tE,UACE,IAAI//D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS3N,GAC1C+mB,EAAYC,aAAaC,IAAI82C,eAAeyB,SAC9D,CAMArI,UAAU7sD,GACR,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI+4C,UACpC9B,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAKAk2B,oBAAoBg2C,GAClBA,EAAQxzD,YAAY,EACtB,CAMAwd,kBAAkBg2C,EAA8B4B,GAC9C5B,EAAQr0D,cAAc,EAAGi2D,EAASh5C,EAAYC,aAAaC,IAAI82C,eAAeyB,UAChF,CAMAr3C,oBAAoBg2C,EAA8B8B,GAChD9B,EAAQj0D,eAAe,EAAG+1D,EAAiB,EAC7C,CAMA93C,kBAAkBg2C,GAEhB,OADaA,EAAQtzD,WAEvB,CAEAsd,qBACIg2C,EAA8B4B,EAC9BE,GAIF,OAHAH,EAAQI,aAAa/B,GACrB2B,EAAQK,WAAWhC,EAAS4B,GAC5BD,EAAQM,aAAajC,EAAS8B,GACvBH,EAAQO,WAAWlC,EAC5B,EA7FW,EAAA2B,QAAO,CA+FrB,CAhGyC,GAAA74C,MAAA,EAAAA,IAAG,IAgG5C,CAhG4B,GAAAD,eAAA,EAAAA,aAAY,IAgGxC,CAhGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAoG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaq5C,EAAb,cACE,KAAAruE,GAAkC,KAElC,KAAA0b,OAAS,CAuEX,CAjEEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,6BAA6Bl2B,EAA4BqY,GACvD,OAAQA,GAAO,IAAIg2D,GAAgBpC,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACzF,CAOAk2B,yCAAyCl2B,EAA4BqY,GAEnE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIg2D,GAAgBpC,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACzF,CAMAssB,SAASjU,GACP,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI+4C,UACpC9B,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAKAk2B,yBAAyBg2C,GACvBA,EAAQxzD,YAAY,EACtB,CAMAwd,mBAAmBg2C,EAA8BoC,GAC/CpC,EAAQj0D,eAAe,EAAGq2D,EAAgB,EAC5C,CAMAp4C,uBAAuBg2C,GAErB,OADaA,EAAQtzD,WAEvB,CAEAsd,0BAA0Bg2C,EAA8BoC,GAGtD,OAFAD,EAAaE,kBAAkBrC,GAC/BmC,EAAaX,YAAYxB,EAASoC,GAC3BD,EAAaG,gBAAgBtC,EACtC,EAzEW,EAAAmC,aAAY,CA2E1B,CA5EyC,GAAAr5C,MAAA,EAAAA,IAAG,IA4E5C,CA5E4B,GAAAD,eAAA,EAAAA,aAAY,IA4ExC,CA5ED,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAgF5B,SAAiBA,IAAY,SAAAC,IAAa,EAAAC,MAAA,EAAAA,IAAG,KAC9By5C,QAAb,oBACE,KAAAzuE,GAAkC,KAElC,KAAA0b,OAAS,CAiDX,CA3CEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAKAqrE,YACE,OAAOrrE,KAAKqF,GAAI8a,WAAWngB,KAAK+gB,OAClC,CAKAgzD,cACE,OAAO/zE,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS,EAC1C,CAKAizD,cACE,OAAOh0E,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS,EAC1C,CASAwa,qBACIg2C,EAA8B0C,EAAoBC,EAClDC,GAKF,OAJA5C,EAAQ91D,KAAK,EAAG,IAChB81D,EAAQp1D,WAAWg4D,GACnB5C,EAAQp1D,WAAW+3D,GACnB3C,EAAQp1D,WAAW83D,GACZ1C,EAAQn+D,QACjB,EAEH,CAtD4B,GAAAgnB,eAAA,EAAAA,aAAY,IAsDxC,CAtDD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0D5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa+5C,EAAb,cACE,KAAA/uE,GAAkC,KAElC,KAAA0b,OAAS,CAgJX,CA1IEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,yBAAyBl2B,EAA4BqY,GACnD,OAAQA,GAAO,IAAI02D,GAAY9C,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACrF,CAOAk2B,qCAAqCl2B,EAA4BqY,GAE/D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI02D,GAAY9C,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACrF,CAKAgmE,YACE,IAAIj4D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI8a,WAAWngB,KAAK+gB,OAAS3N,GAAU,CAC9D,CAOAihE,WAAWhhE,EAAeqK,GACxB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIy5C,SACpCxC,OAAOtxE,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,GAARC,EAAYrT,KAAKqF,IACvE,IAClB,CAKAivE,mBACE,IAAIlhE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAmhE,YAAYlhE,EAAeqK,GACzB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIy5C,SACpCxC,OAAOtxE,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,GAARC,EAAYrT,KAAKqF,IACvE,IAClB,CAKAmvE,oBACE,IAAIphE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,qBAAqBg2C,GACnBA,EAAQxzD,YAAY,EACtB,CAMAwd,oBAAoBg2C,EAA8BlG,GAChDkG,EAAQr0D,cAAc,EAAGmuD,EAAW,EACtC,CAMA9vC,qBAAqBg2C,EAA8BkD,GACjDlD,EAAQj0D,eAAe,EAAGm3D,EAAkB,EAC9C,CAMAl5C,6BAA6Bg2C,EAA8BC,GACzDD,EAAQjyD,YAAY,GAAIkyD,EAAU,EACpC,CAMAj2C,sBAAsBg2C,EAA8BmD,GAClDnD,EAAQj0D,eAAe,EAAGo3D,EAAmB,EAC/C,CAMAn5C,8BAA8Bg2C,EAA8BC,GAC1DD,EAAQjyD,YAAY,GAAIkyD,EAAU,EACpC,CAMAj2C,mBAAmBg2C,GAEjB,OADaA,EAAQtzD,WAEvB,CAEAsd,sBACIg2C,EAA8BlG,EAAmBoJ,EACjDC,GAKF,OAJAN,EAASO,cAAcpD,GACvB6C,EAASQ,aAAarD,EAASlG,GAC/B+I,EAASS,cAActD,EAASkD,GAChCL,EAASU,eAAevD,EAASmD,GAC1BN,EAASW,YAAYxD,EAC9B,EAlJW,EAAA6C,SAAQ,CAoJtB,CArJyC,GAAA/5C,MAAA,EAAAA,IAAG,IAqJ5C,CArJ4B,GAAAD,eAAA,EAAAA,aAAY,IAqJxC,CArJD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaouC,EAAb,cACE,KAAApjE,GAAkC,KAElC,KAAA0b,OAAS,CAodX,CA9cEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,qBAAqBl2B,EAA4BqY,GAC/C,OAAQA,GAAO,IAAI+qD,GAAQ6I,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACjF,CAOAk2B,iCAAiCl2B,EAA4BqY,GAE3D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI+qD,GAAQ6I,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACjF,CAQApF,KAAK4xE,GACH,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQA/lD,UAAU+lD,GACR,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQAljD,OAAOkjD,GACL,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKAmD,eACE,IAAI5hE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS3N,GAAU,CAC7D,CAKAC,QACE,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI8a,WAAWngB,KAAK+gB,OAAS3N,GAAU,CAC9D,CAQAsb,OAAOmjD,GACL,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKA9lD,OACE,IAAI3Y,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS3N,GAC1C+mB,EAAYC,aAAaC,IAAI+2C,SAAS6D,SACxD,CAQAC,sBAAsBrD,GACpB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CASAxkC,OAAOh6B,EAAew+D,GACpB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKA1H,eACE,IAAI/2D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CASA+9C,QAAQ99C,EAAew+D,GACrB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKA/G,gBACE,IAAI13D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAmnB,WAAWlnB,EAAeqK,GAExB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIC,WACpCg3C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKA4lE,mBACE,IAAI73D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAMA+hE,eAAe9hE,GACb,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIga,UAAUrf,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAa,CAC5F,CAKA+hE,uBACE,IAAIhiE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAiiE,sBACE,IAAIjiE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EACH,IAAI7V,WACAyC,KAAKqF,GAAIkW,QAAQjlB,OAAQ0J,KAAKqF,GAAIkW,QAAQ2+C,WAAal6D,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GACvFpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,IACxC,IACN,CASAkiE,eAAejiE,EAAew+D,GAC5B,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKA0D,uBACE,IAAIniE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,iBAAiBg2C,GACfA,EAAQxzD,YAAY,GACtB,CAMAwd,eAAeg2C,EAA8BiE,GAC3CjE,EAAQj0D,eAAe,EAAGk4D,EAAY,EACxC,CAMAj6C,oBAAoBg2C,EAA8BkE,GAChDlE,EAAQj0D,eAAe,EAAGm4D,EAAiB,EAC7C,CAMAl6C,iBAAiBg2C,EAA8BmE,GAC7CnE,EAAQj0D,eAAe,EAAGo4D,EAAc,EAC1C,CAMAn6C,uBAAuBg2C,EAA8ByD,GACnDzD,EAAQr0D,cAAc,EAAG83D,EAAc,EACzC,CAMAz5C,gBAAgBg2C,EAA8Bl+D,GAC5Ck+D,EAAQr0D,cAAc,EAAG7J,EAAO,EAClC,CAMAkoB,iBAAiBg2C,EAA8BoE,GAC7CpE,EAAQj0D,eAAe,EAAGq4D,EAAc,EAC1C,CAMAp6C,eAAeg2C,EAA8BxlD,GAC3CwlD,EAAQr0D,cAAc,EAAG6O,EAAMoO,EAAYC,aAAaC,IAAI+2C,SAAS6D,UACvE,CAMA15C,gCAAgCg2C,EAA8BqE,GAC5DrE,EAAQj0D,eAAe,EAAGs4D,EAA6B,EACzD,CAMAr6C,iBAAiBg2C,EAA8BsE,GAC7CtE,EAAQj0D,eAAe,EAAGu4D,EAAc,EAC1C,CAOAt6C,0BAA0Bg2C,EAA8BruE,GACtDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,yBAAyBg2C,EAA8BC,GACrDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,kBAAkBg2C,EAA8BuE,GAC9CvE,EAAQj0D,eAAe,EAAGw4D,EAAe,EAC3C,CAOAv6C,2BAA2Bg2C,EAA8BruE,GACvDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,0BAA0Bg2C,EAA8BC,GACtDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,qBAAqBg2C,EAA8BwE,GACjDxE,EAAQj0D,eAAe,GAAIy4D,EAAkB,EAC/C,CAOAx6C,8BAA8Bg2C,EAA8BruE,GAC1DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,6BAA6Bg2C,EAA8BC,GACzDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,yBAAyBg2C,EAA8ByE,GACrDzE,EAAQj0D,eAAe,GAAI04D,EAAsB,EACnD,CAOAz6C,kCAAkCg2C,EAA8BruE,GAC9DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ90D,SAASvZ,EAAKhM,IAExB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,iCAAiCg2C,EAA8BC,GAC7DD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,yBAAyBg2C,EAA8B0E,GACrD1E,EAAQj0D,eAAe,GAAI24D,EAAsB,EACnD,CAOA16C,kCAAkCg2C,EAA8BruE,GAC9DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,iCAAiCg2C,EAA8BC,GAC7DD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,eAAeg2C,GAEb,OADaA,EAAQtzD,WAEvB,CAEAsd,kBACIg2C,EAA8BiE,EAAgCC,EAC9DC,EAAkCV,EAAsB3hE,EAAesiE,EACvE5pD,EAA6C6pD,EAC7CC,EAAkCC,EAAmCC,EACrEC,EAA0CC,GAe5C,OAdAxN,EAAKyN,UAAU3E,GACf9I,EAAK0N,QAAQ5E,EAASiE,GACtB/M,EAAK2N,aAAa7E,EAASkE,GAC3BhN,EAAK4N,UAAU9E,EAASmE,GACxBjN,EAAK6N,gBAAgB/E,EAASyD,GAC9BvM,EAAK8N,SAAShF,EAASl+D,GACvBo1D,EAAK+N,UAAUjF,EAASoE,GACxBlN,EAAKgO,QAAQlF,EAASxlD,GACtB08C,EAAKiO,yBAAyBnF,EAASqE,GACvCnN,EAAKkO,UAAUpF,EAASsE,GACxBpN,EAAKmO,WAAWrF,EAASuE,GACzBrN,EAAKoO,cAActF,EAASwE,GAC5BtN,EAAKqO,kBAAkBvF,EAASyE,GAChCvN,EAAKsO,kBAAkBxF,EAAS0E,GACzBxN,EAAKuO,QAAQzF,EACtB,EAtdW,EAAA9I,KAAI,CAwdlB,CAzdyC,GAAApuC,MAAA,EAAAA,IAAG,IAyd5C,CAzd4B,GAAAD,eAAA,EAAAA,aAAY,IAydxC,CAzdD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa48C,EAAb,cACE,KAAA5xE,GAAkC,KAElC,KAAA0b,OAAS,CAiHX,CA3GEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,0BAA0Bl2B,EAA4BqY,GACpD,OAAQA,GAAO,IAAIu5D,GAAa3F,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACtF,CAOAk2B,sCAAsCl2B,EAA4BqY,GAEhE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIu5D,GAAa3F,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACtF,CAQApF,KAAK4xE,GACH,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQA/lD,UAAU+lD,GACR,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAMA9lD,KAAKrO,GACH,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI+4C,UACpC9B,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAKAk2B,sBAAsBg2C,GACpBA,EAAQxzD,YAAY,EACtB,CAMAwd,eAAeg2C,EAA8BiE,GAC3CjE,EAAQj0D,eAAe,EAAGk4D,EAAY,EACxC,CAMAj6C,oBAAoBg2C,EAA8BkE,GAChDlE,EAAQj0D,eAAe,EAAGm4D,EAAiB,EAC7C,CAMAl6C,eAAeg2C,EAA8B2F,GAC3C3F,EAAQj0D,eAAe,EAAG45D,EAAY,EACxC,CAMA37C,oBAAoBg2C,GAElB,OADaA,EAAQtzD,WAEvB,CAEAsd,uBACIg2C,EAA8BiE,EAAgCC,EAC9DyB,GAKF,OAJAD,EAAUE,eAAe5F,GACzB0F,EAAUd,QAAQ5E,EAASiE,GAC3ByB,EAAUb,aAAa7E,EAASkE,GAChCwB,EAAUR,QAAQlF,EAAS2F,GACpBD,EAAUG,aAAa7F,EAChC,EAnHW,EAAA0F,UAAS,CAqHvB,CAtHyC,GAAA58C,MAAA,EAAAA,IAAG,IAsH5C,CAtH4B,GAAAD,eAAA,EAAAA,aAAY,IAsHxC,CAtHD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0H5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa+4C,EAAb,cACE,KAAA/tE,GAAkC,KAElC,KAAA0b,OAAS,CA6GX,CAvGEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,yBAAyBl2B,EAA4BqY,GACnD,OAAQA,GAAO,IAAI01D,GAAY9B,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACrF,CAOAk2B,qCAAqCl2B,EAA4BqY,GAE/D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI01D,GAAY9B,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACrF,CAQAgsB,WAAWwgD,GACT,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKAtH,YACE,IAAIn3D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAI4a,UAAUjgB,KAAK+gB,OAAS3N,GAC1C+mB,EAAYC,aAAaC,IAAImwC,cAAc6M,IAC7D,CAMAp7D,MAAmCyB,GACjC,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI4b,QAAQvD,EAAK1d,KAAK+gB,OAAS3N,GAAU,IAChE,CAKAmoB,qBAAqBg2C,GACnBA,EAAQxzD,YAAY,EACtB,CAMAwd,qBAAqBg2C,EAA8BQ,GACjDR,EAAQj0D,eAAe,EAAGy0D,EAAkB,EAC9C,CAMAx2C,oBAAoBg2C,EAA8BhH,GAChDgH,EAAQ10D,aAAa,EAAG0tD,EAAWpwC,EAAYC,aAAaC,IAAImwC,cAAc6M,KAChF,CAMA97C,gBAAgBg2C,EAA8BO,GAC5CP,EAAQj0D,eAAe,EAAGw0D,EAAa,EACzC,CAMAv2C,mBAAmBg2C,GAEjB,OADaA,EAAQtzD,WAEvB,CAEAsd,sBACIg2C,EAA8BQ,EAC9BxH,EAAuDuH,GAKzD,OAJAsB,EAASkE,cAAc/F,GACvB6B,EAASlB,cAAcX,EAASQ,GAChCqB,EAASI,aAAajC,EAAShH,GAC/B6I,EAASnB,SAASV,EAASO,GACpBsB,EAASmE,YAAYhG,EAC9B,EA/GW,EAAA6B,SAAQ,CAiHtB,CAlHyC,GAAA/4C,MAAA,EAAAA,IAAG,IAkH5C,CAlH4B,GAAAD,eAAA,EAAAA,aAAY,IAkHxC,CAlHD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAam9C,EAAb,cACE,KAAAnyE,GAAkC,KAElC,KAAA0b,OAAS,CAyFX,CAnFEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,8BAA8Bl2B,EAA4BqY,GACxD,OAAQA,GAAO,IAAI85D,GAAiBlG,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC1F,CAOAk2B,0CAA0Cl2B,EAA4BqY,GAEpE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI85D,GAAiBlG,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC1F,CAQAspB,OAAOkjD,GACL,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKAhgD,UACE,IAAIze,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAK+gB,OAAS3N,GAAUpT,KAAKqF,GAAIwa,WAAW,EAAG,EACpF,CAKA0b,0BAA0Bg2C,GACxBA,EAAQxzD,YAAY,EACtB,CAMAwd,iBAAiBg2C,EAA8BmE,GAC7CnE,EAAQj0D,eAAe,EAAGo4D,EAAc,EAC1C,CAMAn6C,kBAAkBg2C,EAA8B1/C,GAC9C0/C,EAAQp0D,cAAc,EAAG0U,EAAS0/C,EAAQ1xD,WAAW,EAAG,GAC1D,CAMA0b,wBAAwBg2C,GAEtB,OADaA,EAAQtzD,WAEvB,CAEAsd,2BACIg2C,EAA8BmE,EAAkC7jD,GAIlE,OAHA2lD,EAAcC,mBAAmBlG,GACjCiG,EAAcnB,UAAU9E,EAASmE,GACjC8B,EAAcE,WAAWnG,EAAS1/C,GAC3B2lD,EAAcG,iBAAiBpG,EACxC,EA3FW,EAAAiG,cAAa,CA6F3B,CA9FyC,GAAAn9C,MAAA,EAAAA,IAAG,IA8F5C,CA9F4B,GAAAD,eAAA,EAAAA,aAAY,IA8FxC,CA9FD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAkG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa3I,EAAb,cACE,KAAArsB,GAAkC,KAElC,KAAA0b,OAAS,CA6QX,CAvQEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,uBAAuBl2B,EAA4BqY,GACjD,OAAQA,GAAO,IAAIgU,GAAU4/C,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACnF,CAOAk2B,mCAAmCl2B,EAA4BqY,GAE7D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIgU,GAAU4/C,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACnF,CAQApF,KAAK4xE,GACH,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQA/lD,UAAU+lD,GACR,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAMAhiD,KAAKxc,GACH,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAC7DrT,KAAKqF,GAAIwa,WAAW,EAAG,EACzC,CAKA+3D,aACE,IAAIxkE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAid,WACE,IAAIjd,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS3N,GAC1C+mB,EAAYC,aAAaC,IAAI82C,eAAeyB,SAC9D,CAMAriD,QAAQld,GACN,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI4a,UAAUjgB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAUC,GAAS,CACxF,CAKAwkE,gBACE,IAAIzkE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKA0kE,eACE,IAAI1kE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EACH,IAAIla,WACA8G,KAAKqF,GAAIkW,QAAQjlB,OAAQ0J,KAAKqF,GAAIkW,QAAQ2+C,WAAal6D,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GACvFpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,IACxC,IACN,CASA4c,WAAW3c,EAAew+D,GACxB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKAkG,mBACE,IAAI3kE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,mBAAmBg2C,GACjBA,EAAQxzD,YAAY,EACtB,CAMAwd,eAAeg2C,EAA8BiE,GAC3CjE,EAAQj0D,eAAe,EAAGk4D,EAAY,EACxC,CAMAj6C,oBAAoBg2C,EAA8BkE,GAChDlE,EAAQj0D,eAAe,EAAGm4D,EAAiB,EAC7C,CAMAl6C,eAAeg2C,EAA8ByG,GAC3CzG,EAAQj0D,eAAe,EAAG06D,EAAY,EACxC,CAOAz8C,wBAAwBg2C,EAA8BruE,GACpDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ70D,SAASxZ,EAAKhM,IAExB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,uBAAuBg2C,EAA8BC,GACnDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,mBAAmBg2C,EAA8BlhD,GAC/CkhD,EAAQr0D,cAAc,EAAGmT,EAAU8J,EAAYC,aAAaC,IAAI82C,eAAeyB,UACjF,CAMAr3C,kBAAkBg2C,EAA8B0G,GAC9C1G,EAAQj0D,eAAe,EAAG26D,EAAe,EAC3C,CAOA18C,2BAA2Bg2C,EAA8BruE,GACvDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh1D,QAAQrZ,EAAKhM,IAEvB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,0BAA0Bg2C,EAA8BC,GACtDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,qBAAqBg2C,EAA8B2G,GACjD3G,EAAQj0D,eAAe,EAAG46D,EAAkB,EAC9C,CAOA38C,8BAA8Bg2C,EAA8BruE,GAC1DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,6BAA6Bg2C,EAA8BC,GACzDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,iBAAiBg2C,GAEf,OADaA,EAAQtzD,WAEvB,CAEAsd,oBACIg2C,EAA8BiE,EAAgCC,EAC9DuC,EAAgC3nD,EAChC4nD,EAAmCC,GAQrC,OAPAxmD,EAAOymD,YAAY5G,GACnB7/C,EAAOykD,QAAQ5E,EAASiE,GACxB9jD,EAAO0kD,aAAa7E,EAASkE,GAC7B/jD,EAAO0mD,QAAQ7G,EAASyG,GACxBtmD,EAAO2mD,YAAY9G,EAASlhD,GAC5BqB,EAAO4mD,WAAW/G,EAAS0G,GAC3BvmD,EAAO6mD,cAAchH,EAAS2G,GACvBxmD,EAAO8mD,UAAUjH,EAC1B,EA/QW,EAAA7/C,OAAM,CAiRpB,CAlRyC,GAAA2I,MAAA,EAAAA,IAAG,IAkR5C,CAlR4B,GAAAD,eAAA,EAAAA,aAAY,IAkRxC,CAlRD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsR5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAao+C,EAAb,cACE,KAAApzE,GAAkC,KAElC,KAAA0b,OAAS,CA6IX,CAvIEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,6BAA6Bl2B,EAA4BqY,GACvD,OAAQA,GAAO,IAAI+6D,GAAgBnH,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACzF,CAOAk2B,yCAAyCl2B,EAA4BqY,GAEnE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI+6D,GAAgBnH,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACzF,CAMA1C,OAAO+a,GACL,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI3I,QACpC4/C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAMAqzE,QAAQh7D,GACN,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI3I,QACpC4/C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAMAwqB,KAAKxc,GACH,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAC7DrT,KAAKqF,GAAIwa,WAAW,EAAG,EACzC,CAKA+3D,aACE,IAAIxkE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,yBAAyBg2C,GACvBA,EAAQxzD,YAAY,EACtB,CAMAwd,iBAAiBg2C,EAA8BoH,GAC7CpH,EAAQj0D,eAAe,EAAGq7D,EAAc,EAC1C,CAMAp9C,kBAAkBg2C,EAA8BqH,GAC9CrH,EAAQj0D,eAAe,EAAGs7D,EAAe,EAC3C,CAMAr9C,eAAeg2C,EAA8ByG,GAC3CzG,EAAQj0D,eAAe,EAAG06D,EAAY,EACxC,CAOAz8C,wBAAwBg2C,EAA8BruE,GACpDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ70D,SAASxZ,EAAKhM,IAExB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,uBAAuBg2C,EAA8BC,GACnDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,uBAAuBg2C,GAErB,OADaA,EAAQtzD,WAEvB,CAEAsd,0BACIg2C,EAA8BoH,EAAkCC,EAChEZ,GAKF,OAJAS,EAAaI,kBAAkBtH,GAC/BkH,EAAaK,UAAUvH,EAASoH,GAChCF,EAAaM,WAAWxH,EAASqH,GACjCH,EAAaL,QAAQ7G,EAASyG,GACvBS,EAAaO,gBAAgBzH,EACtC,EA/IW,EAAAkH,aAAY,CAiJ1B,CAlJyC,GAAAp+C,MAAA,EAAAA,IAAG,IAkJ5C,CAlJ4B,GAAAD,eAAA,EAAAA,aAAY,IAkJxC,CAlJD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaC,EAAb,cACE,KAAAj1B,GAAkC,KAElC,KAAA0b,OAAS,CAidX,CA3cEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,0BAA0Bl2B,EAA4BqY,GACpD,OAAQA,GAAO,IAAI4c,GAAag3C,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACtF,CAOAk2B,sCAAsCl2B,EAA4BqY,GAEhE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI4c,GAAag3C,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACtF,CAQApF,KAAK4xE,GACH,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQA/lD,UAAU+lD,GACR,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKA9lD,OACE,IAAI3Y,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAAkBpT,KAAKqF,GAAIga,UAAUrf,KAAK+gB,OAAS3N,GAC1C+mB,EAAYC,aAAaC,IAAIpM,cAAc2kD,SAC7D,CAKAr7E,IACE,IAAI6b,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIib,YAAYtgB,KAAK+gB,OAAS3N,GAAU,CAC/D,CAKAlc,IACE,IAAIkc,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAK+gB,OAAS3N,GAAUpT,KAAKqF,GAAIwa,WAAW,EAAG,EACpF,CAQAzoB,EAAEy6E,GACA,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAMAn7E,EAAEgnB,GACA,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI3I,QACpC4/C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAMArN,EAAE0lB,GACA,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI6tC,OACpCoJ,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAMAmmB,OAAOnY,GACL,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIib,YAAYtgB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAa,CAC9F,CAKA4lE,eACE,IAAI7lE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKA2pB,cACE,IAAI3pB,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EACH,IAAItV,aACAkC,KAAKqF,GAAIkW,QAAQjlB,OAAQ0J,KAAKqF,GAAIkW,QAAQ2+C,WAAal6D,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GACvFpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,IACxC,IACN,CAMAqY,KAAKpY,GACH,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAC7DrT,KAAKqF,GAAIwa,WAAW,EAAG,EACzC,CAKAmd,aACE,IAAI5pB,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CASAsY,QAAQrY,EAAew+D,GACrB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKA50C,gBACE,IAAI7pB,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAuY,QAAQtY,EAAeqK,GACrB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI3I,QACpC4/C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKA63B,gBACE,IAAI9pB,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAwY,OAAOvY,EAAeqK,GACpB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI6tC,OACpCoJ,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKA6zE,eACE,IAAI9lE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,sBAAsBg2C,GACpBA,EAAQxzD,YAAY,GACtB,CAMAwd,eAAeg2C,EAA8BiE,GAC3CjE,EAAQj0D,eAAe,EAAGk4D,EAAY,EACxC,CAMAj6C,oBAAoBg2C,EAA8BkE,GAChDlE,EAAQj0D,eAAe,EAAGm4D,EAAiB,EAC7C,CAMAl6C,eAAeg2C,EAA8BxlD,GAC3CwlD,EAAQr0D,cAAc,EAAG6O,EAAMoO,EAAYC,aAAaC,IAAIpM,cAAc2kD,UAC5E,CAMAr3C,YAAYg2C,EAA8Bh6E,GACxCg6E,EAAQn0D,gBAAgB,EAAG7lB,EAAG,EAChC,CAMAgkC,YAAYg2C,EAA8Br6E,GACxCq6E,EAAQp0D,cAAc,EAAGjmB,EAAGq6E,EAAQ1xD,WAAW,EAAG,GACpD,CAMA0b,YAAYg2C,EAA8B4H,GACxC5H,EAAQj0D,eAAe,EAAG67D,EAAS,EACrC,CAMA59C,YAAYg2C,EAA8B6H,GACxC7H,EAAQj0D,eAAe,EAAG87D,EAAS,EACrC,CAMA79C,YAAYg2C,EAA8B8H,GACxC9H,EAAQj0D,eAAe,EAAG+7D,EAAS,EACrC,CAMA99C,iBAAiBg2C,EAA8B+H,GAC7C/H,EAAQj0D,eAAe,EAAGg8D,EAAc,EAC1C,CAOA/9C,0BAA0Bg2C,EAA8BruE,GACtDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ50D,WAAWzZ,EAAKhM,IAE1B,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,yBAAyBg2C,EAA8BC,GACrDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,eAAeg2C,EAA8BgI,GAC3ChI,EAAQj0D,eAAe,EAAGi8D,EAAY,EACxC,CAOAh+C,wBAAwBg2C,EAA8BruE,GACpDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ70D,SAASxZ,EAAKhM,IAExB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,uBAAuBg2C,EAA8BC,GACnDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,kBAAkBg2C,EAA8BiI,GAC9CjI,EAAQj0D,eAAe,GAAIk8D,EAAe,EAC5C,CAOAj+C,2BAA2Bg2C,EAA8BruE,GACvDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,0BAA0Bg2C,EAA8BC,GACtDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,kBAAkBg2C,EAA8BkI,GAC9ClI,EAAQj0D,eAAe,GAAIm8D,EAAe,EAC5C,CAOAl+C,2BAA2Bg2C,EAA8BruE,GACvDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,0BAA0Bg2C,EAA8BC,GACtDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,iBAAiBg2C,EAA8BmI,GAC7CnI,EAAQj0D,eAAe,GAAIo8D,EAAc,EAC3C,CAOAn+C,0BAA0Bg2C,EAA8BruE,GACtDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,yBAAyBg2C,EAA8BC,GACrDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,oBAAoBg2C,GAElB,OADaA,EAAQtzD,WAEvB,CAEAsd,uBACIg2C,EAA8BiE,EAAgCC,EAC9D1pD,EAAkDx0B,EAAWL,EAAqBiiF,EAClFC,EAA6BC,EAA6BC,EAC1DC,EAAgCC,EAAmCC,EACnEC,GAeF,OAdAp/C,EAAUq/C,eAAepI,GACzBj3C,EAAU67C,QAAQ5E,EAASiE,GAC3Bl7C,EAAU87C,aAAa7E,EAASkE,GAChCn7C,EAAUm8C,QAAQlF,EAASxlD,GAC3BuO,EAAUs/C,KAAKrI,EAASh6E,GACxB+iC,EAAUu/C,KAAKtI,EAASr6E,GACxBojC,EAAUw/C,KAAKvI,EAAS4H,GACxB7+C,EAAUy/C,KAAKxI,EAAS6H,GACxB9+C,EAAU0/C,KAAKzI,EAAS8H,GACxB/+C,EAAU2/C,UAAU1I,EAAS+H,GAC7Bh/C,EAAU4/C,QAAQ3I,EAASgI,GAC3Bj/C,EAAU6/C,WAAW5I,EAASiI,GAC9Bl/C,EAAU8/C,WAAW7I,EAASkI,GAC9Bn/C,EAAU+/C,UAAU9I,EAASmI,GACtBp/C,EAAUggD,aAAa/I,EAChC,EAndW,EAAAj3C,UAAS,CAqdvB,CAtdyC,GAAAD,MAAA,EAAAA,IAAG,IAsd5C,CAtd4B,GAAAD,eAAA,EAAAA,aAAY,IAsdxC,CAtdD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa6tC,EAAb,cACE,KAAA7iE,GAAkC,KAElC,KAAA0b,OAAS,CAwaX,CAlaEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,sBAAsBl2B,EAA4BqY,GAChD,OAAQA,GAAO,IAAIwqD,GAASoJ,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAClF,CAOAk2B,kCAAkCl2B,EAA4BqY,GAE5D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIwqD,GAASoJ,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAClF,CAOAwzD,aAAaxlD,EAAeqK,GAC1B,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI3I,QACpC4/C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKAulE,qBACE,IAAIx3D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAk3D,SAASj3D,EAAeqK,GACtB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI48C,WACpC3F,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKAglE,iBACE,IAAIj3D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAm0B,MAAMl0B,EAAeqK,GACnB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIouC,MACpC6I,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKA2lE,cACE,IAAI53D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmnE,eACE,IAAInnE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI8a,WAAWngB,KAAK+gB,OAAS3N,GAAU,CAC9D,CAOAonE,UAAUnnE,EAAeqK,GACvB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI+5C,UACpC9C,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKAo1E,kBACE,IAAIrnE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CASAi6B,OAAOh6B,EAAew+D,GACpB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKA1H,eACE,IAAI/2D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CASA+9C,QAAQ99C,EAAew+D,GACrB,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,EAAWw+D,GAAoB,IAC7G,CAKA/G,gBACE,IAAI13D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAOAsnE,mBAAmBrnE,EAAeqK,GAEhC,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIo+C,cACpCnH,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKAs1E,2BACE,IAAIvnE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,kBAAkBg2C,GAChBA,EAAQxzD,YAAY,EACtB,CAMAwd,uBAAuBg2C,EAA8BqJ,GACnDrJ,EAAQj0D,eAAe,EAAGs9D,EAAoB,EAChD,CAOAr/C,gCAAgCg2C,EAA8BruE,GAC5DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,+BAA+Bg2C,EAA8BC,GAC3DD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,mBAAmBg2C,EAA8BsJ,GAC/CtJ,EAAQj0D,eAAe,EAAGu9D,EAAgB,EAC5C,CAOAt/C,4BAA4Bg2C,EAA8BruE,GACxDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,2BAA2Bg2C,EAA8BC,GACvDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,gBAAgBg2C,EAA8BuJ,GAC5CvJ,EAAQj0D,eAAe,EAAGw9D,EAAa,EACzC,CAOAv/C,yBAAyBg2C,EAA8BruE,GACrDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,wBAAwBg2C,EAA8BC,GACpDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,uBAAuBg2C,EAA8BgJ,GACnDhJ,EAAQr0D,cAAc,EAAGq9D,EAAc,EACzC,CAMAh/C,oBAAoBg2C,EAA8BwJ,GAChDxJ,EAAQj0D,eAAe,EAAGy9D,EAAiB,EAC7C,CAOAx/C,6BAA6Bg2C,EAA8BruE,GACzDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,4BAA4Bg2C,EAA8BC,GACxDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,iBAAiBg2C,EAA8BsE,GAC7CtE,EAAQj0D,eAAe,EAAGu4D,EAAc,EAC1C,CAOAt6C,0BAA0Bg2C,EAA8BruE,GACtDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,yBAAyBg2C,EAA8BC,GACrDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,kBAAkBg2C,EAA8BuE,GAC9CvE,EAAQj0D,eAAe,EAAGw4D,EAAe,EAC3C,CAOAv6C,2BAA2Bg2C,EAA8BruE,GACvDquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,0BAA0Bg2C,EAA8BC,GACtDD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,6BAA6Bg2C,EAA8ByJ,GACzDzJ,EAAQj0D,eAAe,EAAG09D,EAA0B,EACtD,CAOAz/C,sCAAsCg2C,EAA8BruE,GAElEquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,qCAAqCg2C,EAA8BC,GACjED,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,gBAAgBg2C,GAEd,OADaA,EAAQtzD,WAEvB,CAEAsd,mBACIg2C,EAA8BqJ,EAAwCC,EACtEC,EAAiCP,EAAsBQ,EACvDlF,EAAkCC,EAClCkF,GAUF,OATA9S,EAAM+S,WAAW1J,GACjBrJ,EAAMgT,gBAAgB3J,EAASqJ,GAC/B1S,EAAMiT,YAAY5J,EAASsJ,GAC3B3S,EAAMkT,SAAS7J,EAASuJ,GACxB5S,EAAMmT,gBAAgB9J,EAASgJ,GAC/BrS,EAAMoT,aAAa/J,EAASwJ,GAC5B7S,EAAMyO,UAAUpF,EAASsE,GACzB3N,EAAM0O,WAAWrF,EAASuE,GAC1B5N,EAAMqT,sBAAsBhK,EAASyJ,GAC9B9S,EAAMsT,SAASjK,EACxB,EA1aW,EAAArJ,MAAK,CA4anB,CA7ayC,GAAA7tC,MAAA,EAAAA,IAAG,IA6a5C,CA7a4B,GAAAD,eAAA,EAAAA,aAAY,IA6axC,CA7aD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAib5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaohD,EAAb,cACE,KAAAp2E,GAAkC,KAElC,KAAA0b,OAAS,CAoQX,CA9PEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,sBAAsBl2B,EAA4BqY,GAChD,OAAQA,GAAO,IAAI+9D,GAASnK,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAClF,CAOAk2B,kCAAkCl2B,EAA4BqY,GAE5D,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI+9D,GAASnK,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAClF,CAKA0pB,YACE,IAAI3b,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAK+gB,OAAS3N,GAAUpT,KAAKqF,GAAIwa,WAAW,EAAG,EACpF,CAOAgP,YAAYxb,EAAeqK,GAEzB,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIm9C,eACpClG,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKAgrE,oBACE,IAAIj9D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAQA4b,aAAa6iD,GACX,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQA5iD,gBAAgB4iD,GACd,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAQAljD,OAAOkjD,GACL,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKA3iD,eACE,IAAI9b,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI+a,UAAUpgB,KAAK+gB,OAAS3N,GAAUpT,KAAKqF,GAAIwa,WAAW,EAAG,EACpF,CAQAiM,UAAU+lD,GACR,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAMA1iD,MAAMzR,GACJ,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAI6tC,OACpCoJ,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAQAq2E,eAAe7J,GACb,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,IAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAKAt2C,kBAAkBg2C,GAChBA,EAAQxzD,YAAY,EACtB,CAMAwd,oBAAoBg2C,EAA8BxiD,GAChDwiD,EAAQp0D,cAAc,EAAG4R,EAAWwiD,EAAQ1xD,WAAW,EAAG,GAC5D,CAMA0b,sBAAsBg2C,EAA8BoK,GAClDpK,EAAQj0D,eAAe,EAAGq+D,EAAmB,EAC/C,CAOApgD,+BAA+Bg2C,EAA8BruE,GAC3DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,8BAA8Bg2C,EAA8BC,GAC1DD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,uBAAuBg2C,EAA8BqK,GACnDrK,EAAQj0D,eAAe,EAAGs+D,EAAoB,EAChD,CAMArgD,0BAA0Bg2C,EAA8BsK,GACtDtK,EAAQj0D,eAAe,EAAGu+D,EAAuB,EACnD,CAMAtgD,iBAAiBg2C,EAA8BmE,GAC7CnE,EAAQj0D,eAAe,EAAGo4D,EAAc,EAC1C,CAMAn6C,uBAAuBg2C,EAA8BriD,GACnDqiD,EAAQp0D,cAAc,EAAG+R,EAAcqiD,EAAQ1xD,WAAW,EAAG,GAC/D,CAMA0b,oBAAoBg2C,EAA8BkE,GAChDlE,EAAQj0D,eAAe,EAAGm4D,EAAiB,EAC7C,CAMAl6C,gBAAgBg2C,EAA8BuK,GAC5CvK,EAAQj0D,eAAe,EAAGw+D,EAAa,EACzC,CAMAvgD,yBAAyBg2C,EAA8BwK,GACrDxK,EAAQj0D,eAAe,EAAGy+D,EAAsB,EAClD,CAMAxgD,gBAAgBg2C,GAEd,OADaA,EAAQtzD,WAEvB,CAEAsd,mBACIg2C,EAA8BxiD,EAA6B4sD,EAC3DC,EAAwCC,EACxCnG,EAAkCxmD,EAAgCumD,EAClEqG,EAAiCC,GAWnC,OAVAN,EAAMO,WAAWzK,GACjBkK,EAAMQ,aAAa1K,EAASxiD,GAC5B0sD,EAAMS,eAAe3K,EAASoK,GAC9BF,EAAMU,gBAAgB5K,EAASqK,GAC/BH,EAAMW,mBAAmB7K,EAASsK,GAClCJ,EAAMpF,UAAU9E,EAASmE,GACzB+F,EAAMY,gBAAgB9K,EAASriD,GAC/BusD,EAAMrF,aAAa7E,EAASkE,GAC5BgG,EAAMa,SAAS/K,EAASuK,GACxBL,EAAMc,kBAAkBhL,EAASwK,GAC1BN,EAAMe,SAASjL,EACxB,EAtQW,EAAAkK,MAAK,CAwQnB,CAzQyC,GAAAphD,MAAA,EAAAA,IAAG,IAyQ5C,CAzQ4B,GAAAD,eAAA,EAAAA,aAAY,IAyQxC,CAzQD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6Q5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaoiD,EAAb,cACE,KAAAp3E,GAAkC,KAElC,KAAA0b,OAAS,CAiKX,CA3JEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,kCAAkCl2B,EAA4BqY,GAC5D,OAAQA,GAAO,IAAI++D,GAAqBnL,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC9F,CAOAk2B,8CAA8Cl2B,EAA4BqY,GAGxE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI++D,GAAqBnL,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC9F,CAMAq3E,YAAYrpE,GACV,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI8a,WAAWngB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAa,CAC7F,CAKAspE,oBACE,IAAIvpE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAwpE,mBACE,IAAIxpE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EACH,IAAIxV,YACAoC,KAAKqF,GAAIkW,QAAQjlB,OAAQ0J,KAAKqF,GAAIkW,QAAQ2+C,WAAal6D,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GACvFpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,IACxC,IACN,CAMAypE,gBAAgBxpE,GACd,IAAID,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIgb,WAAWrgB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAC9DrT,KAAKqF,GAAIwa,WAAW,EAAG,EACzC,CAKAi9D,wBACE,IAAI1pE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,8BAA8Bg2C,GAC5BA,EAAQxzD,YAAY,EACtB,CAMAwd,sBAAsBg2C,EAA8BwL,GAClDxL,EAAQj0D,eAAe,EAAGy/D,EAAmB,EAC/C,CAOAxhD,+BAA+Bg2C,EAA8BruE,GAC3DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ90D,SAASvZ,EAAKhM,IAExB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,8BAA8Bg2C,EAA8BC,GAC1DD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,0BAA0Bg2C,EAA8ByL,GACtDzL,EAAQj0D,eAAe,EAAG0/D,EAAuB,EACnD,CAOAzhD,mCAAmCg2C,EAA8BruE,GAC/DquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQ70D,SAASxZ,EAAKhM,IAExB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,kCAAkCg2C,EAA8BC,GAC9DD,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,4BAA4Bg2C,GAE1B,OADaA,EAAQtzD,WAEvB,CAEAsd,+BACIg2C,EAA8BwL,EAC9BC,GAIF,OAHAP,EAAkBQ,uBAAuB1L,GACzCkL,EAAkBS,eAAe3L,EAASwL,GAC1CN,EAAkBU,mBAAmB5L,EAASyL,GACvCP,EAAkBW,qBAAqB7L,EAChD,EAnKW,EAAAkL,kBAAiB,CAqK/B,CAtKyC,GAAApiD,MAAA,EAAAA,IAAG,IAsK5C,CAtK4B,GAAAD,eAAA,EAAAA,aAAY,IAsKxC,CAtKD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0K5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAagjD,EAAb,cACE,KAAAh4E,GAAkC,KAElC,KAAA0b,OAAS,CA+FX,CAzFEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,qCAAqCl2B,EAA4BqY,GAC/D,OAAQA,GAAO,IAAI2/D,GAAwB/L,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACjG,CAOAk2B,iDAAiDl2B,EAA4BqY,GAG3E,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI2/D,GAAwB/L,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACjG,CAQAi4E,QAAQzL,GACN,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAMA0L,aAAa7/D,GACX,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAImjD,cACpClM,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAKAk2B,iCAAiCg2C,GAC/BA,EAAQxzD,YAAY,EACtB,CAMAwd,kBAAkBg2C,EAA8BkM,GAC9ClM,EAAQj0D,eAAe,EAAGmgE,EAAe,EAC3C,CAMAliD,uBAAuBg2C,EAA8BmM,GACnDnM,EAAQj0D,eAAe,EAAGogE,EAAoB,EAChD,CAMAniD,+BAA+Bg2C,GAC7B,IAAIn+D,EAASm+D,EAAQtzD,YAErB,OADAszD,EAAQvyD,cAAc5L,EAAQ,GACvBA,CACT,CAEAmoB,kCACIg2C,EAA8BkM,EAC9BC,GAIF,OAHAL,EAAqBM,0BAA0BpM,GAC/C8L,EAAqBO,WAAWrM,EAASkM,GACzCJ,EAAqBQ,gBAAgBtM,EAASmM,GACvCL,EAAqBS,wBAAwBvM,EACtD,EAjGW,EAAA8L,qBAAoB,CAmGlC,CApGyC,GAAAhjD,MAAA,EAAAA,IAAG,IAoG5C,CApG4B,GAAAD,eAAA,EAAAA,aAAY,IAoGxC,CApGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAwG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAamjD,EAAb,cACE,KAAAn4E,GAAkC,KAElC,KAAA0b,OAAS,CA6HX,CAvHEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,6BAA6Bl2B,EAA4BqY,GACvD,OAAQA,GAAO,IAAI8/D,GAAgBlM,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACzF,CAOAk2B,yCAAyCl2B,EAA4BqY,GAEnE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAI8/D,GAAgBlM,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EACzF,CAMA04E,QAAQrgE,GACN,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIoiD,mBACpCnL,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAOA24E,sBAAsB3qE,EAAeqK,GAEnC,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIgjD,sBACpC/L,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAKqF,GAAIgc,SAASrhB,KAAK+gB,OAAS3N,GAAkB,EAARC,GAAYrT,KAAKqF,IAC3F,IAClB,CAKA44E,8BACE,IAAI7qE,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAIic,aAAathB,KAAK+gB,OAAS3N,GAAU,CAChE,CAKAmoB,yBAAyBg2C,GACvBA,EAAQxzD,YAAY,EACtB,CAMAwd,kBAAkBg2C,EAA8B2M,GAC9C3M,EAAQj0D,eAAe,EAAG4gE,EAAe,EAC3C,CAMA3iD,gCAAgCg2C,EAA8B4M,GAC5D5M,EAAQj0D,eAAe,EAAG6gE,EAA6B,EACzD,CAOA5iD,yCAAyCg2C,EAA8BruE,GAErEquE,EAAQjyD,YAAY,EAAGpc,EAAK7J,OAAQ,GACpC,IAAK,IAAInC,EAAIgM,EAAK7J,OAAS,EAAGnC,GAAK,EAAGA,IACpCq6E,EAAQh0D,UAAUra,EAAKhM,IAEzB,OAAOq6E,EAAQ7xD,WACjB,CAMA6b,wCAAwCg2C,EAA8BC,GACpED,EAAQjyD,YAAY,EAAGkyD,EAAU,EACnC,CAMAj2C,uBAAuBg2C,GAErB,OADaA,EAAQtzD,WAEvB,CAEAsd,0BACIg2C,EAA8B2M,EAC9BC,GAIF,OAHAX,EAAaY,kBAAkB7M,GAC/BiM,EAAaa,WAAW9M,EAAS2M,GACjCV,EAAac,yBAAyB/M,EAAS4M,GACxCX,EAAae,gBAAgBhN,EACtC,EA/HW,EAAAiM,aAAY,CAiI1B,CAlIyC,GAAAnjD,MAAA,EAAAA,IAAG,IAkI5C,CAlI4B,GAAAD,eAAA,EAAAA,aAAY,IAkIxC,CAlID,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsI5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa61C,EAAb,cACE,KAAA7qE,GAAkC,KAElC,KAAA0b,OAAS,CAyIX,CAnIEuwD,OAAOp6E,EAAWmO,GAGhB,OAFArF,KAAK+gB,OAAS7pB,EACd8I,KAAKqF,GAAKA,EACHrF,IACT,CAOAu7B,iCAAiCl2B,EAA4BqY,GAC3D,OAAQA,GAAO,IAAIwyD,GAAoBoB,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC7F,CAOAk2B,6CAA6Cl2B,EAA4BqY,GAEvE,OADArY,EAAGyY,YAAYzY,EAAGmW,WAAa,EAAA1C,YAAYM,qBACnCsE,GAAO,IAAIwyD,GAAoBoB,OAAOjsE,EAAGga,UAAUha,EAAGmW,YAAcnW,EAAGmW,WAAYnW,EAC7F,CAMAk2B,2BAA2Bl2B,GACzB,OAAOA,EAAGkc,iBAAiB,OAC7B,CAQAi9D,WAAW3M,GACT,IAAIz+D,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,EAASpT,KAAKqF,GAAI6b,SAASlhB,KAAK+gB,OAAS3N,EAAQy+D,GAAoB,IAC9E,CAMAzB,MAAM1yD,GACJ,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAIohD,OACpCnK,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAMAk4E,aAAa7/D,GACX,IAAItK,EAASpT,KAAKqF,GAAIyb,SAAS9gB,KAAK+gB,OAAQ,GAC5C,OAAO3N,GAAUsK,GAAO,IAAIyc,EAAYC,aAAaC,IAAImjD,cACpClM,OAAOtxE,KAAKqF,GAAI+b,WAAWphB,KAAK+gB,OAAS3N,GAASpT,KAAKqF,IAC5D,IAClB,CAKAk2B,6BAA6Bg2C,GAC3BA,EAAQxzD,YAAY,EACtB,CAMAwd,qBAAqBg2C,EAA8BkN,GACjDlN,EAAQj0D,eAAe,EAAGmhE,EAAkB,EAC9C,CAMAljD,gBAAgBg2C,EAA8BmN,GAC5CnN,EAAQj0D,eAAe,EAAGohE,EAAa,EACzC,CAMAnjD,uBAAuBg2C,EAA8BmM,GACnDnM,EAAQj0D,eAAe,EAAGogE,EAAoB,EAChD,CAMAniD,2BAA2Bg2C,GAEzB,OADaA,EAAQtzD,WAEvB,CAMAsd,oCAAoCg2C,EAA8Bn+D,GAChEm+D,EAAQ9yD,OAAOrL,EAAQ,OACzB,CAMAmoB,gDAAgDg2C,EAA8Bn+D,GAC5Em+D,EAAQ9yD,OAAOrL,EAAQ,QAAQ,EACjC,CAEAmoB,8BACIg2C,EAA8BkN,EAAsCC,EACpEhB,GAKF,OAJAxN,EAAiByO,sBAAsBpN,GACvCrB,EAAiB0O,cAAcrN,EAASkN,GACxCvO,EAAiB2O,SAAStN,EAASmN,GACnCxO,EAAiB2N,gBAAgBtM,EAASmM,GACnCxN,EAAiB4O,oBAAoBvN,EAC9C,EA3IW,EAAArB,iBAAgB,CA6I9B,CA9IyC,GAAA71C,MAAA,EAAAA,IAAG,IA8I5C,CA9I4B,GAAAD,eAAA,EAAAA,aAAY,IA8IxC,CA9ID,CAAiB,EAAAD,cAAA,EAAAA,YAAW,I,6GCxoH5B,gBAGA,UAEA,6BACEjM,YAAoBsK,GAAA,KAAAA,UAClBx4B,KAAKsiC,WAAatiC,KAAKw4B,QAAQ8J,WAC/BtiC,KAAK++E,YAAc/+E,KAAKw4B,QAAQumD,WAClC,CAEAzmD,gBAAgC,CAGhCA,UACI0mD,EAAiCC,EACjCC,GACF,MAAMC,EAAW,IAAI1kD,IACrB,IAAK,MAAMx6B,KAAQ++E,EACjB,GAAIlnF,OAAOq0B,eAAe5f,KAAKyyE,EAAO/+E,GAAO,CAC3C,MAAMm/E,EAAOJ,EAAM/+E,GACnBk/E,EAASl0E,IACLhL,EACA,IAAI,SACAm/E,EAAKvvD,KAAMuvD,EAAKrzD,UAA+B/Y,OAAWA,EAC1DosE,EAAKl8E,M,CAGjB,MAAMm8E,QAAkBr/E,KAAKw4B,QAAQ4V,IAAI+wC,GACnC3wD,EAAoC,CAAC,EAI3C,OAHA6wD,EAAUt8E,SAAQ,CAACsrC,EAAQpuC,KACzBuuB,EAAOvuB,GAAQ,IAAI,EAAAyxB,OAAO2c,EAAOtiB,KAAMsiB,EAAOnrC,KAAMmrC,EAAOxe,KAAK,IAE3DrB,CACT,CACA8wD,iBACEt/E,KAAKw4B,QAAQ8mD,gBACf,CACAC,eACEv/E,KAAKw4B,QAAQ+mD,cACf,E,gGCxCF,gBACA,UAEA,UACA,UAEA,UACA,UAiBA,gBACErxD,YAAYqtC,EAAyB,CAAC,GACpCv7D,KAAKw/E,cAAe,EACpBx/E,KAAKq9B,YAAck+B,EAAOl+B,YAC1Br9B,KAAKi1D,SAAW,EAAAwqB,SAAS1lE,OAAOwhD,EAAOtG,UACvCj1D,KAAK4+B,QAAU,CAACq2B,SAAUj1D,KAAKi1D,SAAUyqB,gBAAiB,GAAIC,eAAgB,GAChF,CAEIr9C,iBACF,OAAOtiC,KAAK4/E,OAAOzwD,MAAM+5C,eAC3B,CACI6V,kBACF,OAAO/+E,KAAK4/E,OAAOzwD,MAAMk6C,gBAC3B,CAEAiW,iBACEt/E,KAAKi1D,SAASjhD,OAChB,CAEAurE,eACEv/E,KAAKi1D,SAAS8Z,MAChB,CAKAz2C,gBAAgB74B,EAAoCy6D,EAAqB7gE,SACjE2G,KAAKi1D,SAASK,MAAM,UAAW,qBAAqBh9B,UAExD,MAAMiF,QAAgB,EAAAQ,eAAe/9B,KAAKq9B,aAI1C,GAHAr9B,KAAKgnE,eAAiBzpC,EAAQE,qBAAqBz9B,KAAK4+B,SAExD5+B,KAAK4/E,OAAS,IAAI,EAAAnE,MACC,iBAARh8E,EAAkB,CAC3B,MAAMkwE,EAAclwE,EAAIkxE,SAAS,QACjC,GAAqB,oBAAV1jE,MAAuB,CAEhC,MAAMmI,QAAY,EAAAkkB,UAAU,EAAAngC,SAAV,CAAoBsG,GACtCO,KAAKw9B,WAAWpoB,EAAKu6D,E,KAChB,CAEL,MAAM70E,QAAiBmS,MAAMxN,GACvB2V,QAAYta,EAASuS,cAC3BrN,KAAKw9B,WAAW,IAAItkC,WAAWkc,GAAMu6D,E,OAElC,GAAKrnC,YAAYu3C,OAAOpgF,GAM7BO,KAAKw9B,WAAW/9B,OANmB,CAEnC,MAAM68B,EAAM,IAAIpjC,WAAWuG,EAAKy6D,GAAc,EAAG7gE,GAAUoG,EAAIhB,YAC/DuB,KAAKw9B,WAAWlB,E,IAMtB,CAEQkB,WAAWsiD,EAA4BnQ,GAC7C,GAAI3vE,KAAKw/E,aACP,MAAM,IAAIhhF,MAAM,uBAGlBwB,KAAKi1D,SAASK,MAAM,UAAW,sBAAsB,KAEnD,MAAMuT,EACF7oE,KAAKgnE,eAAe+B,eAAiB/oE,KAAKgnE,oBAAsCh0D,EACpFhT,KAAK4/E,OAAOlQ,KAAKoQ,EAAgBjX,EAAkB8G,GAG/C3vE,KAAKgnE,eAAepO,oBACtB54D,KAAKgnE,eAAepO,mBAAmB54D,KAAK4/E,OAAOzwD,OAGrDnvB,KAAK+/E,cAAc//E,KAAK4/E,OAAOzwD,OAG/BnvB,KAAKggF,eAAiB,IAAI,EAAAC,cAAcjgF,KAAK4/E,OAAOzwD,MAAOnvB,KAAK2mE,KAAM3mE,KAAKi1D,SAAS,IAGtFj1D,KAAKw/E,cAAe,CACtB,CAEAlnD,UAAU+U,GACR,IAAKrtC,KAAKw/E,aACR,MAAM,IAAIhhF,MAAM,+BAGlB,OAAOwB,KAAKi1D,SAASK,MAAM,UAAW,eAAeh9B,UACnD,MAAMmvC,EAAeznE,KAAKkgF,2BAA2B7yC,GAE/C8yC,QAAsBngF,KAAKggF,eAAeI,QAAQpgF,KAAKgnE,eAAgBS,GAE7E,OAAOznE,KAAKqgF,aAAaF,EAAc,GAE3C,CAEQD,2BAA2B7yC,GACjC,MAAMizC,EAAkBtgF,KAAK4/E,OAAOzwD,MAAM+5C,gBAI1C,GAAIl+D,MAAMoiB,QAAQigB,IAChB,GAAIA,EAAOh0C,SAAWinF,EAAgBjnF,OACpC,MAAM,IAAImF,MAAM,0CAA0C8hF,EAAgBjnF,kBAAkBg0C,EAAOh0C,cAKlG,CACH,GAAIg0C,EAAOj1B,OAASkoE,EAAgBjnF,OAClC,MAAM,IAAImF,MAAM,sCAAsC8hF,EAAgBjnF,kBAAkBg0C,EAAOj1B,QAGjG,MAAMmoE,EAAe,IAAIv1E,MAAcqiC,EAAOj1B,MAC9C,IAAIooE,EAAoB,EACxB,IAAK,IAAItpF,EAAI,EAAGA,EAAIopF,EAAgBjnF,SAAUnC,EAAG,CAC/C,MAAMm3C,EAAShB,EAAOzlC,IAAI04E,EAAgBppF,IAC1C,IAAKm3C,EACH,MAAM,IAAI7vC,MAAM,8BAA8ByB,SAEhDsgF,EAAaC,KAAuBnyC,C,CAGtChB,EAASkzC,C,CAKX,GAAKvgF,KAAK4+B,QAAQ8gD,iBAA2D,IAAxC1/E,KAAK4+B,QAAQ8gD,gBAAgBrmF,QAAiB2G,KAAK4+B,QAAQ+gD,gBACrD,IAAvC3/E,KAAK4+B,QAAQ+gD,eAAetmF,OAqB9B2G,KAAKygF,wBAAwBzgF,KAAK4+B,QAAQ+gD,eAAgBtyC,GAAQ,OArBtB,CAC5C,MAAMqzC,EAAoB1gF,KAAK4/E,OAAOzwD,MAAM43C,kBACtC4Z,EAAc3gF,KAAK4/E,OAAOzwD,MAAM2pC,YAEhC6mB,EAAiB,IAAI30E,MAAyB01E,EAAkBrnF,QAEtE,IAAK,IAAInC,EAAI,EAAGA,EAAIwpF,EAAkBrnF,SAAUnC,EAAG,CACjD,MAAM0pF,EAAaD,EAAYD,EAAkBxpF,IACjDyoF,EAAezoF,GAAK0pF,EAAW70D,KAAM6F,MAAM/B,KAI3C7vB,KAAK4+B,QAAQ8gD,gBAAiBh/E,KAAKkgF,EAAW70D,KAAM0F,YACpDzxB,KAAK4+B,QAAQ+gD,eAAgBj/E,KAAK2sC,EAAOn2C,GAAG24B,K,CAG9C7vB,KAAKygF,wBAAwBd,EAAgBtyC,GAAQ,E,CAWvD,OAFArtC,KAAK6gF,yBAAyB7gF,KAAK4+B,QAAQ8gD,gBAAkBryC,GAEtDA,CACT,CAEQwzC,yBAAyBnB,EAAoCoB,GACnE,IAAK,IAAI5pF,EAAI,EAAGA,EAAI4pF,EAAYznF,OAAQnC,IAAK,CAC3C,MAAM6pF,EAAerB,EAAgBxoF,GAC/B8pF,EAAaF,EAAY5pF,GAAG60B,KAClC,GAAIg1D,IAAiBC,EACnB,MAAM,IAAIxiF,MAAM,gBAAgBtH,mCAAmC6pF,cAAyBC,I,CAGlG,CAEQP,wBACJd,EAA0CmB,EAAuBG,GACnE,IAAK,IAAI/pF,EAAI,EAAGA,EAAI4pF,EAAYznF,OAAQnC,IAAK,CAC3C,MAAMgqF,EAAevB,EAAezoF,GAC9BiqF,EAAaL,EAAY5pF,GAAG24B,KAClC,IAAK7vB,KAAKohF,kBAAkBF,EAAcC,EAAYF,GACpD,MAAM,IAAIziF,MAAM,gBAAgBtH,qCAAqCgqF,EAAa9sE,KAAK,mBACnF+sE,EAAW/sE,KAAK,Q,CAG1B,CAEQgtE,kBAAkBF,EAAiCC,EAA+BF,GAExF,GAAIC,EAAa7nF,SAAW8nF,EAAW9nF,OACrC,OAAO,EAGT,IAAK,IAAInC,EAAI,EAAGA,EAAIgqF,EAAa7nF,SAAUnC,EACzC,GAAIgqF,EAAahqF,KAAOiqF,EAAWjqF,MAAQ+pF,GAAwC,IAApBC,EAAahqF,IAE1E,OAAO,EAIX,OAAO,CACT,CAEQmpF,aAAaF,GACnB,MAAMkB,EAAmBrhF,KAAK4/E,OAAOzwD,MAAMk6C,iBAC3C,GAAI8W,EAAc9mF,SAAWgoF,EAAiBhoF,OAC5C,MAAM,IAAImF,MAAM,uEAGlB,MAAMgwB,EAAS,IAAIiM,IACnB,IAAK,IAAIvjC,EAAI,EAAGA,EAAImqF,EAAiBhoF,SAAUnC,EAC7Cs3B,EAAOvjB,IAAIo2E,EAAiBnqF,GAAIipF,EAAcjpF,IAGhD,OAAOs3B,CACT,CAEQuxD,cAAc5wD,GACpB,MAAMoY,EAAQpY,EAAMu3C,WACpB1mE,KAAK2mE,KAAO,IAAI37D,MAAMu8B,EAAMluC,QAE5B,IAAK,IAAInC,EAAI,EAAGA,EAAIqwC,EAAMluC,OAAQnC,IAChC8I,KAAK2mE,KAAKzvE,GAAK8I,KAAKgnE,eAAez5D,QAAQg6B,EAAMrwC,GAAI8I,KAAK4/E,OAAO5mB,OAAQ7pC,EAE7E,E,yLCjPF,gBACA,aACA,UAEA,UACA,UAEA,IAAO+K,EAAS,EAAAC,YAAYC,aAAaC,IAiCzC,MAAa3I,EA+GXxD,YAIoB2B,EAIA9D,EAA+Bu1D,EACvCC,EAA+Cn+D,EAIvCsrB,EAAe,EAAAhtB,KAAK3H,UATpB,KAAA8V,OAIA,KAAA9D,OAA+B,KAAAu1D,eACvC,KAAAC,oBAA+C,KAAAn+D,QAIvC,KAAAsrB,SAClB1uC,KAAKoY,KAAO,EAAA4rB,UAAUw9C,wBAAwB3xD,GAC9C,MAAMzX,EAAOpY,KAAKoY,KACZqpE,OAA0BzuE,IAAjBsuE,QAAoDtuE,IAAtBuuE,QAA6CvuE,IAAVoQ,EAEhF,QAAcpQ,IAAVoQ,GACEA,EAAM/pB,SAAW+e,EACnB,MAAM,IAAIiM,WAAW,yCAIzB,GAAa,WAAT0H,EAAmB,CACrB,UAAc/Y,IAAVoQ,GAAyBpY,MAAMoiB,QAAQhK,IAAWA,EAAM2qC,OAAM72D,GAAkB,iBAANA,KAC5E,MAAM,IAAI0qB,UAAU,kCAGlB6/D,IACFzhF,KAAKojB,MAAQ,IAAIpY,MAAcoN,G,KAE5B,CACL,QAAcpF,IAAVoQ,EAAqB,CACvB,MAAM8K,EAAcwzD,EAAoB31D,GACxC,KAAM3I,aAAiB8K,GACrB,MAAM,IAAItM,UAAU,wBAAwBsM,EAAYjuB,O,CAI5D,GAAIwhF,EAAO,CACT,MAAMrsE,EAAM,IAAIkzB,YAAYlwB,EA2JpC,SAAgB2T,GACd,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,QACH,OAAO,EACT,IAAK,QACL,IAAK,SACH,OAAO,EACT,IAAK,QACL,IAAK,SACL,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,QACE,MAAM,IAAIvtB,MAAM,qCAAqCutB,KAE3D,CA7K2C41D,CAAO51D,IAC1C/rB,KAAKojB,MAoMb,SAAoB/H,EAAyB0Q,GAC3C,OAAO,IAAK21D,EAAoB31D,GAAzB,CAAgC1Q,EACzC,CAtMqBumE,CAAWxsE,EAAK2W,E,EAGnC,CAxJI7oB,WACF,QAAmB8P,IAAfhT,KAAKojB,MAAqB,CAC5B,MAAMlgB,EAAOlD,KAAKshF,aAActhF,KAAK0uC,QACrC,GAAIxrC,EAAK7J,SAAW2G,KAAKoY,KACvB,MAAM,IAAI5Z,MAAM,8FAElBwB,KAAKojB,MAAQlgB,C,CAEf,OAAOlD,KAAKojB,KACd,CAKI4M,iBACF,GAAkB,WAAdhwB,KAAK+rB,KACP,MAAM,IAAInK,UAAU,2BAGtB,OAAO5hB,KAAKkD,IACd,CAMIgmD,kBACF,OAAQlpD,KAAK+rB,MACX,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,OACH,OAAO/rB,KAAKkD,KAEd,QACE,MAAM,IAAI0e,UAAU,8EAE1B,CAKIkO,gBACF,OAAQ9vB,KAAK+rB,MACX,IAAK,UACL,IAAK,UACH,OAAO/rB,KAAKkD,KAEd,QACE,MAAM,IAAI0e,UAAU,6CAE1B,CAMIqtB,iBACF,GAAkB,WAAdjvC,KAAK+rB,KACP,OAAO/rB,KAAKkD,KAEd,MAAM,IAAI0e,UAAU,qCACtB,CAKAha,IAAI8wE,GACF,OAAO14E,KAAKkD,KAAK,EAAA8gC,UAAUyH,gBAAgBitC,EAAS14E,KAAK+hC,SAC3D,CAKA92B,IAAIytE,EAA4Bz8D,GAC9Bjc,KAAKkD,KAAK,EAAA8gC,UAAUyH,gBAAgBitC,EAAS14E,KAAK+hC,UAAY9lB,CAChE,CAKAqc,gBAIE,YAHmBtlB,IAAfhT,KAAKojB,QACPpjB,KAAKojB,YAAcpjB,KAAKuhF,kBAAmBvhF,KAAK0uC,SAE3C1uC,KAAKojB,KACd,CAWI2e,cAIF,OAHK/hC,KAAK6hF,WACR7hF,KAAK6hF,SAAW,EAAA79C,UAAUqM,eAAerwC,KAAK6vB,OAEzC7vB,KAAK6hF,QACd,CAqDAtmD,iBAAiBumD,GACf,IAAKA,EACH,MAAM,IAAItjF,MAAM,+CAElB,MAAMutB,EAAO,EAAAouB,UAAUC,wBAAwB0nC,EAAYzxD,UACrDR,EAAO,EAAAsqB,UAAU4vB,oBAAoB+X,EAAYjyD,MAEjD5T,EAAQ,IAAIyV,EAAO7B,EAAM9D,GAE/B,GAAa,WAATA,EAGF+1D,EAAY9xD,WAAYjtB,SAAQ,CAACohB,EAAKjtB,KACpC+kB,EAAM/Y,KAAKhM,GAAK,EAAA0lC,iBAAiBzY,EAAI,SAGlC,GACH29D,EAAYvxD,SAAqD,iBAAnCuxD,EAAYvxD,QAAQ9xB,YAClDqjF,EAAYvxD,QAAQ9xB,WAAa,EAAG,CAItC,MAAMsjF,EAAW9lE,EAAM/Y,KACjB8+E,EACF,IAAIC,SAASH,EAAYvxD,QAAQj6B,OAAQwrF,EAAYvxD,QAAQ2pC,WAAY4nB,EAAYvxD,QAAQ9xB,YAC3FyjF,EAAcC,EAAYL,EAAYzxD,UACtCh3B,EAASyoF,EAAYvxD,QAAQ9xB,WAAayjF,EAEhD,GAAIJ,EAAYvxD,QAAQ9xB,WAAayjF,GAAgB,EACnD,MAAM,IAAI1jF,MAAM,yBAElB,GAAIujF,EAAS1oF,SAAWA,EACtB,MAAM,IAAImF,MAAM,0BAGlB,IAAK,IAAItH,EAAI,EAAGA,EAAImC,EAAQnC,IAAK,CAC/B,MAAMd,EAAIgsF,EAAUJ,EAAYF,EAAYzxD,SAAWn5B,EAAIgrF,GAC3DH,EAAS7qF,GAAKd,C,MAEX,CAEL,IAAI61D,EACJ,OAAQ61B,EAAYzxD,UAClB,KAAK,EAAA1F,KAAK4B,YAAYsE,SAAS2K,MAC7BywB,EAAQ61B,EAAYhyD,UACpB,MACF,KAAK,EAAAnF,KAAK4B,YAAYsE,SAASwxD,MAC/B,KAAK,EAAA13D,KAAK4B,YAAYsE,SAASyxD,MAC/B,KAAK,EAAA33D,KAAK4B,YAAYsE,SAAS0xD,OAC/B,KAAK,EAAA53D,KAAK4B,YAAYsE,SAAS2xD,KAC/B,KAAK,EAAA73D,KAAK4B,YAAYsE,SAAS4xD,MAC/B,KAAK,EAAA93D,KAAK4B,YAAYsE,SAAS6xD,KAC7Bz2B,EAAQ61B,EAAY/xD,UACpB,MACF,KAAK,EAAApF,KAAK4B,YAAYsE,SAAS8xD,MAC7B12B,EAAQ61B,EAAY7xD,UACpB,MACF,KAAK,EAAAtF,KAAK4B,YAAYsE,SAAS+xD,OAC7B32B,EAAQ61B,EAAY3xD,WACpB,MACF,KAAK,EAAAxF,KAAK4B,YAAYsE,SAASgyD,OAC/B,KAAK,EAAAl4D,KAAK4B,YAAYsE,SAASiyD,OAC7B72B,EAAQ61B,EAAY1xD,WACpB,MACF,QAEE,MAAM,IAAI5xB,MAAM,oBAGpB,GAAIytD,QACF,MAAM,IAAIztD,MAAM,oDAGlB,MAAM0E,EAAO+Y,EAAM/Y,KACnB,GAAIA,EAAK7J,SAAW4yD,EAAM5yD,OACxB,MAAM,IAAImF,MAAM,yBAGlB,IAAK,IAAItH,EAAI,EAAGA,EAAI+0D,EAAM5yD,OAAQnC,IAAK,CACrC,MAAM6rF,EAAU92B,EAAM/0D,GAClB,UAAK2rB,OAAOkgE,GACd7/E,EAAKhM,GAAKmlC,EAAa0mD,EAASjB,EAAYzxD,UAE5CntB,EAAKhM,GAAK6rF,C,EAKhB,OAAO9mE,CACT,CASAsf,gBAAgBr4B,EAA2C2sB,EAAyB9D,GAClF,OAAO,IAAI2F,EAAO7B,EAAM9D,OAAM/Y,OAAWA,EAAW9P,EACtD,CAEAq4B,qBAAqBynD,GACnB,IAAKA,EACH,MAAM,IAAIxkF,MAAM,+CAElB,MAAMqxB,EAAO,EAAAsqB,UAAU0wB,wBAAwBmY,GACzCj3D,EAAO,EAAAouB,UAAUC,wBAAwB4oC,EAAU3yD,YAEnDpU,EAAQ,IAAIyV,EAAO7B,EAAM9D,GAE/B,GAAa,WAATA,EAGF,IAAK,IAAI70B,EAAI,EAAGA,EAAI8rF,EAAUjL,mBAAoB7gF,IAChD+kB,EAAM/Y,KAAKhM,GAAK8rF,EAAUhzD,WAAW94B,QAGlC,GACH8rF,EAAUlL,gBAAuD,iBAA9BkL,EAAUnL,iBAAgCmL,EAAUnL,gBAAkB,EAAG,CAI9G,MAAMkK,EAAW9lE,EAAM/Y,KACjB8+E,EAAa,IAAIC,SACnBe,EAAUlL,eAAgBxhF,OAAQ0sF,EAAUlL,eAAgB5d,WAAY8oB,EAAUnL,iBAChFqK,EAAcC,EAAYa,EAAU3yD,YACpCh3B,EAAS2pF,EAAUnL,gBAAkBqK,EAE3C,GAAIc,EAAUnL,gBAAkBqK,GAAgB,EAC9C,MAAM,IAAI1jF,MAAM,yBAElB,GAAIujF,EAAS1oF,SAAWA,EACtB,MAAM,IAAImF,MAAM,0BAGlB,IAAK,IAAItH,EAAI,EAAGA,EAAImC,EAAQnC,IAAK,CAC/B,MAAMd,EAAIgsF,EAAUJ,EAAYgB,EAAU3yD,WAAYn5B,EAAIgrF,GAC1DH,EAAS7qF,GAAKd,C,EAGlB,OAAO6lB,CACT,EAuBF,SAASkmE,EAAYp2D,GACnB,OAAQA,GACN,KAAK,EAAApB,KAAK4B,YAAYsE,SAAS4xD,MAC/B,KAAK,EAAA93D,KAAK4B,YAAYsE,SAAS2xD,KAC/B,KAAK,EAAA73D,KAAK4B,YAAYsE,SAAS6xD,KAC7B,OAAO,EACT,KAAK,EAAA/3D,KAAK4B,YAAYsE,SAAS0xD,OAC/B,KAAK,EAAA53D,KAAK4B,YAAYsE,SAASyxD,MAC7B,OAAO,EACT,KAAK,EAAA33D,KAAK4B,YAAYsE,SAAS2K,MAC/B,KAAK,EAAA7Q,KAAK4B,YAAYsE,SAASwxD,MAC/B,KAAK,EAAA13D,KAAK4B,YAAYsE,SAASgyD,OAC7B,OAAO,EACT,KAAK,EAAAl4D,KAAK4B,YAAYsE,SAAS8xD,MAC/B,KAAK,EAAAh4D,KAAK4B,YAAYsE,SAAS+xD,OAC/B,KAAK,EAAAj4D,KAAK4B,YAAYsE,SAASiyD,OAC7B,OAAO,EACT,QACE,MAAM,IAAItkF,MAAM,qCAAqC,EAAAmsB,KAAK4B,YAAYsE,SAAS9E,MAErF,CAMA,SAAS21D,EAAoB31D,GAC3B,OAAQA,GACN,IAAK,OACL,IAAK,QACH,OAAO7yB,WACT,IAAK,OACH,OAAOiE,UACT,IAAK,QACH,OAAOE,WACT,IAAK,SACH,OAAOK,YACT,IAAK,QACH,OAAOH,WACT,IAAK,SACH,OAAOK,YACT,IAAK,UACH,OAAOE,aACT,IAAK,UACH,OAAOE,aACT,QAEE,MAAM,IAAIQ,MAAM,qBAEtB,CAGA,SAAS69B,EAAanlC,EAAS60B,GAE7B,GAAIA,IAAS,EAAApB,KAAK4B,YAAYsE,SAAS8xD,OAAS52D,IAASmO,EAAOi3C,eAAewR,OAC7E,GAAIzrF,EAAE+vB,mBAAmB,aAAe/vB,EAAEwvB,UAAU,YAClD,MAAM,IAAI9E,UAAU,8BAEjB,IACHmK,IAAS,EAAApB,KAAK4B,YAAYsE,SAASgyD,QAAU92D,IAASmO,EAAOi3C,eAAe0R,QAC5E92D,IAAS,EAAApB,KAAK4B,YAAYsE,SAASiyD,QAAU/2D,IAASmO,EAAOi3C,eAAe2R,OAK9E,MAAM,IAAIlhE,UAAU,oBAAoB,EAAA+I,KAAK4B,YAAYsE,SAAS9E,MAJlE,GAAI70B,EAAE+vB,mBAAmB,aAAe/vB,EAAEwvB,SAAS,GACjD,MAAM,IAAI9E,UAAU,0B,CAMxB,OAAO1qB,EAAEiuB,UACX,CAGA,SAASi9D,EAAUa,EAAgBl3D,EAAuDmuC,GACxF,OAAQnuC,GACN,KAAK,EAAApB,KAAK4B,YAAYsE,SAAS6xD,KAC/B,KAAK,EAAA/3D,KAAK4B,YAAYsE,SAAS4xD,MAC7B,OAAOQ,EAAKC,SAAShpB,GACvB,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAAS2xD,KAC7B,OAAOS,EAAKE,QAAQjpB,GACtB,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAAS0xD,OAC7B,OAAOU,EAAKG,UAAUlpB,GAAY,GACpC,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAASyxD,MAC7B,OAAOW,EAAKI,SAASnpB,GAAY,GACnC,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAAS2K,MAC7B,OAAOynD,EAAKK,WAAWppB,GAAY,GACrC,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAASwxD,MAC7B,OAAOY,EAAKM,SAASrpB,GAAY,GACnC,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAASgyD,OAC7B,OAAOI,EAAKO,UAAUtpB,GAAY,GACpC,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAAS8xD,MAC7B,OAAOtmD,EACH,UAAKhZ,SAAS4/D,EAAKO,UAAUtpB,GAAY,GAAO+oB,EAAKO,UAAUtpB,EAAa,GAAG,IAAO,GAAQnuC,GACpG,KAAK,EAAApB,KAAK4B,YAAYsE,SAAS+xD,OAC7B,OAAOK,EAAKQ,WAAWvpB,GAAY,GACrC,KAAK,EAAAvvC,KAAK4B,YAAYsE,SAASiyD,OAC7B,OAAOzmD,EACH,UAAKhZ,SAAS4/D,EAAKO,UAAUtpB,GAAY,GAAO+oB,EAAKO,UAAUtpB,EAAa,GAAG,IAAO,GAAOnuC,GACnG,QACE,MAAM,IAAIvtB,MAAM,sCAAsC,EAAAmsB,KAAK4B,YAAYsE,SAAS9E,MAEtF,CA3aA,U,iZCxCA,gBACA,aACA,UAIA,UAMA,4BAAiCshB,KAAqBq2C,GACpD,IAAKr2C,GAAUA,EAAOh0C,SAAWqqF,EAAmBrqF,OAClD,OAAO,EAET,IAAK,IAAInC,EAAI,EAAGA,EAAIm2C,EAAOh0C,OAAQnC,IACjC,IAAKm2C,EAAOn2C,GAAG24B,MAAQwd,EAAOn2C,GAAG24B,KAAKx2B,SAAWqqF,EAAmBxsF,GAClE,OAAO,EAGX,OAAO,CACT,EAGA,kBAAuBysF,EAAeC,GACpC,IAAKD,EACH,MAAM,IAAInlF,MAAqB,iBAARolF,EAAmBA,EAAMA,IAEpD,EAEA,kBAOEroD,mBACIsoD,EAEAC,GAEF,GAAID,EAAGxqF,SAAWyqF,EAAGzqF,OACnB,OAAO,EAET,IAAK,IAAInC,EAAI,EAAGA,EAAI2sF,EAAGxqF,OAAQnC,IAC7B,GAAI2sF,EAAG3sF,KAAO4sF,EAAG5sF,GACf,OAAO,EAGX,OAAO,CACT,GAGF,MAAa6sF,EAOXxoD,6BAA6ByoD,EAA0BC,GAYrD,MAAO,CAPqB,IAAjBD,EAAM3qF,OAAgB,CAAC,EAAG2qF,EAAM,IAAMA,EAKrB,IAAjBC,EAAM5qF,OAAgB,CAAC4qF,EAAM,GAAI,GAAKA,EAGnD,CASA1oD,8BAA8Bme,EAAuBI,EAAeC,GAEpD,IAAVD,GAEFJ,EAAY72C,OAAO62C,EAAYrgD,OAAS,EAAG,GAG/B,IAAV0gD,GACFL,EAAYt1C,KAEhB,CAQAm3B,uBAAuBzkC,EAAqBsB,GAC1C,OAAQtB,EAAE,KAAOsB,EAAE,QAAM4a,EAAY,CAAClc,EAAE,GAAIsB,EAAE,GAChD,EAjDF,eAoDA,MAAamrC,EAQXhI,iBAAiB2oD,EAA0BC,EAA0BC,GAAW,GAC9E,MAAMt8B,EAAQo8B,EAAM7qF,OACd0uD,EAAQo8B,EAAM9qF,OACpB,GAAc,IAAVyuD,EACF,OAAOq8B,EAET,GAAc,IAAVp8B,EACF,OAAOm8B,EAET,MAAMG,EAAQh9E,KAAKC,IAAI48E,EAAM7qF,OAAQ8qF,EAAM9qF,QACrCirF,EAAQ,IAAIt5E,MAAcq5E,GAGhC,GAAID,EAAU,CACZ,GAAIt8B,EAAQ,GAAKC,EAAQ,EACvB,OAEF,MAAMw8B,EACFR,EAAWS,gBAAgB,CAACN,EAAMp8B,EAAQ,GAAIo8B,EAAMp8B,EAAQ,IAAK,CAACq8B,EAAMp8B,EAAQ,GAAIo8B,EAAMp8B,EAAQ,KACtG,QAAqB/0C,IAAjBuxE,EACF,QAEDD,EAAMD,EAAQ,GAAIC,EAAMD,EAAQ,IAAME,C,CAGzC,IAAK,IAAIrtF,EAAIktF,EAAW,EAAI,EAAGltF,GAAKmtF,EAAOntF,IAAK,CAC9C,MAAMutF,EAAO38B,EAAQ5wD,EAAI,EAAI,EAAIgtF,EAAMp8B,EAAQ5wD,GACzCwtF,EAAO38B,EAAQ7wD,EAAI,EAAI,EAAIitF,EAAMp8B,EAAQ7wD,GAE/C,GAAIutF,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFJ,EAAMD,EAAQntF,GAAKmQ,KAAKC,IAAIm9E,EAAMC,E,CAGpC,OAAOJ,CACT,CAQA/oD,aAAaopD,EAAuCC,GAIlD,MAAMC,EAAkB,IAAI75E,MAAM45E,EAAcvrF,QAEhD,OADAkqC,EAAcuhD,UAAUH,EAAoBC,EAAeC,GACpDA,CACT,CASAtpD,iBAAiBopD,EAAuCC,EAAkCC,GAIxF,MAAMj5C,EAAY+4C,EAAmBtrF,OAASurF,EAAcvrF,OAC5D,IAAK,IAAInC,EAAI,EAAGA,EAAI0tF,EAAcvrF,OAAQnC,IACxC2tF,EAAgB3tF,GAAKytF,EAAmB/4C,EAAY10C,GAAK0tF,EAAc1tF,EAE3E,CAUAqkC,YACIzkC,EAAWsB,EAAW6gE,EAA+D8rB,EACrFC,GACF,MAAMtrC,EAAcnW,EAAcsW,UAAU/iD,EAAE+4B,KAAMz3B,EAAEy3B,MAEtD,GAAI6pB,EAAa,CACf,GAAIqrC,IAAY/gD,EAAUyV,SAASC,EAAa5iD,EAAE+4B,MAEhD,OAGF,MAAMzX,EAAO4rB,EAAU5rB,KAAKshC,GACtBliD,EAAIutF,EAAUjuF,EAAI,IAAI,EAAA46B,OAAOgoB,EAAasrC,GAAcluF,EAAEi1B,MAGhE,GAA2B,IAAvB2tB,EAAYrgD,OACd7B,EAAEyT,IAAI,GAAIguD,EAAGniE,EAAE8Q,IAAI,IAAKxP,EAAEwP,IAAI,UAI3B,CACH,MAAMq9E,EAAgB,IAAIj6E,MAAc0uC,EAAYrgD,QAC9C6rF,EAAmB,IAAIl6E,MAAMlU,EAAE+4B,KAAKx2B,QACpC8rF,EAAmB,IAAIn6E,MAAM5S,EAAEy3B,KAAKx2B,QAC1C,IAYI+rF,EAZAC,EAAsB,EACtBC,EAAsB,EACtBC,GAAY,EACZC,GAAY,EACM,IAAlB1uF,EAAE+4B,KAAKx2B,SACTgsF,EAAOvuF,EAAE8Q,IAAI,IACb29E,GAAY,GAEQ,IAAlBntF,EAAEy3B,KAAKx2B,SACTisF,EAAOltF,EAAEwP,IAAI,IACb49E,GAAY,GAGd,IAAK,IAAItuF,EAAI,EAAGA,EAAIkhB,EAAMlhB,IAAK,CAE7BkuF,EAAOluF,EACP,IAAK,IAAI4F,EAAI48C,EAAYrgD,OAAS,EAAGyD,GAAK,EAAGA,IAC3CmoF,EAAcnoF,GAAKsoF,EAAO1rC,EAAY58C,GACtCsoF,EAAO/9E,KAAKwD,MAAMu6E,EAAO1rC,EAAY58C,IAGlCyoF,IAEHhiD,EAAcuhD,UAAUG,EAAenuF,EAAE+4B,KAAMq1D,GAC/CG,EAAOvuF,EAAE8Q,IAAIs9E,IAEVM,IACHjiD,EAAcuhD,UAAUG,EAAe7sF,EAAEy3B,KAAMs1D,GAC/CG,EAAOltF,EAAEwP,IAAIu9E,IAGf3tF,EAAEyT,IAAIg6E,EAAehsB,EAAGosB,EAAMC,G,EAIlC,OAAO9tF,C,CAIX,CAOA+jC,wBAAwB3J,EAA0B6zD,GAEhD,MAAMt9B,EAAYv2B,EAAMv4B,OAClBqsF,EAAYD,EAAWpsF,OAC7B,GAAI8uD,EAAYu9B,EACd,OAAO,EAET,IAAK,IAAIxuF,EAAI,EAAGA,GAAKixD,EAAWjxD,IAC9B,GAA6B,IAAzB06B,EAAMu2B,EAAYjxD,IAAY06B,EAAMu2B,EAAYjxD,KAAOuuF,EAAWC,EAAYxuF,GAChF,OAAO,EAGX,OAAO,CACT,CASAqkC,wBAAwBmf,EAA+BhB,GACrD,MAAMtW,EAASsX,EAAWrhD,OACpBw2B,EAAiB,GACvB,IAAK,IAAI34B,EAAI,EAAGA,EAAIksC,EAAQlsC,IAAK,CAC/B,MAAM85B,EAAMoS,EAAS,EAAIlsC,EACnBJ,EAAI4jD,EAAW1pB,IAAQ,GACnB0oB,EAAYA,EAAYrgD,OAAS,EAAInC,IAAM,GAC7C,GAAW,IAANJ,GACX+4B,EAAK3wB,QAAQ8xB,E,CAGjB,OAAOnB,CACT,EA9LF,kBAmMA,2BACIhsB,EAAoCy9B,EAAoCqkD,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAetkD,EAAOjoC,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAImnF,EAAc,GAAKA,GAAe9hF,EAAOxK,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAIonF,EAAcC,EAAYvkD,EAAOjoC,OACnC,MAAM,IAAImF,MAAM,kDAElB,GAAImnF,EAAcE,EAAYhiF,EAAOxK,OACnC,MAAM,IAAImF,MAAM,4CAGlB,IAAK,IAAI4U,EAAS,EAAGA,EAASyyE,EAAWzyE,IACvCvP,EAAO8hF,EAAcvyE,GAAUkuB,EAAOskD,EAAcxyE,EAExD,EAEA,iBAIEmoB,4BACIuqD,EAA8BC,EAAoBC,EAA+BC,EACjFC,GACF,GAAyB,IAArBJ,EAAUzsF,QAAsC,IAAtB2sF,EAAW3sF,OACvC,MAAM,IAAImF,MAAM,8BAGlB,IAAIrD,EACAwD,EACAnC,EAEAupF,GACF5qF,EAAI2qF,EAAU,GACdnnF,EAAImnF,EAAU,KAEd3qF,EAAI2qF,EAAU,GACdnnF,EAAImnF,EAAU,IAGhB,IAAIK,GAAQ,EAUZ,GARIF,GACFzpF,EAAIwpF,EAAW,GACfG,EAAO,IAEP3pF,EAAIwpF,EAAW,GACfG,EAAO,GAGLH,EAAWG,KAAUxnF,EACvB,MAAM,IAAIH,MAAM,sBAGlB,GAAIrD,GAAK,GAAKqB,GAAK,GAAKmC,GAAK,EAC3B,MAAM,IAAIH,MAAM,2BAGlB,GAAI0nF,IAAc3iD,EAAc6iD,iBAAiBF,EAAW,CAAC/qF,EAAGqB,IAC9D,MAAM,IAAIgC,MAAM,0CAGlB,MAAO,CAACrD,EAAGqB,EAAGmC,EAChB,GAGF,MAAaw7C,EACX5e,+BAA+B8qD,GAE7B,OAAQA,GACN,KAAK,EAAA17D,KAAK4B,YAAYsE,SAAS2xD,KAC7B,MAAO,OACT,KAAK,EAAA73D,KAAK4B,YAAYsE,SAAS4xD,MAC7B,MAAO,QACT,KAAK,EAAA93D,KAAK4B,YAAYsE,SAAS6xD,KAC7B,MAAO,OACT,KAAK,EAAA/3D,KAAK4B,YAAYsE,SAASyxD,MAC7B,MAAO,QACT,KAAK,EAAA33D,KAAK4B,YAAYsE,SAAS0xD,OAC7B,MAAO,SACT,KAAK,EAAA53D,KAAK4B,YAAYsE,SAASwxD,MAC7B,MAAO,QACT,KAAK,EAAA13D,KAAK4B,YAAYsE,SAASgyD,OAC7B,MAAO,SACT,KAAK,EAAAl4D,KAAK4B,YAAYsE,SAAS2K,MAC7B,MAAO,UACT,KAAK,EAAA7Q,KAAK4B,YAAYsE,SAAS+xD,OAC7B,MAAO,UACT,KAAK,EAAAj4D,KAAK4B,YAAYsE,SAAS6K,OAC7B,MAAO,SAIT,KAAK,EAAA/Q,KAAK4B,YAAYsE,SAAS8xD,MAC7B,MAAO,QACT,KAAK,EAAAh4D,KAAK4B,YAAYsE,SAASiyD,OAC7B,MAAO,SAET,QACE,MAAM,IAAItkF,MAAM,0BAA0B,EAAAmsB,KAAK4B,YAAYsE,SAASw1D,MAE1E,CAEA9qD,kCAAkCxP,GAChC,OAAQA,GACN,IAAK,OACH,OAAO,EAAApB,KAAK4B,YAAYsE,SAAS2xD,KACnC,IAAK,QACH,OAAO,EAAA73D,KAAK4B,YAAYsE,SAAS4xD,MACnC,IAAK,OACH,OAAO,EAAA93D,KAAK4B,YAAYsE,SAAS6xD,KACnC,IAAK,QACH,OAAO,EAAA/3D,KAAK4B,YAAYsE,SAASyxD,MACnC,IAAK,SACH,OAAO,EAAA33D,KAAK4B,YAAYsE,SAAS0xD,OACnC,IAAK,QACH,OAAO,EAAA53D,KAAK4B,YAAYsE,SAASwxD,MACnC,IAAK,SACH,OAAO,EAAA13D,KAAK4B,YAAYsE,SAASgyD,OACnC,IAAK,UACH,OAAO,EAAAl4D,KAAK4B,YAAYsE,SAAS2K,MACnC,IAAK,UACH,OAAO,EAAA7Q,KAAK4B,YAAYsE,SAAS+xD,OACnC,IAAK,SACH,OAAO,EAAAj4D,KAAK4B,YAAYsE,SAAS6K,OACnC,IAAK,QACH,OAAO,EAAA/Q,KAAK4B,YAAYsE,SAAS8xD,MACnC,IAAK,SACH,OAAO,EAAAh4D,KAAK4B,YAAYsE,SAASiyD,OAEnC,QACE,MAAM,IAAItkF,MAAM,0BAA0ButB,KAEhD,CAEAwP,2BAA2B1L,GAEzB,OAAOA,EAAKmK,KAAIpiC,GAAK,UAAKirB,OAAOjrB,GAAKA,EAAEutB,WAAavtB,GACvD,CAEA2jC,gCAAgCgvC,GAC9B,MAAO,CACL94C,WAAY0oB,EAAUC,wBAAwBmwB,EAAU54C,UACxDC,MAAO,CAAC/B,KAAMsqB,EAAU4vB,oBAAoBQ,EAAU34C,MAAOZ,IAAKgJ,KAAIpiC,GAAKA,EAAEu5B,aAEjF,CAEAoK,+BAA+B8S,GAC7B,MAAMxe,EAAO,GACb,IAAK,IAAI34B,EAAI,EAAGA,EAAIm3C,EAAOupC,aAAc1gF,IACvC24B,EAAKnvB,KAAK07B,EAASC,aAAagS,EAAOxe,KAAK34B,KAE9C,OAAO24B,CACT,CAEA0L,qCAAqC9iC,GACnC,MAAM8hC,EAAa,GACnB,IAAK,IAAIrjC,EAAI,EAAGA,EAAIuB,EAAKwyE,mBAAoB/zE,IAC3CqjC,EAAW75B,KAAKjI,EAAK8hC,WAAWrjC,IAElC,OAAOqjC,CACT,EA/FF,cAkGA,MAAa6B,EAIXb,oBAAoBnlC,EAAiCwsB,GACnD,OAAI,UAAKC,OAAOzsB,GACPA,EAAE+uB,WACA/uB,aAAa,EAAA0iB,YAAYc,KAC3B,UAAK+K,UAAU,CAAC9K,IAAKzjB,EAAEyjB,IAAKC,KAAM1jB,EAAE0jB,KAAM8I,SAAUA,aAAoBuC,WAE1E/uB,CACT,CACAmlC,cAAcnlC,GACZ,OAAO,UAAKysB,OAAOzsB,IAAMA,aAAa,EAAA0iB,YAAYc,IACpD,EAdF,aAiBA,MAAaoqB,EACXzI,YAAY1L,GACV,OAAOmU,EAAUsiD,0BAA0Bz2D,EAAM,EAAGA,EAAKx2B,OAC3D,CAGAkiC,yBAAyB1L,EAAyB4qB,GAChD,GAAIA,EAAO,GAAKA,EAAO5qB,EAAKx2B,OAC1B,MAAM,IAAImF,MAAM,wBAAwBi8C,yCAA4C5qB,EAAKx2B,sBAE3F,OAAO2qC,EAAUsiD,0BAA0Bz2D,EAAM4qB,EAAM5qB,EAAKx2B,OAC9D,CAGAkiC,uBAAuB1L,EAAyB4qB,GAC9C,GAAIA,EAAO,GAAKA,EAAO5qB,EAAKx2B,OAC1B,MAAM,IAAImF,MAAM,wBAAwBi8C,uCAA0C5qB,EAAKx2B,sBAEzF,OAAO2qC,EAAUsiD,0BAA0Bz2D,EAAM,EAAG4qB,EACtD,CAEAlf,iCAAiC1L,EAAyB7b,EAAeC,GACvE,IAAImE,EAAO,EACX,IAAK,IAAIlhB,EAAI8c,EAAO9c,EAAI+c,EAAK/c,IAAK,CAGhC,GAAI24B,EAAK34B,IAAM,EACb,MAAM,IAAIsH,MAEN,sHAEN4Z,GAAQyX,EAAK34B,E,CAEf,OAAOkhB,CACT,CAEAmjB,sBAAsB1L,GACpB,MAAMiS,EAAOjS,EAAKx2B,OAClB,GAAa,IAATyoC,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,MAAMC,EAAU,IAAI/2B,MAAM82B,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAKjS,EAAKiS,EAAO,GAChC,IAAK,IAAI5qC,EAAI4qC,EAAO,EAAG5qC,GAAK,IAAKA,EAC/B6qC,EAAQ7qC,GAAK6qC,EAAQ7qC,EAAI,GAAK24B,EAAK34B,EAAI,GAEzC,OAAO6qC,CACT,CAEAxG,iBAAiB1L,GAEf,OADaA,EAAKt2B,QACNitC,SACd,CAEAjL,uBAAuBm9C,EAA4B32C,EAA4B0Y,QAChEznC,IAATynC,IACFA,EAAOi+B,EAAQr/E,QAEjB,IAAI+Z,EAAS,EACb,IAAK,IAAIlc,EAAI,EAAGA,EAAIujD,IAAQvjD,EAC1Bkc,GAAU2uB,EAAQ7qC,GAAKwhF,EAAQxhF,GAEjC,OAAOkc,CACT,CAEAmoB,uBAAuBnoB,EAAgB2uB,GACrC,MAAMD,EAAOC,EAAQ1oC,OACrB,GAAa,IAATyoC,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC1uB,EAAS2uB,EAAQ,IAE3B,MAAM22C,EAAoB,IAAI1tE,MAAM+2B,EAAQ1oC,QAC5C,IAAK,IAAInC,EAAI,EAAGA,EAAIwhF,EAAQr/E,OAAS,IAAKnC,EACxCwhF,EAAQxhF,GAAKmQ,KAAKwD,MAAMuI,EAAS2uB,EAAQ7qC,IACzCkc,GAAUslE,EAAQxhF,GAAK6qC,EAAQ7qC,GAGjC,OADAwhF,EAAQA,EAAQr/E,OAAS,GAAK+Z,EACvBslE,CACT,CAKAn9C,qBAAqBkf,EAAc8B,GACjC,GAAI9B,GAAQ8B,GAAc9B,GAAQ8B,EAChC,MAAM,IAAI/9C,MAAM,wCAElB,OAAOi8C,EAAO,EAAIA,EAAO8B,EAAa9B,CACxC,CAEAlf,qBAAqB+wB,EAAyB/P,GAC5C,OAAO+P,EAAKtyB,KAAIpgC,GAAKoG,KAAKwjD,cAAc5pD,EAAG2iD,IAC7C,CAUAhhB,sBAAsBloB,EAAiBwc,EAAyB02D,GAC9D,GAAoB,IAAhB12D,EAAKx2B,QAAiC,IAAjBga,EAAMha,OAC7B,MAAM,IAAImF,MAAM,oDAElB,QAA0BwU,IAAtBuzE,EACFA,EAAoB12D,EAAKx2B,YAEzB,GAAIktF,GAAqB,GAAKA,EAAoB12D,EAAKx2B,OACrD,MAAM,IAAImF,MAAM,kCAIpB,IAAK,IAAInI,EAAIkwF,EAAoB,EAAGlwF,GAAK,IACvCgd,EAAMhd,OACFgd,EAAMhd,GAAKw5B,EAAKx5B,OAFwBA,EAK5Cgd,EAAMhd,GAAK,CAEf,CAcAklC,6BAA6BirD,EAAiCC,GAE5D,GAA0B,IAAtBA,EAAWptF,OAAc,CAC3B,GAA4B,IAAxBmtF,EAAantF,QAAiD,IAAjC2qC,EAAU5rB,KAAKouE,GAC9C,MAAO,GAEP,MAAM,IAAIhoF,MAAM,oC,CAIpB,MAAMkoF,EAAQD,EAAWptF,OACnB42C,EAAe,IAAIjlC,MAAc07E,GACvC,IAAIC,GAAoB,EACpBC,EAAgB,EACpB,IAAK,IAAI1vF,EAAI,EAAGA,EAAIwvF,EAAOxvF,IAAK,CAC9B,GAAIuvF,EAAWvvF,IAAM,EACnB,MAAM,IAAIsH,MAAM,qDAElB,IAAuB,IAAnBioF,EAAWvvF,GAAW,CACxB,IAA0B,IAAtByvF,EACF,MAAM,IAAInoF,MAAM,kDAElBmoF,EAAmBzvF,C,KACd,CACL,GAAsB,IAAlBuvF,EAAWvvF,GAAU,CACvB,GAAIA,GAAKsvF,EAAantF,OACpB,MAAM,IAAImF,MAAM,gFAElByxC,EAAa/4C,GAAKsvF,EAAatvF,E,MAE/B+4C,EAAa/4C,GAAKuvF,EAAWvvF,GAE/B0vF,GAAiB32C,EAAa/4C,E,EAIlC,MAAM2vF,EAAgB7iD,EAAU5rB,KAAKouE,GACrC,IAA0B,IAAtBG,EAAyB,CAC3B,GAAIE,EAAgBD,GAAkB,EACpC,MAAM,IAAIpoF,MAAM,6EACZgoF,qBAAgCC,MAEtCx2C,EAAa02C,GAAoBE,EAAgBD,C,MAIjD,GAAIA,IAAkBC,EACpB,MAAM,IAAIroF,MAAM,2DAGpB,OAAOyxC,CACT,CAQA1U,uBAAuBzkC,EAAsB4qD,GAC3C,OAAIA,EACKA,EAAK1nB,KAAK1hC,GAAMxB,EAAEwB,KAElBxB,EAAEyC,QAAQitC,SAErB,CAOAjL,gBAAgB1L,EAAyB/T,GACvC,MAAMgmB,EAAOjS,EAAKx2B,OAClB,OAAOw2B,EAAKmK,KAAI,CAAC1hC,EAAGpB,IAAMoB,EAAIwjB,EAAI5kB,GAAK4kB,EAAI5kB,EAAI4qC,IACjD,CAOAvG,gBAAgBurD,EAA2BC,GACzC,OAAID,EAAOztF,SAAW0tF,EAAO1tF,QAGtBytF,EAAO/4B,OAAM,CAACz1D,EAAGpB,IAAMoB,IAAMyuF,EAAO7vF,IAC7C,CAMAqkC,+BAA+B1L,GAC7B,GAAIA,EAAKx2B,OAAS,EAChB,MAAM,IAAIuoB,UAAU,mDAEtB,IAAIxJ,EAAO,EACX,IAAK,MAAMhiB,KAAKy5B,EAAM,CACpB,IAAKtoB,OAAO4lB,UAAU/2B,GACpB,MAAM,IAAIwrB,UAAU,kBAAkBxrB,uBAExC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAIwrB,UAAU,yBAAyBxrB,oBAE/CgiB,GAAQhiB,C,CAEV,OAAOgiB,CACT,CAOAmjB,oBAAoB1L,EAAyB4qB,GACvCA,EAAO,IACTA,GAAQ5qB,EAAKx2B,QAEf,MAAM2tF,EAAQn3D,EAAKk8B,QAAO,CAACnyD,EAAG1B,IAAM0B,EAAI1B,GAAG,GACrC+uF,EAAQp3D,EAAKt2B,MAAMkhD,GAAMsR,QAAO,CAACnyD,EAAG1B,IAAM0B,EAAI1B,GAAG,GAGvD,MAFmB,CAAC8uF,EAAQC,EAAOA,EAGrC,CAOA1rD,oBAAoB1L,EAAyBy8B,GAC3C,MAAM7J,EAAa,IAAIz3C,MAGvBshD,EAAOtoB,EAAU0oB,cAAcJ,EAAMz8B,EAAKx2B,QAE1C,IAAK,IAAInC,EAAI,EAAGA,EAAI24B,EAAKx2B,OAAQnC,IAAK,CACpC,MAAMgwF,EAAgB56B,EAAKhyD,QAAQpD,IAAM,EACzC,GAAIgwF,GAA6B,IAAZr3D,EAAK34B,GACxB,MAAM,IAAIsH,MAAM,6CAGG,IAAhB8tD,EAAKjzD,QAAgBw2B,EAAK34B,GAAK,GAAOo1D,EAAKjzD,OAAS,IAAM6tF,IAC7DzkC,EAAW/hD,KAAKmvB,EAAK34B,G,CAIzB,OAAOurD,CACT,CAOAlnB,sBAAsB1L,EAAyBy8B,GAC7C,MAAM7J,EAAa,IAAIz3C,MAAc6kB,EAAKx2B,OAASizD,EAAKjzD,QAGxDopD,EAAWjI,KAAK,GAGhB,IAAK,IAAItjD,EAAI,EAAGA,EAAIo1D,EAAKjzD,OAAQnC,IAAK,CACpC,MAAMujD,EAAOzW,EAAUwf,cAAc8I,EAAKp1D,GAAIurD,EAAWppD,QACzD,GAAIohD,GAAQgI,EAAWppD,OACrB,MAAM,IAAImF,MAAM,mCAElB,GAAyB,IAArBikD,EAAWhI,GACb,MAAM,IAAIj8C,MAAM,+BAGlBikD,EAAWhI,GAAQ,C,CAIrB,IAAI0sC,EAAoB,EACxB,IAAK,IAAIjwF,EAAI,EAAGA,EAAIurD,EAAWppD,OAAQnC,IACf,IAAlBurD,EAAWvrD,KACburD,EAAWvrD,GAAK24B,EAAKs3D,MAMzB,GAAIA,IAAsBt3D,EAAKx2B,OAC7B,MAAM,IAAImF,MAAM,qDAGlB,OAAOikD,CACT,EAzUF,cA6UA,iBAEElnB,WACI13B,EAAoCy9B,EAAoCqkD,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAetkD,EAAOjoC,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAImnF,EAAc,GAAKA,GAAe9hF,EAAOxK,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAIonF,EAAcC,EAAYvkD,EAAOjoC,OACnC,MAAM,IAAImF,MAAM,kDAElB,GAAImnF,EAAcE,EAAYhiF,EAAOxK,OACnC,MAAM,IAAImF,MAAM,4CAGlB,IAAK,IAAI4U,EAAS,EAAGA,EAASyyE,EAAWzyE,IACvCvP,EAAO8hF,EAAcvyE,IAAW/L,KAAK+O,IAAIkrB,EAAOskD,EAAcxyE,GAAS,EAE3E,CAGAmoB,YACI13B,EAAoCy9B,EAAoCqkD,EAAqBC,EAC7FC,EAAmB5hC,GACrB,GAAI2hC,EAAc,GAAKA,GAAetkD,EAAOjoC,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAImnF,EAAc,GAAKA,GAAe9hF,EAAOxK,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAIonF,EAAcC,EAAYvkD,EAAOjoC,OACnC,MAAM,IAAImF,MAAM,kDAElB,GAAImnF,EAAcE,EAAYhiF,EAAOxK,OACnC,MAAM,IAAImF,MAAM,4CAGlB,IAAK,IAAI4U,EAAS,EAAGA,EAASyyE,EAAWzyE,IACvCvP,EAAO8hF,EAAcvyE,IAAY6wC,EAAQ3iB,EAAOskD,EAAcxyE,EAElE,CAGAmoB,YACI13B,EAAoCy9B,EAAoCqkD,EAAqBC,EAC7FC,EAAmBztF,GACrB,GAAIwtF,EAAc,GAAKA,GAAetkD,EAAOjoC,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAImnF,EAAc,GAAKA,GAAe9hF,EAAOxK,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAIonF,EAAcC,EAAYvkD,EAAOjoC,OACnC,MAAM,IAAImF,MAAM,kDAElB,GAAImnF,EAAcE,EAAYhiF,EAAOxK,OACnC,MAAM,IAAImF,MAAM,4CAGlB,IAAK,IAAI4U,EAAS,EAAGA,EAASyyE,EAAWzyE,IACvCvP,EAAO8hF,EAAcvyE,GAAU/L,KAAK+O,IAAIkrB,EAAOskD,EAAcxyE,GAAShb,EAE1E,CAGAmjC,WACI13B,EAAoCy9B,EAAoCqkD,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAetkD,EAAOjoC,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAImnF,EAAc,GAAKA,GAAe9hF,EAAOxK,OAC3C,MAAM,IAAImF,MAAM,6BAElB,GAAIonF,EAAcC,EAAYvkD,EAAOjoC,OACnC,MAAM,IAAImF,MAAM,kDAElB,GAAImnF,EAAcE,EAAYhiF,EAAOxK,OACnC,MAAM,IAAImF,MAAM,4CAGlB,IAAK,IAAI4U,EAAS,EAAGA,EAASyyE,EAAWzyE,IACvCvP,EAAO8hF,EAAcvyE,GAAWkuB,EAAOskD,EAAcxyE,GAAUvP,EAAO8hF,EAAcvyE,EAExF,GAGF,MAAag+C,EAOX71B,kBAAkB1L,EAAyB4qB,EAAc9vC,EAAiBumD,GAExE,GAAqB,IAAjBvmD,EAAMtR,OAAc,CACtB,IAAK63D,EACH,MAAM,IAAI1yD,MAAM,8EAElB4yD,EAAUg2B,eAAev3D,EAAK4qB,GAAOyW,EAAYvmD,E,CAGnD,MAAMswC,EAAqB,GACrBC,EAAU,CAAC,GACjB,IAAK,IAAIhkD,EAAI,EAAGA,EAAIyT,EAAMtR,SAAUnC,EAAG,CAC3B,IAANA,GACFgkD,EAAQx6C,KAAKw6C,EAAQhkD,EAAI,GAAKyT,EAAMzT,EAAI,IAE1C,MAAM06B,EAAQ/B,EAAKt2B,QACnBq4B,EAAM6oB,GAAQ9vC,EAAMzT,GACpB+jD,EAAOv6C,KAAKkxB,E,CAEd,MAAO,CAACqpB,EAAQC,EAClB,CAEA3f,sBAAsB8rD,EAA8Bn2B,EAAoBvmD,GAEtE,GAAI08E,EAAuBn2B,GAAe,EACxC,MAAM,IAAI1yD,MAAM,4CAElB,IAAK,IAAItH,EAAI,EAAGA,EAAIg6D,IAAch6D,EAChCyT,EAAMjK,KAAK2mF,EAAuBn2B,EAEtC,EArCF,cAwCA,MAAao2B,EAUX/rD,kBACIzkC,EAAWw1D,EAAgBi7B,EAAmBh9B,EAC9CV,GACF,MAAMh6B,EAAO/4B,EAAE+4B,KAAKt2B,MAAM,GAEN,IAAhB+yD,EAAKjzD,QACPw2B,EAAK9sB,SAAQ,CAACnL,EAAGg0E,IAAQtf,EAAK5rD,KAAKkrE,KAGrC,MAAMnpB,EAAa6kC,EAAWE,gBAAgB33D,EAAMy8B,GAAM,GAGpDl0C,EAAO4rB,EAAU5rB,KAAKqqC,GACtBvqD,EAAI,IAAI,EAAAw5B,OAAO+wB,EAAY3rD,EAAEi1B,MAC7BgW,EAAUiC,EAAUqM,eAAeoS,GACnCglC,EAAezjD,EAAUqM,eAAexgB,GACxC63D,EAAW,IAAI18E,MAAM6kB,EAAKx2B,QAChC,IAAK,IAAInC,EAAI,EAAGA,EAAIkhB,EAAMlhB,IAAK,CAC7B,MAAMwhF,EAAU10C,EAAUwH,gBAAgBt0C,EAAG6qC,GAE7CwB,EAAcuhD,UAAUpM,EAAS7oD,EAAM63D,GACvCxvF,EAAE+S,IACEytE,EACA4O,EAAWK,iBACP7wF,EAAEm4C,WAAYqd,EAAMz8B,EAAM,EAAGmU,EAAUyH,gBAAgBi8C,EAAUD,GAAel9B,EAAKV,G,CAG/F,OAAI09B,EACKrvF,EAGA,IAAI,EAAAw5B,OACP41D,EAAWE,gBAAgB33D,EAAMy8B,EAAMi7B,GAAWrvF,EAAE6zB,UAAM/Y,OAAWA,EAAW9a,EAAEgL,KAAMhL,EAAEw2C,OAElG,CAaAnT,wBACIhN,EAA0B+9B,EAAgBz8B,EAAgB+3D,EAAoBvyE,EAC9Ek1C,EAA4BV,GAC9B,IAAIhhC,EAAM,EACV,GAAI++D,GAAct7B,EAAKjzD,OACrB,OAAOkxD,EAAIh8B,EAAMlZ,IAEnB,MAAMolC,EAAO6R,EAAKs7B,GACZC,EAAOptC,GAAQ5qB,EAAKx2B,OAAS,EAAI2qC,EAAU5rB,KAAKyX,EAAKt2B,MAAMkhD,EAAO,IACxE,IAAK,IAAIvjD,EAAI,EAAGA,EAAI24B,EAAK4qB,GAAOvjD,IAC9B2xB,EAAY,IAAN3xB,EAAUowF,EAAWK,iBAAiBp5D,EAAO+9B,EAAMz8B,EAAM+3D,EAAa,EAAGvyE,EAAKk1C,EAAKV,GACzEA,EAAIhhC,EAAKy+D,EAAWK,iBAAiBp5D,EAAO+9B,EAAMz8B,EAAM+3D,EAAa,EAAGvyE,EAAKk1C,EAAKV,IAClGx0C,GAAOwyE,EAET,OAAOh/D,CACT,CASA0S,uBAAuB1L,EAAyBy8B,EAAyBC,GACvE,MAAM9J,EAAa5yB,EAAKt2B,QACxB,IAAK,IAAIrC,EAAI,EAAGA,EAAIo1D,EAAKjzD,OAAQnC,IAE7BurD,EAAW6J,EAAKp1D,IADdq1D,EACoB,EAEA,EAG1B,OAAO9J,EAAWzZ,QAAOhY,GAAe,IAARA,GAClC,EA3FF,eA8FA,MAAaiwB,EAUX1lB,4BACIouB,EAA2BW,EAA8BnN,EAAuBpb,EAChFmb,EAAqBE,GACvB,IAAKuM,GAAoBxM,EAAY9jD,SAAWixD,EAAUjxD,OAAS,EACjE,MAAM,IAAImF,MAAM,sFAGlB,GAAImrD,EAEF,IAAK,IAAI34B,EAAM,EAAGA,EAAMs5B,EAAUjxD,OAAS,EAAG23B,IACxCA,GAAOmsB,EAAY9jD,OACrB8jD,EAAYz8C,KAAK4pD,EAAUt5B,EAAM,IAEjCmsB,EAAYnsB,GAAOs5B,EAAUt5B,EAAM,GAMzC,IAAK,IAAIA,EAAM,EAAGA,EAAMmsB,EAAY9jD,OAAQ23B,IAC1C,GAAIA,EAAM+Q,EAAQ1oC,QAChB,GAAI0oC,EAAQ/Q,GAAO,EACjB,MAAM,IAAIxyB,MAAM,qDAGlBujC,EAAQrhC,KAAK,GAKjB,IAAK,IAAIswB,EAAM,EAAGA,EAAMmsB,EAAY9jD,OAAQ23B,IAC1C,GAAIA,EAAMksB,EAAU7jD,QAClB,GAAI6jD,EAAUlsB,GAAO,EACnB,MAAM,IAAIxyB,MAAM,uDAGlB0+C,EAAUx8C,KAAK,GAKnB,IAAK,IAAIswB,EAAM,EAAGA,EAA2B,EAArBmsB,EAAY9jD,OAAY23B,IAC9C,GAAIA,EAAMosB,EAAK/jD,QACb,GAAI+jD,EAAKpsB,GAAO,EACd,MAAM,IAAIxyB,MAAM,iDAGlB4+C,EAAK18C,KAAK,GAKd,IAAK,IAAIswB,EAAM,EAAGA,EAAMmsB,EAAY9jD,OAAQ23B,IAAO,CACjD,GAAImsB,EAAYnsB,IAAQ,EACtB,MAAM,IAAIxyB,MAAM,2CAGlB,GAAI4+C,EAAKpsB,IAAQmsB,EAAYnsB,IAAQosB,EAAKpsB,EAAMmsB,EAAY9jD,SAAW8jD,EAAYnsB,GACjF,MAAM,IAAIxyB,MAAM,qC,CAGtB,CAGA+8B,gCACI+uB,EAA8BvoB,EAA4Bmb,EAC1DC,EAAgCC,EAAgBH,GAClD,GAAKA,EAAL,CAIA,GAAIG,EAAK/jD,SAAW,GAAKixD,EAAUjxD,OAAS,GAC1C,MAAM,IAAImF,MAAM,gEAGlB,GAAIujC,EAAQ1oC,SAAYixD,EAAUjxD,OAAS,EACzC,MAAM,IAAImF,MAAM,6DAGlB,GAAI2+C,EAAY9jD,SAAYixD,EAAUjxD,OAAS,EAC7C,MAAM,IAAImF,MAAM,mEAGlB,IAAK,IAAIwyB,EAAM,EAAGA,EAAMs5B,EAAUjxD,OAAS,EAAG23B,IAC5CiwB,EAAa6mC,wBACTx9B,EAAUt5B,EAAM,GAAI+Q,EAAQ/Q,GAAMksB,EAAUlsB,GAAMmsB,EAAYnsB,GAAMosB,EAAMpsB,EAAKA,EAAMs5B,EAAUjxD,OAAS,EACxG4jD,E,CAER,CAaA1hB,8BACIouB,EAA2BW,EAA8BvoB,EAAmBmb,EAC5EC,EAAuBC,EAAgBH,GACzC,GAAIqN,EAAUjxD,QAAU,EACtB,MAAM,IAAImF,MAAM,8CAIlB,MAAMikD,EAAa,CAAC6H,EAAU,GAAIA,EAAU,IAI5C,OAFArJ,EAAa8mC,mBACTp+B,EAAkBW,EAAW7H,EAAY1gB,EAASmb,EAAWC,EAAaC,EAAMH,GAC7EwF,CACT,CAYAlnB,8BACI+uB,EAA8B09B,EAA+BjmD,EAAmBmb,EAChFC,EAAuBC,EAAgBH,GACzC,GAAIqN,EAAUjxD,QAAU,GAAK2uF,EAAW3uF,QAAU,EAChD,MAAM,IAAImF,MAAM,2DAIlB,MAAMikD,EAAa,CAAC6H,EAAU,GAAI09B,EAAW,IAG7C,OADA/mC,EAAa8mC,oBAAmB,EAAOz9B,EAAW7H,EAAY1gB,EAASmb,EAAWC,EAAaC,EAAMH,GAC9FwF,CACT,CAKQlnB,0BACJouB,EAA2BW,EAA8B7H,EAAsB1gB,EAC/Emb,EAA8BC,EAAgCC,EAAgBH,GAChF,GAAI0M,EACF,IAAK,IAAI34B,EAAM,EAAGA,EAAMs5B,EAAUjxD,OAAS,EAAG23B,IAC5CyxB,EAAW/hD,KAAK,QAGlB,IAAK,IAAIswB,EAAM,EAAGA,EAAMs5B,EAAUjxD,OAAS,EAAG23B,IAC5CyxB,EAAW/hD,KAAKugD,EAAa6mC,wBACzBx9B,EAAUt5B,EAAM,GAAI+Q,EAAQ/Q,GAAMksB,EAAUlsB,GAAMmsB,EAAYnsB,GAAMosB,EAAMpsB,EAAKA,EAAMs5B,EAAUjxD,OAAS,EACxG4jD,GAGV,CAIQ1hB,+BACJ0sD,EAAgB/lD,EAAgBwc,EAAkBD,EAAgBrB,EAAgB8qC,EAClFC,EAAsBlrC,GACxB,MAAMmrC,EAAU1pC,GAAYD,EAAS,GAAK,EAC1C,IAAIxB,GAAuB,WAAZA,EAsBb,OAAO51C,KAAKwD,OAAQo9E,EAAS7qC,EAAK8qC,GAAgB9qC,EAAK+qC,GAAgBC,GAAWlmD,EAAU,GArB5F,OAAQ+a,GACN,IAAK,QAGH,OAFAG,EAAK8qC,GAAgB,EACrB9qC,EAAK+qC,GAAgB,EACd9gF,KAAKwD,OAAQo9E,EAASG,GAAWlmD,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbwc,EACF,MAAM,IAAIlgD,MAAM,uDACX,CACL,MACM6pF,IADoBJ,EAAS/lD,EAAS,GAAKA,EACX,GAAKA,EAASuc,EAASwpC,EAI7D,OAHA7qC,EAAK8qC,GACY,eAAZjrC,EAA4B51C,KAAKwD,OAAOw9E,EAAY,GAAK,GAAKhhF,KAAKwD,MAAMw9E,EAAY,GAC1FjrC,EAAK+qC,GAAgBE,EAAYjrC,EAAK8qC,GAC/B7gF,KAAKwD,OAAQo9E,EAASI,EAAY5pC,GAAUvc,EAAU,E,CAEjE,QACE,MAAM,IAAI1jC,MAAM,4BAKxB,EAvMF,iBA0Ma,EAAA2kD,UAAY,qBACZ,EAAAC,SAAW,qBAExB,4BAAiC9sD,GAC/B,OAAO,IAAIiG,aAAcE,OAAOnG,EAClC,C,0GC/tCa,EAAAgyF,oBACT,CAAC76D,EAAkC86D,EAAgBC,EAClDjvD,KACC,GAAsB,iBAAX9L,GAAmC,OAAZA,EAAkB,CAClD,GAAI+6D,EAAKzgD,IAAIta,GACX,MAAM,IAAIjvB,MAAM,iCAEhBgqF,EAAK9jE,IAAI+I,E,CAIb31B,OAAO2wF,QAAQh7D,GAAS1qB,SAAQ,EAAEusB,EAAKrT,MACrC,MAAMhc,EAAO,EAAWsoF,EAASj5D,EAAMA,EACvC,GAAqB,iBAAVrT,EACT,EAAAqsE,oBAAoBrsE,EAAkChc,EAAO,IAAKuoF,EAAMjvD,QACnE,GAAqB,iBAAVtd,GAAuC,iBAAVA,EAC7Csd,EAAQt5B,EAAMgc,EAAM1S,gBACf,IAAqB,kBAAV0S,EAGhB,MAAM,IAAIzd,MAAM,0CAA0Cyd,GAF1Dsd,EAAQt5B,EAAM,EAAU,IAAM,I,IAIhC,C,ssBC1BR,gBAGA,YACA,UAEMyoF,EAAU,MAAiB,EAAA7vD,IAAIpW,KAAKuW,OAA6B,oBAAbhjC,SAC1D,IAAI2yF,EAQAC,EACAC,EARAC,GAAe,EACfC,GAAc,EACdC,GAAU,EAOd,MAAMC,EAA+E,GAC/EC,EAAyD,GACzDC,EAA8D,GAC9DC,EAAuD,GAEvDC,EAAe,KACnB,GAAIP,IAAiBC,GAAeC,IAAYL,EAC9C,MAAM,IAAInqF,MAAM,mB,EAId8qF,EAAwBC,IAC5B,OAAQA,EAAGrmF,KAAK6oB,MACd,IAAK,YACH+8D,GAAe,EACXS,EAAGrmF,KAAKsQ,KACVw1E,GAAU,EACVJ,EAAkB,GAAGW,EAAGrmF,KAAKsQ,OAE7Bu1E,GAAc,EACdH,EAAkB,MAEpB,MACF,IAAK,WACCW,EAAGrmF,KAAKsQ,IACVq1E,EAAiB,GAAGU,EAAGrmF,KAAKsQ,KAE5Bq1E,EAAiB,KAEnB,MACF,IAAK,SACCU,EAAGrmF,KAAKsQ,IACVy1E,EAAuBhqF,QAAS,GAAGsqF,EAAGrmF,KAAKsQ,KAE3Cy1E,EAAuBhqF,QAAS,GAAGsqF,EAAGrmF,KAAKmf,KAE7C,MACF,IAAK,UACCknE,EAAGrmF,KAAKsQ,IACV01E,EAAwBjqF,QAAS,GAAGsqF,EAAGrmF,KAAKsQ,KAE5C01E,EAAwBjqF,QAAS,KAEnC,MACF,IAAK,MACCsqF,EAAGrmF,KAAKsQ,IACV21E,EAAalqF,QAAS,GAAGsqF,EAAGrmF,KAAKsQ,KAEjC21E,EAAalqF,QAAS,GAAGsqF,EAAGrmF,KAAKmf,KAEnC,MACF,IAAK,gBACCknE,EAAGrmF,KAAKsQ,IACV41E,EAAsBnqF,QAAS,GAAGsqF,EAAGrmF,KAAKsQ,KAE1C41E,EAAsBnqF,QAAS,K,EAOjCuqF,EAAgC,oBAAbxzF,SAAyE,QAA7C,EAAQ,OAARA,eAAQ,IAARA,cAAQ,EAARA,SAAUC,qBAAmC,eAAEC,SAAM8c,EAE7F,EAAAqmB,SAAWf,UACtB,GAAsCowD,IAAW,CAC/C,GAAIK,EACF,OAEF,GAAID,EACF,MAAM,IAAItqF,MAAM,4CAElB,GAAIwqF,EACF,MAAM,IAAIxqF,MAAM,yCAYlB,OATAsqF,GAAe,OAGY91E,IAAvB,EAAA6lB,IAAIpW,KAAKgnE,WACPD,GAA4C,IAA/BA,EAAUlvF,QAAQ,WACjC,EAAAu+B,IAAIpW,KAAKgnE,UAAYD,EAAUjvF,OAAO,EAAIivF,EAAqBhvF,YAAY,KAAO,IAI/E,IAAIlD,SAAc,CAACiW,EAASgG,KACjCo1E,WAAa/lF,YAEb+lF,EAAc,YACdA,EAAY1lF,UAAYqmF,EACxBV,EAAoB,CAACr7E,EAASgG,GAC9B,MAAMrT,EAA0B,CAAC6rB,KAAM,YAAa29D,GAAK,EAAA7wD,IAAIpW,MAC7DkmE,EAAYppF,YAAYW,EAAQ,G,CAIlC,OAAO,EAAAypF,sBAAsB,EAAA9wD,IAAIpW,K,EAIxB,EAAAmnE,QAAUtxD,MAAMW,EAAoB4wD,KAC/C,GAAsCnB,IAEpC,OADAW,IACO,IAAI/xF,SAAc,CAACiW,EAASgG,KACjCs1E,EAAmB,CAACt7E,EAASgG,GAC7B,MAAMrT,EAA0B,CAAC6rB,KAAM,WAAY29D,GAAK,CAACzwD,aAAY4wD,iBACrElB,EAAappF,YAAYW,EAAQ,IAGnC4pF,EAAKF,QAAQ3wD,EAAY4wD,E,EAIhB,EAAAE,cACTzxD,MAAM83C,EAAmB3iD,IACWi7D,KACpCW,IACO,IAAI/xF,SAAqC,CAACiW,EAASgG,KACxD01E,EAAuBvoF,KAAK,CAAC6M,EAASgG,IACtC,MAAMrT,EAA0B,CAAC6rB,KAAM,SAAU29D,GAAK,CAACtZ,QAAO3iD,YAC9Dk7D,EAAappF,YAAYW,EAAS,CAACkwE,EAAM95E,QAAQ,KAG5CwzF,EAAKC,cAAc3Z,EAAO3iD,GAIxB,EAAAu8D,eAAiB1xD,MAAM2xD,IAClC,GAAsCvB,IAEpC,OADAW,IACO,IAAI/xF,SAAc,CAACiW,EAASgG,KACjC21E,EAAwBxoF,KAAK,CAAC6M,EAASgG,IACvC,MAAMrT,EAA0B,CAAC6rB,KAAM,UAAW29D,GAAKO,GACvDtB,EAAappF,YAAYW,EAAQ,IAGnC4pF,EAAKE,eAAeC,E,EAIX,EAAA77C,IAAM9V,MACf2xD,EAAmBC,EAAwB78C,EAA8B43C,EACzEx3D,IACoCi7D,KACpCW,IACO,IAAI/xF,SAA8B,CAACiW,EAASgG,KACjD41E,EAAazoF,KAAK,CAAC6M,EAASgG,IAC5B,MAAMrT,EAA0B,CAAC6rB,KAAM,MAAO29D,GAAK,CAACO,YAAWC,eAAc78C,SAAQ43C,gBAAex3D,YACpGk7D,EAAappF,YAAYW,EAAS4pF,EAAKK,2BAA2B98C,GAAQ,KAGrEy8C,EAAK17C,IAAI67C,EAAWC,EAAc78C,EAAQ43C,EAAex3D,GAIvD,EAAA8xD,aAAejnD,MAAM2xD,IAChC,GAAsCvB,IAEpC,OADAW,IACO,IAAI/xF,SAAc,CAACiW,EAASgG,KACjC61E,EAAsB1oF,KAAK,CAAC6M,EAASgG,IACrC,MAAMrT,EAA0B,CAAC6rB,KAAM,gBAAiB29D,GAAKO,GAC7DtB,EAAappF,YAAYW,EAAQ,IAGnC4pF,EAAKvK,aAAa0K,E,sGCnLtB,gBACA,UACA,UAEa,EAAAG,cAAiB38D,IAC5B,MAAMhL,EAAO,EAAA4nE,cACb,IAAIC,EAAmB,EACvB,MAAMC,EAAmB,GAEnBC,EAA0C/8D,GAAW,CAAC,EAE5D,IACE,QAAkCza,KAA9Bya,aAAO,EAAPA,EAASg9D,kBACXD,EAAWC,iBAAmB,OACzB,GACiC,iBAA7Bh9D,EAAQg9D,mBAAkCljF,OAAO4lB,UAAUM,EAAQg9D,mBAC1Eh9D,EAAQg9D,iBAAmB,GAAKh9D,EAAQg9D,iBAAmB,EAC7D,MAAM,IAAIjsF,MAAM,qCAAqCivB,EAAQg9D,oBAG/D,QAAmCz3E,KAA/Bya,aAAO,EAAPA,EAASi9D,mBACXF,EAAWE,kBAAoB,OAC1B,GAAyC,iBAA9Bj9D,EAAQi9D,oBAAmCnjF,OAAO4lB,UAAUM,EAAQi9D,mBACpF,MAAM,IAAIlsF,MAAM,qCAAqCivB,EAAQi9D,0BAGpC13E,KAAvBya,aAAO,EAAPA,EAAS7qB,aACX4nF,EAAW5nF,WAAY,GAGzB,IAAI+nF,EAAgB,EAOpB,QANqB33E,KAAjBya,aAAO,EAAPA,EAASZ,OACX89D,EAAgB,EAAAC,gBAAgBn9D,EAAQZ,IAAK09D,IAG/CD,EAAmB7nE,EAAKjT,qBACpBg7E,EAAWC,iBAAmBD,EAAWE,oBAAsBF,EAAW5nF,UAAY+nF,GACjE,IAArBL,EACF,MAAM,IAAI9rF,MAAM,4BAclB,YAXuBwU,KAAnBya,aAAO,EAAPA,EAASo9D,QACX,EAAAvC,oBAAoB76D,EAAQo9D,MAAO,GAAI,IAAIC,SAAoC,CAACx7D,EAAKrT,KACnF,MAAM8uE,EAAgB,EAAAH,gBAAgBt7D,EAAKi7D,GACrCS,EAAkB,EAAAJ,gBAAgB3uE,EAAOsuE,GAE/C,GAAqF,IAAjF9nE,EAAK/S,sBAAsB46E,EAAkBS,EAAeC,GAC9D,MAAM,IAAIxsF,MAAM,iCAAiC8wB,OAASrT,I,IAKzD,CAACquE,EAAkBC,E,CAC1B,MAAOx0F,GAKP,MAJyB,IAArBu0F,GACF7nE,EAAK7S,sBAAsB06E,GAE7BC,EAAOxnF,QAAQ0f,EAAKnS,OACdva,C,+HC5DV,gBAEA,UAEA,IAAIk1F,EAoBJ,6CAME3yD,gBAAgB83C,EAAmB3iD,GAC5Bw9D,UACG,EAAArB,QAAQ,EAAA/wD,IAAIpW,KAAKwW,WAzBT,CAAC40C,IACnB,OAAQA,GACN,IAAK,UACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,MAAM,IAAIrvE,MAAM,8BAA8BqvE,K,EAYVqd,CAAY,EAAAryD,IAAIg1C,WACpDod,GAAU,IAGXjrF,KAAKiqF,UAAWjqF,KAAKsiC,WAAYtiC,KAAK++E,mBAAqB,EAAAgL,cAAc3Z,EAAO3iD,EACnF,CAEA6K,gBACE,OAAO,EAAA0xD,eAAehqF,KAAKiqF,UAC7B,CAEA3xD,UAAU0mD,EAAiCmM,EAAqC19D,GAE9E,MAAM29D,EAAuB,GACvBlB,EAAyB,GAC/BpyF,OAAO2wF,QAAQzJ,GAAOj8E,SAAQsoF,IAC5B,MAAMprF,EAAOorF,EAAI,GACXh9C,EAASg9C,EAAI,GACbh4E,EAAQrT,KAAKsiC,WAAWhoC,QAAQ2F,GACtC,IAAe,IAAXoT,EACF,MAAM,IAAI7U,MAAM,kBAAkByB,MAEpCmrF,EAAW1qF,KAAK2tC,GAChB67C,EAAaxpF,KAAK2S,EAAM,IAG1B,MAAM4xE,EAA0B,GAChCntF,OAAO2wF,QAAQ0C,GAASpoF,SAAQsoF,IAC9B,MAAMprF,EAAOorF,EAAI,GAEXh4E,EAAQrT,KAAK++E,YAAYzkF,QAAQ2F,GACvC,IAAe,IAAXoT,EACF,MAAM,IAAI7U,MAAM,mBAAmByB,MAErCglF,EAAcvkF,KAAK2S,EAAM,IAG3B,MAAM89C,QACI,EAAA/iB,IAAIpuC,KAAKiqF,UAAWC,EAAckB,EAAWpxD,KAAItjC,GAAK,CAACA,EAAEq1B,KAAMr1B,EAAEm5B,KAAMn5B,EAAEwM,QAAQ+hF,EAAex3D,GAEpG5M,EAAoC,CAAC,EAC3C,IAAK,IAAI3pB,EAAI,EAAGA,EAAIi6D,EAAQ93D,OAAQnC,IAClC2pB,EAAO7gB,KAAK++E,YAAYkG,EAAc/tF,KAAO,IAAI,EAAAw6B,OAAOy/B,EAAQj6D,GAAG,GAAIi6D,EAAQj6D,GAAG,GAAIi6D,EAAQj6D,GAAG,IAEnG,OAAO2pB,CACT,CAEAy+D,iBAEA,CAEAC,eACO,EAAAA,aAAav/E,KAAKiqF,UACzB,E,0GCnFF,gBACA,UACA,UAmEa,EAAAqB,kBAAqB79D,IAChC,MAAMhL,EAAO,EAAA4nE,cACb,IAAIkB,EAAuB,EAC3B,MAAMhB,EAAmB,GAEnBiB,EAAkD/9D,GAAW,CAAC,EA5CzC,CAACA,IACvBA,EAAQo9D,QACXp9D,EAAQo9D,MAAQ,CAAC,GAEdp9D,EAAQo9D,MAAMryD,UACjB/K,EAAQo9D,MAAMryD,QAAU,CAAC,GAE3B,MAAMA,EAAU/K,EAAQo9D,MAAMryD,QACzBA,EAAQizD,+BAEXjzD,EAAQizD,6BAA+B,I,EAmCzCC,CAAqBF,GAErB,SAC0Cx4E,KAApCya,aAAO,EAAPA,EAASk+D,0BACXH,EAAeG,uBAAyB,OAE1C,MAAMA,EA7EuB,CAACA,IAChC,OAAQA,GACN,IAAK,WACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,IAAK,MACH,OAAO,GACT,QACE,MAAM,IAAIntF,MAAM,yCAAyCmtF,K,EAkE5BC,CAAyBJ,EAAeG,6BAEpC34E,KAA/Bya,aAAO,EAAPA,EAASo+D,qBACXL,EAAeK,mBAAoB,QAGH74E,KAA9Bya,aAAO,EAAPA,EAASq+D,oBACXN,EAAeM,kBAAmB,QAGL94E,KAA3Bya,aAAO,EAAPA,EAASs+D,iBACXP,EAAeO,cAAgB,cAEjC,MAAMA,EA3Ee,CAACA,IACxB,OAAQA,GACN,IAAK,aACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,QACE,MAAM,IAAIvtF,MAAM,+BAA+ButF,K,EAoE3BC,CAAiBR,EAAeO,eAEtD,IAAIE,EAAkB,EAKtB,QAJuBj5E,KAAnBya,aAAO,EAAPA,EAASy+D,SACXD,EAAkB,EAAArB,gBAAgBn9D,EAAQy+D,MAAO3B,SAGjBv3E,KAA9Bya,aAAO,EAAPA,EAASg9D,kBACXe,EAAef,iBAAmB,OAC7B,GACiC,iBAA7Bh9D,EAAQg9D,mBAAkCljF,OAAO4lB,UAAUM,EAAQg9D,mBAC1Eh9D,EAAQg9D,iBAAmB,GAAKh9D,EAAQg9D,iBAAmB,EAC7D,MAAM,IAAIjsF,MAAM,qCAAqCivB,EAAQg9D,oBAG/D,QAAmCz3E,KAA/Bya,aAAO,EAAPA,EAASi9D,mBACXc,EAAed,kBAAoB,OAC9B,GAAyC,iBAA9Bj9D,EAAQi9D,oBAAmCnjF,OAAO4lB,UAAUM,EAAQi9D,mBACpF,MAAM,IAAIlsF,MAAM,qCAAqCivB,EAAQi9D,qBAW/D,QARiC13E,KAA7Bya,aAAO,EAAPA,EAAS0+D,mBACXX,EAAeW,iBAAkB,GAGnCZ,EAAuB9oE,EAAK5U,yBACxB89E,IAA0BH,EAAeK,oBAAsBL,EAAeM,iBAAmBC,IAC/FP,EAAeW,gBAAkB,EAAGF,EAAiBT,EAAef,iBACtEe,EAAed,mBACU,IAAzBa,EACF,MAAM,IAAI/sF,MAAM,gCAkBlB,OAfIivB,aAAO,EAAPA,EAAS2+D,qBAlFb,EAACb,EAA8Ba,EAC9B7B,KACC,IAAK,MAAM8B,KAAMD,EAAoB,CACnC,IAAIE,EAAuB,iBAAPD,EAAkBA,EAAKA,EAAGpsF,KAG9C,OAAQqsF,GACN,IAAK,UACHA,EAAS,UACT,MACF,IAAK,OACL,IAAK,MACH,SACF,QACE,MAAM,IAAI9tF,MAAM,qBAAqB8tF,KAGzC,MAAMC,EAAmB,EAAA3B,gBAAgB0B,EAAQ/B,GACjD,GAA0F,IAAtF,EAAAF,cAAcv8E,4BAA4By9E,EAAsBgB,GAClE,MAAM,IAAI/tF,MAAM,oCAAoC8tF,I,GAgExDE,CAAsBjB,EAAsB99D,EAAQ2+D,mBAAoB7B,QAGnDv3E,KAAnBya,aAAO,EAAPA,EAASo9D,QACX,EAAAvC,oBAAoB76D,EAAQo9D,MAAO,GAAI,IAAIC,SAAoC,CAACx7D,EAAKrT,KACnF,MAAM8uE,EAAgB,EAAAH,gBAAgBt7D,EAAKi7D,GACrCS,EAAkB,EAAAJ,gBAAgB3uE,EAAOsuE,GAE/C,GAA6F,IAAzF9nE,EAAKzU,0BAA0Bu9E,EAAsBR,EAAeC,GACtE,MAAM,IAAIxsF,MAAM,qCAAqC8wB,OAASrT,I,IAK7D,CAACsvE,EAAsBhB,E,CAC9B,MAAOx0F,GAKP,MAJ6B,IAAzBw1F,GACF9oE,EAAKvU,0BAA0Bq9E,GAEjChB,EAAOxnF,QAAQ0f,EAAKnS,OACdva,C,0GCtJV,gBAEa,EAAA60F,gBAAkB,CAAC1nF,EAAcqnF,KAC5C,MAAM9nE,EAAO,EAAA4nE,cAEPoC,EAAahqE,EAAK9P,gBAAgBzP,GAAQ,EAC1CwpF,EAAajqE,EAAKrS,QAAQq8E,GAIhC,OAHAhqE,EAAK/P,aAAaxP,EAAMwpF,EAAYD,GACpClC,EAAO7pF,KAAKgsF,GAELA,CAAU,C,kLCPnB,eACA,UACA,UACA,UAOa,EAAA9C,QAAU,CAAC3wD,EAAoB4wD,KAC1C,MAAM8C,EAAY,EAAAtC,cAAcz8E,SAASqrB,EAAY4wD,GACrD,GAAkB,IAAd8C,EACF,MAAM,IAAInuF,MAAM,8CAA8CmuF,I,EASlE,MAAMC,EAAiB,IAAInyD,IAMd,EAAAsvD,cACT,CAAC3Z,EAAmB3iD,KAClB,MAAMhL,EAAO,EAAA4nE,cACPwC,EAAkBpqE,EAAKrS,QAAQggE,EAAM3xE,YAC3C,IAAIquF,EAAgB,EAChBvB,EAAuB,EACvBhB,EAAmB,GAEvB,IAKE,IAJCgB,EAAsBhB,GAAU,EAAAe,kBAAkB79D,GAEnDhL,EAAKjlB,OAAOyN,IAAImlE,EAAOyc,GACvBC,EAAgBrqE,EAAKrU,kBAAkBy+E,EAAiBzc,EAAM3xE,WAAY8sF,GACpD,IAAlBuB,EACF,MAAM,IAAItuF,MAAM,yB,SAGlBikB,EAAKnS,MAAMu8E,GACXpqE,EAAKvU,0BAA0Bq9E,GAC/BhB,EAAOxnF,QAAQ0f,EAAKnS,M,CAGtB,MAAMiqC,EAAa93B,EAAKjU,kBAAkBs+E,GACpCC,EAActqE,EAAK/T,mBAAmBo+E,GAEtCxqD,EAAa,GACb0qD,EAAwB,GACxBjO,EAAc,GACdkO,EAAyB,GAC/B,IAAK,IAAI/1F,EAAI,EAAGA,EAAIqjD,EAAYrjD,IAAK,CACnC,MAAM+I,EAAOwiB,EAAK7T,iBAAiBk+E,EAAe51F,GAClD,GAAa,IAAT+I,EACF,MAAM,IAAIzB,MAAM,2BAElBwuF,EAAsBtsF,KAAKT,GAC3BqiC,EAAW5hC,KAAK+hB,EAAKhQ,aAAaxS,G,CAEpC,IAAK,IAAI/I,EAAI,EAAGA,EAAI61F,EAAa71F,IAAK,CACpC,MAAM+I,EAAOwiB,EAAK3T,kBAAkBg+E,EAAe51F,GACnD,GAAa,IAAT+I,EACF,MAAM,IAAIzB,MAAM,4BAElByuF,EAAuBvsF,KAAKT,GAC5B8+E,EAAYr+E,KAAK+hB,EAAKhQ,aAAaxS,G,CAIrC,OADA2sF,EAAe3hF,IAAI6hF,EAAe,CAACA,EAAeE,EAAuBC,IAClE,CAACH,EAAexqD,EAAYy8C,EAAY,EAGxC,EAAAiL,eAAkBC,IAC7B,MAAMxnE,EAAO,EAAA4nE,cACP7xD,EAAUo0D,EAAehlF,IAAIqiF,GACnC,IAAKzxD,EACH,MAAM,IAAIh6B,MAAM,sBAElB,MAAMsuF,EAAgBt0D,EAAQ,GACxBw0D,EAAwBx0D,EAAQ,GAChCy0D,EAAyBz0D,EAAQ,GAEvCw0D,EAAsBjqF,QAAQ0f,EAAKzT,UACnCi+E,EAAuBlqF,QAAQ0f,EAAKzT,UACpCyT,EAAKnU,mBAAmBw+E,GACxBF,EAAe/xD,OAAOovD,EAAU,EA2BlC,MAAMiD,EAA8BnhE,IAClC,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GACT,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,GACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GAET,QACE,MAAM,IAAIvtB,MAAM,0BAA0ButB,K,EAI1CohE,EAA8B9G,IAClC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,SACT,KAAK,EACH,MAAO,UACT,KAAK,GACH,MAAO,UACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,SAET,QACE,MAAM,IAAI7nF,MAAM,0BAA0B6nF,K,EAI1C+G,EAAiCrhE,IAGjC,OAAQA,GACN,IAAK,UACH,OAAOjuB,aACT,IAAK,QAUL,IAAK,OACH,OAAO5E,WATT,IAAK,OACH,OAAOiE,UACT,IAAK,SACH,OAAOO,YACT,IAAK,QACH,OAAOL,WACT,IAAK,QACH,OAAOE,WAGT,IAAK,UACH,OAAOS,aACT,IAAK,SACH,OAAOJ,YACT,IAAK,QACH,OAAOyvF,cACT,IAAK,SACH,OAAOC,eACT,QACE,MAAM,IAAI9uF,MAAM,qBAAqButB,K,EAOlC,EAAAqiB,IACT,CAAC67C,EAAmBC,EAAwB78C,EAA8B43C,EACzEx3D,KACC,MAAMhL,EAAO,EAAA4nE,cACP7xD,EAAUo0D,EAAehlF,IAAIqiF,GACnC,IAAKzxD,EACH,MAAM,IAAIh6B,MAAM,sBAElB,MAAMsuF,EAAgBt0D,EAAQ,GACxBw0D,EAAwBx0D,EAAQ,GAChCy0D,EAAyBz0D,EAAQ,GAEjC+hB,EAAa2vC,EAAa7wF,OAC1B0zF,EAAc9H,EAAc5rF,OAElC,IAAIixF,EAAmB,EACnBiD,EAA6B,GAEjC,MAAMC,EAAwB,GACxBC,EAAwB,GAE9B,KACGnD,EAAkBiD,GAAoB,EAAAnD,cAAc38D,GAGrD,IAAK,IAAIv2B,EAAI,EAAGA,EAAIqjD,EAAYrjD,IAAK,CACnC,MAAMm5B,EAAWgd,EAAOn2C,GAAG,GACrB24B,EAAOwd,EAAOn2C,GAAG,GACjBgM,EAAOmqC,EAAOn2C,GAAG,GAEvB,IAAIw1F,EACAgB,EAEJ,GAAI1iF,MAAMoiB,QAAQlqB,GAAO,CAEvBwqF,EAAiB,EAAIxqF,EAAK7J,OAC1BqzF,EAAajqE,EAAKrS,QAAQs9E,GAC1BD,EAAY/sF,KAAKgsF,GACjB,IAAIxiB,EAAYwiB,EAAa,EAC7B,IAAK,IAAIx1F,EAAI,EAAGA,EAAIgM,EAAK7J,OAAQnC,IAAK,CACpC,GAAuB,iBAAZgM,EAAKhM,GACd,MAAM,IAAI0qB,UAAU,wBAAwB1qB,qBAE9CurB,EAAK9kB,QAAQusE,KAAe,EAAA0gB,gBAAgB1nF,EAAKhM,GAAIu2F,E,OAGvDC,EAAiBxqF,EAAKzE,WACtBiuF,EAAajqE,EAAKrS,QAAQs9E,GAC1BD,EAAY/sF,KAAKgsF,GACjBjqE,EAAKjlB,OAAOyN,IAAI,IAAI/R,WAAWgK,EAAK5M,OAAQ4M,EAAKg3D,WAAYwzB,GAAiBhB,GAGhF,MAAMh3D,EAAQjT,EAAK7Q,YACbomE,EAAav1D,EAAKzQ,WAAW,EAAI6d,EAAKx2B,QAC5C,IACE,IAAIs0F,EAAW3V,EAAa,EAC5BnoD,EAAK9sB,SAAQnL,GAAK6qB,EAAKnlB,OAAOqwF,KAAc/1F,IAC5C,MAAMy2C,EAAS5rB,EAAKvT,iBAChBg+E,EAA2B78D,GAAWq8D,EAAYgB,EAAgB1V,EAAYnoD,EAAKx2B,QACvF,GAAe,IAAXg1C,EACF,MAAM,IAAI7vC,MAAM,yBAElBgvF,EAAY9sF,KAAK2tC,E,SAEjB5rB,EAAK3Q,aAAa4jB,E,EAItB,MAAMk4D,EAAiBnrE,EAAK7Q,YACtBi8E,EAAoBprE,EAAKzQ,WAAwB,EAAbuoC,GACpCuzC,EAAmBrrE,EAAKzQ,WAAwB,EAAbuoC,GACnCwzC,EAAqBtrE,EAAKzQ,WAAyB,EAAd+6E,GACrCiB,EAAoBvrE,EAAKzQ,WAAyB,EAAd+6E,GAE1C,IACE,IAAIkB,EAAmBJ,EAAoB,EACvCK,EAAkBJ,EAAmB,EACrCK,EAAoBJ,EAAqB,EACzCK,EAAmBJ,EAAoB,EAC3C,IAAK,IAAI92F,EAAI,EAAGA,EAAIqjD,EAAYrjD,IAC9BurB,EAAK9kB,QAAQswF,KAAsBT,EAAYt2F,GAC/CurB,EAAK9kB,QAAQuwF,KAAqBlB,EAAsB9C,EAAahzF,IAEvE,IAAK,IAAIA,EAAI,EAAGA,EAAI61F,EAAa71F,IAC/BurB,EAAK9kB,QAAQwwF,KAAuB,EACpC1rE,EAAK9kB,QAAQywF,KAAsBnB,EAAuBhI,EAAc/tF,IAI1E,IAAIy1F,EAAYlqE,EAAK3S,QACjBg9E,EAAegB,EAAkBD,EAAmBtzC,EAAYyzC,EAAmBjB,EACnFgB,EAAoBzD,GAExB,MAAM97D,EAA+B,GAErC,GAAkB,IAAdm+D,EACF,IAAK,IAAIz1F,EAAI,EAAGA,EAAI61F,EAAa71F,IAAK,CACpC,MAAMm3C,EAAS5rB,EAAK9kB,QAAQowF,EAAqB,EAAI72F,GAE/Cm3F,EAA2B5rE,EAAK7Q,YAEhC08E,EAAmB7rE,EAAKzQ,WAAW,IAEzC,IAAI+Z,EAA6B2gE,EAAa,EAC9C,IAGE,GAFAC,EAAYlqE,EAAKrT,kBACbi/B,EAAQigD,EAAkBA,EAAmB,EAAGA,EAAmB,EAAGA,EAAmB,IAC3E,IAAd3B,EACF,MAAM,IAAInuF,MAAM,iDAAiDmuF,KAEnE,IAAI4B,EAAkBD,EAAmB,EACzC,MAAMj+D,EAAW5N,EAAK9kB,QAAQ4wF,KAC9B7B,EAAajqE,EAAK9kB,QAAQ4wF,KAC1B,MAAMvW,EAAav1D,EAAK9kB,QAAQ4wF,KAC1B3W,EAAan1D,EAAK9kB,QAAQ4wF,KAC1B1+D,EAAO,GACb,IAAK,IAAI34B,EAAI,EAAGA,EAAI0gF,EAAY1gF,IAC9B24B,EAAKnvB,KAAK+hB,EAAK9kB,QAAQq6E,EAAa,EAAI9gF,IAE1CurB,EAAKzT,SAASgpE,GAEd,MAAM5/D,EAAuB,IAAhByX,EAAKx2B,OAAe,EAAIw2B,EAAKk8B,QAAO,CAACj1D,EAAGsB,IAAMtB,EAAIsB,IAE/D,GADA2zB,EAAOohE,EAA2B98D,GACrB,WAATtE,EAAmB,CACrB,MAAMiE,EAAuB,GAC7B,IAAIk6C,EAAYwiB,EAAa,EAC7B,IAAK,IAAIx1F,EAAI,EAAGA,EAAIkhB,EAAMlhB,IAAK,CAC7B,MAAMkc,EAASqP,EAAK9kB,QAAQusE,KACtBskB,EAAiBt3F,IAAMkhB,EAAO,OAAIpF,EAAYyP,EAAK9kB,QAAQusE,GAAa92D,EAC9E4c,EAAWtvB,KAAK+hB,EAAKhQ,aAAaW,EAAQo7E,G,CAE5ChgE,EAAO9tB,KAAK,CAACqrB,EAAM8D,EAAMG,G,KACpB,CACL,MACM9sB,EAAO,IADiBkqF,EAA8BrhE,GAC/C,CAA0B3T,GACvC,IAAIlf,WAAWgK,EAAK5M,OAAQ4M,EAAKg3D,WAAYh3D,EAAKzE,YAC7CwM,IAAIwX,EAAKjlB,OAAOb,SAAS+vF,EAAYA,EAAaxpF,EAAKzE,aAC5D+vB,EAAO9tB,KAAK,CAACqrB,EAAM8D,EAAM3sB,G,UAG3Buf,EAAK3Q,aAAau8E,GACL,WAATtiE,GAAqB2gE,GACvBjqE,EAAKnS,MAAMo8E,GAEbjqE,EAAKnT,kBAAkB++B,E,EAK7B,GAAkB,IAAds+C,EACF,OAAOn+D,EAEP,MAAM,IAAIhwB,MAAM,yCAAyCmuF,K,SAG3DlqE,EAAK3Q,aAAa87E,E,UAGpBJ,EAAYzqF,QAAQ0f,EAAKnT,mBACzBm+E,EAAY1qF,QAAQ0f,EAAKnS,OAEzBmS,EAAK7S,sBAAsB06E,GAC3BiD,EAAiBxqF,QAAQ0f,EAAKnS,M,GAOzB,EAAAivE,aAAgB0K,IAC3B,MAAMxnE,EAAO,EAAA4nE,cACP7xD,EAAUo0D,EAAehlF,IAAIqiF,GACnC,IAAKzxD,EACH,MAAM,IAAIh6B,MAAM,sBAElB,MAAMsuF,EAAgBt0D,EAAQ,GAGxBi2D,EAAkBhsE,EAAKzS,iBAAiB88E,GAC9C,GAAwB,IAApB2B,EACF,MAAM,IAAIjwF,MAAM,kCAElBikB,EAAKzT,SAASy/E,EAAgB,EAGnB,EAAAtE,2BAA8Bx+D,IACzC,MAAM+iE,EAA6B,GACnC,IAAK,MAAMrgD,KAAU1iB,EAAS,CAC5B,MAAMzoB,EAAOmrC,EAAO,IACfrjC,MAAMoiB,QAAQlqB,IAASA,EAAK5M,QAC/Bo4F,EAAQhuF,KAAKwC,EAAK5M,O,CAGtB,OAAOo4F,CAAO,C,yvBC3ZhB,mBAIA,YAEMC,EAEgC,EAAQ,MAE9C,IAAIlsE,EACAsmE,GAAc,EACdD,GAAe,EACfE,GAAU,EAEd,MAiDM4F,EAAkB,CAACC,EAAkBC,IACrCA,EACKD,EAAU,8BAAgC,yBAE1CA,EAAU,qBAAuB,gBAI/B,EAAAlF,sBAAwBrxD,MAAMy2D,IACzC,GAAIhG,EACF,OAAOzxF,QAAQiW,UAEjB,GAAIu7E,EACF,MAAM,IAAItqF,MAAM,yDAElB,GAAIwqF,EACF,MAAM,IAAIxqF,MAAM,sDAGlBsqF,GAAe,EAGf,MAAMkG,EAAUD,EAAMj2D,YAChBG,EAAa81D,EAAM91D,WACnBF,EAAOg2D,EAAMh2D,KAEb+1D,EAAa71D,EAAa,GA3EH,MAC7B,IAEE,MAAiC,oBAAtBv8B,oBAMmB,oBAAnBuyF,iBACT,IAAIA,gBAAiBC,MAAM3vF,YAAY,IAAI7C,kBAAkB,IAKxDR,YAAYizF,SAAS,IAAIj2F,WAAW,CACzC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAI,EAAI,EAAG,EAAG,EAAG,EAAI,GAAI,EAAK,EAAI,EAAG,EAAG,EAAI,EAAG,EACnE,EAAG,EAAI,EAAK,EAAK,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAI,IAAK,GAAI,EAAG,EAAG,GAAI,M,CAElE,MAAOnD,GACP,OAAO,C,GAuD4Bq5F,GAC/BP,EAAU91D,GApDM,MACtB,IAeE,OAAO78B,YAAYizF,SAAS,IAAIj2F,WAAW,CACzC,EAAK,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAK,GAAK,EAAG,GAAI,EACvF,IAAK,GAAI,IAAK,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAI,IAAK,IAAK,EAAG,GAAI,K,CAEzF,MAAOnD,GACP,OAAO,C,GA+Bes5F,GAElBC,EAAgD,iBAApBP,EAAMtF,UAAyBsF,EAAMtF,eAAYz2E,EAC7Eu8E,EAAeX,GAAgB,EAAOE,GACtCU,EAAuBZ,EAAgBC,EAASC,GAChDW,EAA8C,iBAApBV,EAAMtF,UAAyBsF,EAAMtF,UAAU+F,QAAwBx8E,EAEvG,IAAI08E,GAAY,EAEhB,MAAMC,EAA8B,GAgEpC,GA7DIX,EAAU,GACZW,EAAMjvF,KAAK,IAAIpJ,SAASiW,IACtBlC,YAAW,KACTqkF,GAAY,EACZniF,GAAS,GACRyhF,EAAQ,KAKfW,EAAMjvF,KAAK,IAAIpJ,SAAQ,CAACiW,EAASgG,KAC/B,MAAMwB,EAAU+5E,EAAaH,EAAyB,UAChDpzB,EAAiC,CACrCziE,WAAY,CAAC82F,EAAkBC,KAC7B,GAAuCf,GAAcc,EAASjf,SAAS,eACnD,oBAATmf,KACT,OAAOC,IAAIC,gBAAgB,IAAIF,KAC3B,CAGE,EAAQ,OAEV,CAAC/jE,KAAM,qBAGb,GAAI6jE,IAAaL,EAAc,CAC7B,MAAMhH,EAAiB+G,UAAsBO,EAC7C,OAAOJ,UAAoBlH,EAASiH,C,CAGtC,OAAOK,EAAkBD,CAAQ,GAIrC,GAAuCd,EACrC,GAAoB,oBAATgB,KACTv0B,EAAOt3D,oBAAsBgsF,EAAK77E,KAAKrb,UAAW,4BAC7C,CACL,MAAMm3F,EAAmB,yDAAyDn7E,EAAQxL,kBAC1FgyD,EAAOt3D,oBAAsB,IAAI6rF,KAAK,CAACI,GAAmB,CAACnkE,KAAM,mB,CAIrEhX,EAAQwmD,GAAQpuD,MAEZH,IACE87E,GAAe,EACfC,GAAc,EACdtmE,EAAOzV,EACPO,GAAS,IAGV4iF,IACCrH,GAAe,EACfE,GAAU,EACVz1E,EAAO48E,EAAK,GACZ,WAGF74F,QAAQ84F,KAAKT,GAEfD,EACF,MAAM,IAAIlxF,MAAM,2DAA2DwwF,M,EAIlE,EAAA3E,YAAc,KACzB,GAAItB,GAAetmE,EACjB,OAAOA,EAGT,MAAM,IAAIjkB,MAAM,sCAAsC,EAG3C,EAAAk/B,QAAU,K,OACjBqrD,GAAgBD,GAAiBE,IACnCF,GAAe,EAEwB,QAAtC,EAAArmE,EAA+Bje,eAAO,SAAE6rF,sBACzC5tE,OAAOzP,EAEP81E,GAAe,EACfC,GAAc,EACdC,GAAU,E,sEC3LC,SAASsH,IACtB,OAAO,IAAO,2jyDAA2o0D,cAAUt9E,OAAWA,EAChr0D,C,uBCAAhG,EAAON,QAAU,SAAUmgE,EAAS0jB,EAAmBC,EAAeC,GACpE,IAAIC,EAAcv2F,MAAQhC,OAE1B,IACE,IACE,IAAIw4F,EAEJ,IAEEA,EAAO,IAAID,EAAYZ,KAAK,CAACjjB,GAO/B,CANE,MAAO92E,IAGP46F,EAAO,IADWD,EAAYE,aAAeF,EAAYG,mBAAqBH,EAAYI,gBAAkBJ,EAAYK,gBAEnHC,OAAOnkB,GACZ8jB,EAAOA,EAAKM,SACd,CAEA,IAAIlB,EAAMW,EAAYX,KAAOW,EAAYQ,UACrCC,EAAYpB,EAAIC,gBAAgBW,GAChCS,EAAS,IAAIV,EAAYH,GAAmBY,EAAWX,GAE3D,OADAT,EAAIsB,gBAAgBF,GACbC,CAGT,CAFE,MAAOr7F,GACP,OAAO,IAAI26F,EAAYH,GAAmB,+BAA+B39C,OAAO0+C,mBAAmBzkB,IAAW2jB,EAChH,CAOF,CANE,MAAOz6F,GACP,IAAK06F,EACH,MAAMjyF,MAAM,kCAGd,OAAO,IAAIkyF,EAAYH,GAAmBE,EAAKD,EACjD,CACF,C,wBCtCAxjF,EAAON,QAAU6kF,QAAQ,K,wBCAzBvkF,EAAON,QAAU6kF,QAAQ,K,wBCAzBvkF,EAAON,QAAU6kF,QAAQ,O,uBCAzBvkF,EAAON,QAAU6kF,QAAQ,a,wBCAzBvkF,EAAON,QAAU6kF,QAAQ,O,wBCAzBvkF,EAAON,QAAU6kF,QAAQ,iB,wBCAzBvkF,EAAON,QAAU6kF,QAAQ,qB,GCCrBC,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqB1+E,IAAjB2+E,EACH,OAAOA,EAAajlF,QAGrB,IAAIM,EAASwkF,yBAAyBE,GAAY,CAGjDhlF,QAAS,CAAC,GAOX,OAHAklF,oBAAoBF,GAAUnlF,KAAKS,EAAON,QAASM,EAAQA,EAAON,QAAS+kF,qBAGpEzkF,EAAON,OACf,CCrBA+kF,oBAAoBr7F,EAAK4W,IACxB,IAAI6kF,EAAS7kF,GAAUA,EAAOyU,WAC7B,IAAOzU,EAAiB,QACxB,IAAM,EAEP,OADAykF,oBAAoB75F,EAAEi6F,EAAQ,CAAE/6F,EAAG+6F,IAC5BA,CAAM,ECLdJ,oBAAoB75F,EAAI,CAAC8U,EAASolF,KACjC,IAAI,IAAIxiE,KAAOwiE,EACXL,oBAAoBt6F,EAAE26F,EAAYxiE,KAASmiE,oBAAoBt6F,EAAEuV,EAAS4iB,IAC5Ex3B,OAAOirB,eAAerW,EAAS4iB,EAAK,CAAEyiE,YAAY,EAAMnqF,IAAKkqF,EAAWxiE,IAE1E,ECNDmiE,oBAAoBt6F,EAAI,CAACumB,EAAKwY,IAAUp+B,OAAO2c,UAAU0X,eAAe5f,KAAKmR,EAAKwY,GCClFu7D,oBAAoB76F,EAAK8V,IACH,oBAAXslF,QAA0BA,OAAOC,aAC1Cn6F,OAAOirB,eAAerW,EAASslF,OAAOC,YAAa,CAAEh2E,MAAO,WAE7DnkB,OAAOirB,eAAerW,EAAS,aAAc,CAAEuP,OAAO,GAAO,ECF9D,IAAIi2E,oBAAsBT,oBAAoB,M","file":"ort-web.node.js","sourcesContent":["var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return k.buffer!=C&&G(k.buffer),F}function t(){return k.buffer!=C&&G(k.buffer),P}function r(){return k.buffer!=C&&G(k.buffer),I}function a(){return k.buffer!=C&&G(k.buffer),U}function u(){return k.buffer!=C&&G(k.buffer),Y}var i,o,s;e=e||{},i||(i=void 0!==e?e:{}),i.ready=new Promise((function(e,n){o=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},i),g=\"./this.program\",_=(e,n)=>{throw n},y=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=i.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return i.locateFile?i.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof oe))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),_=(e,n)=>{if(Z())throw process.exitCode=e,n;n instanceof oe||x(\"exiting due to exception: \"+n),process.exit(e)},i.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(y||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),S=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),S=e=>p.writeSync(2,e+\"\\n\"));var A,R=i.print||M,x=i.printErr||S;Object.assign(i,h),h=null,i.thisProgram&&(g=i.thisProgram),i.quit&&(_=i.quit),i.wasmBinary&&(A=i.wasmBinary);var E=i.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&re(\"no native wasm support detected\");var k,D,C,F,P,I,U,Y,W=!1,H=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function N(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&H)return H.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var u=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|u);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|u<<6|i:(7&a)<<18|u<<12|i<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(e,n){return(e>>>=0)?N(t(),e,n):\"\"}function L(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var u=0;u<e.length;++u){var i=e.charCodeAt(u);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++u)),127>=i){if(t>=r)break;n[t++>>>0]=i}else{if(2047>=i){if(t+1>=r)break;n[t++>>>0]=192|i>>6}else{if(65535>=i){if(t+2>=r)break;n[t++>>>0]=224|i>>12}else{if(t+3>=r)break;n[t++>>>0]=240|i>>18,n[t++>>>0]=128|i>>12&63}n[t++>>>0]=128|i>>6&63}n[t++>>>0]=128|63&i}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function G(e){C=e,i.HEAP8=F=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=I=new Int32Array(e),i.HEAPU8=P=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=U=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=Y=new Float64Array(e)}w&&(C=i.buffer);var z=i.INITIAL_MEMORY||16777216;if(w)k=i.wasmMemory,C=i.buffer;else if(i.wasmMemory)k=i.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:z/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");k&&(C=k.buffer),z=C.byteLength,G(C);var B,K=[],Q=[],V=[],X=[];function Z(){return E||!1}function J(){var e=i.preRun.shift();K.unshift(e)}var $,ee=0,ne=null,te=null;function re(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):i.onAbort&&i.onAbort(e),x(e=\"Aborted(\"+e+\")\"),W=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function ae(){return $.startsWith(\"data:application/octet-stream;base64,\")}function ue(){var e=$;try{if(e==$&&A)return new Uint8Array(A);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){re(e)}}$=\"ort-wasm-threaded.wasm\",ae()||($=T($));var ie={};function oe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){(e=pe.Ma[e])||re(),pe.Xa(e)}function fe(e){var n=pe.mb();if(!n)return 6;pe.Sa.push(n),pe.Ma[e.La]=n,n.La=e.La;var t={cmd:\"run\",start_routine:e.qb,arg:e.jb,pthread_ptr:e.La};return n.Ra=()=>{t.time=performance.now(),n.postMessage(t,e.vb)},n.loaded&&(n.Ra(),delete n.Ra),0}function ce(e){if(w)return je(1,1,e);Z()||(pe.Za(),i.onExit&&i.onExit(e),W=!0),_(e,new oe(e))}function le(e,n){if(!n&&w)throw he(e),\"unwind\";Z()||w||(cn(),me(V),fn(0),Ze[1].length&&Je(1,10),Ze[2].length&&Je(2,10),pe.Za()),ce(e)}var pe={Pa:[],Sa:[],ab:[],Ma:{},Va:function(){w&&pe.nb()},xb:function(){},nb:function(){pe.receiveObjectTransfer=pe.pb,pe.threadInitTLS=pe.$a,pe.setExitStatus=pe.Ya,E=!1},Ya:function(){},Za:function(){for(var e of Object.values(pe.Ma))pe.Xa(e);for(e of pe.Pa)e.terminate();pe.Pa=[]},Xa:function(e){var n=e.La;delete pe.Ma[n],pe.Pa.push(e),pe.Sa.splice(pe.Sa.indexOf(e),1),e.La=0,hn(n)},pb:function(){},$a:function(){pe.ab.forEach((e=>e()))},ob:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.La&&(pe.lb=e.La),t.targetThread&&t.targetThread!=on()){var a=pe.Ma[t.yb];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ie(t.queue):\"spawnThread\"===r?fe(t):\"cleanupThread\"===r?se(t.thread):\"killThread\"===r?(t=t.thread,r=pe.Ma[t],delete pe.Ma[t],r.terminate(),hn(t),pe.Sa.splice(pe.Sa.indexOf(r),1),r.La=0):\"cancelThread\"===r?pe.Ma[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.Ra&&(e.Ra(),delete e.Ra)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?i.onAbort&&i.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);pe.lb=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:D})},ib:function(){var e=T(\"ort-wasm-threaded.worker.js\");pe.Pa.push(new Worker(e))},mb:function(){return 0==pe.Pa.length&&(pe.ib(),pe.ob(pe.Pa[0])),pe.Pa.pop()}};function me(e){for(;0<e.length;)e.shift()(i)}function de(e){var n=yn();return e=e(),bn(n),e}function he(e){if(w)return je(2,0,e);try{le(e)}catch(e){e instanceof oe||\"unwind\"==e||_(1,e)}}i.PThread=pe,i.establishStackSpace=function(){var e=on(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],_n(n,n-e),bn(n)};var ge,_e,ye=[];function be(e){this.Qa=e-24,this.hb=function(e){a()[this.Qa+4>>2>>>0]=e},this.eb=function(e){a()[this.Qa+8>>2>>>0]=e},this.fb=function(){r()[this.Qa>>2>>>0]=0},this.cb=function(){n()[this.Qa+12>>0>>>0]=0},this.gb=function(){n()[this.Qa+13>>0>>>0]=0},this.Va=function(e,n){this.bb(),this.hb(e),this.eb(n),this.fb(),this.cb(),this.gb()},this.bb=function(){a()[this.Qa+16>>2>>>0]=0}}function ve(e,n,t,r){return w?je(3,1,e,n,t,r):we(e,n,t,r)}function we(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?ve(e,n,t,r):(e={qb:t,La:e,jb:r,vb:a},w?(e.wb=\"spawnThread\",postMessage(e,a),0):fe(e))}function Oe(e,n,t){return w?je(4,1,e,n,t):0}function Te(e,n){if(w)return je(5,1,e,n)}function Me(e,n){if(w)return je(6,1,e,n)}function Se(e,n,t){if(w)return je(7,1,e,n,t)}function Ae(e,n,t){return w?je(8,1,e,n,t):0}function Re(e,n){if(w)return je(9,1,e,n)}function xe(e,n,t){if(w)return je(10,1,e,n,t)}function Ee(e,n,t,r){if(w)return je(11,1,e,n,t,r)}function ke(e,n,t,r){if(w)return je(12,1,e,n,t,r)}function De(e,n,t,r){if(w)return je(13,1,e,n,t,r)}function Ce(e){if(w)return je(14,1,e)}function Fe(e,n){if(w)return je(15,1,e,n)}function Pe(e,n,t){if(w)return je(16,1,e,n,t)}function Ie(e){Atomics.store(r(),e>>2,1),on()&&dn(e),Atomics.compareExchange(r(),e>>2,1,0)}function Ue(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Ye(e,n,t,r,a,u){return w?je(17,1,e,n,t,r,a,u):-52}function We(e,n,t,r,a,u){if(w)return je(18,1,e,n,t,r,a,u)}function He(e){var t=q(e)+1,r=sn(t);return r&&L(e,n(),r,t),r}function Ne(e,n,t){function u(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return je(19,1,e,n,t);var i=(new Date).getFullYear(),o=new Date(i,0,1),s=new Date(i,6,1);i=o.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(i!=f),e=u(o),n=u(s),e=He(e),n=He(n),f<i?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function je(e,n){var t=arguments.length-2,r=arguments;return de((()=>{for(var a=vn(8*t),i=a>>3,o=0;o<t;o++){var s=r[2+o];u()[i+o>>>0]=s}return mn(e,t,a,n)}))}i.invokeEntryPoint=function(e,n){var t=ye[e];t||(e>=ye.length&&(ye.length=e+1),ye[e]=t=B.get(e)),e=t(n),Z()?pe.Ya(e):gn(e)},i.executeNotifiedProxyingQueue=Ie,_e=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var Le,qe=[],Ge={};function ze(){if(!Le){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Ge)void 0===Ge[e]?delete n[e]:n[e]=Ge[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Le=t}return Le}function Be(e,t){if(w)return je(20,1,e,t);var r=0;return ze().forEach((function(u,i){var o=t+r;for(i=a()[e+4*i>>2>>>0]=o,o=0;o<u.length;++o)n()[i++>>0>>>0]=u.charCodeAt(o);n()[i>>0>>>0]=0,r+=u.length+1})),0}function Ke(e,n){if(w)return je(21,1,e,n);var t=ze();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Qe(e){return w?je(22,1,e):52}function Ve(e,n,t,r){return w?je(23,1,e,n,t,r):52}function Xe(e,n,t,r,a){return w?je(24,1,e,n,t,r,a):70}var Ze=[null,[],[]];function Je(e,n){var t=Ze[e];0===n||10===n?((1===e?R:x)(N(t,0)),t.length=0):t.push(n)}function $e(e,n,r,u){if(w)return je(25,1,e,n,r,u);for(var i=0,o=0;o<r;o++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++)Je(e,t()[s+c>>>0]);i+=f}return a()[u>>2>>>0]=i,0}function en(e){return 0==e%4&&(0!=e%100||0==e%400)}var nn=[31,29,31,30,31,30,31,31,30,31,30,31],tn=[31,28,31,30,31,30,31,31,30,31,30,31];function rn(e,t,a,u){function i(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function o(e,n){return i(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(en(e.getFullYear())?nn:tn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[u+40>>2>>>0];for(var p in u={tb:r()[u>>2>>>0],sb:r()[u+4>>2>>>0],Ta:r()[u+8>>2>>>0],Wa:r()[u+12>>2>>>0],Ua:r()[u+16>>2>>>0],Oa:r()[u+20>>2>>>0],Ka:r()[u+24>>2>>>0],Na:r()[u+28>>2>>>0],zb:r()[u+32>>2>>>0],rb:r()[u+36>>2>>>0],ub:l?j(l):\"\"},a=j(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ka].substring(0,3)},\"%A\":function(e){return m[e.Ka]},\"%b\":function(e){return d[e.Ua].substring(0,3)},\"%B\":function(e){return d[e.Ua]},\"%C\":function(e){return o((e.Oa+1900)/100|0,2)},\"%d\":function(e){return o(e.Wa,2)},\"%e\":function(e){return i(e.Wa,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return o(e.Ta,2)},\"%I\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),o(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Ua-1;n+=(en(e.Oa+1900)?nn:tn)[t++]);return o(e.Wa+n,3)},\"%m\":function(e){return o(e.Ua+1,2)},\"%M\":function(e){return o(e.sb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Ta&&12>e.Ta?\"AM\":\"PM\"},\"%S\":function(e){return o(e.tb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ka||7},\"%U\":function(e){return o(Math.floor((e.Na+7-e.Ka)/7),2)},\"%V\":function(e){var n=Math.floor((e.Na+7-(e.Ka+6)%7)/7);if(2>=(e.Ka+371-e.Na-2)%7&&n++,n)53==n&&(4==(t=(e.Ka+371-e.Na)%7)||3==t&&en(e.Oa)||(n=1));else{n=52;var t=(e.Ka+7-e.Na-1)%7;(4==t||5==t&&en(e.Oa%400-1))&&n++}return o(n,2)},\"%w\":function(e){return e.Ka},\"%W\":function(e){return o(Math.floor((e.Na+7-(e.Ka+6)%7)/7),2)},\"%y\":function(e){return(e.Oa+1900).toString().substring(2)},\"%Y\":function(e){return e.Oa+1900},\"%z\":function(e){var n=0<=(e=e.rb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.ub},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](u)));return p=function(e){var n=Array(q(e)+1);return L(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}pe.Va();var an=[null,ce,he,ve,Oe,Te,Me,Se,Ae,Re,xe,Ee,ke,De,Ce,Fe,Pe,Ye,We,Ne,Be,Ke,Qe,Ve,Xe,$e],un={b:function(e){return sn(e+24)+24},c:function(e,n,t){throw new be(e).Va(n,t),e},L:function(e){ln(e,!b,1,!y),pe.$a()},m:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):se(e)},D:we,i:Oe,S:Te,y:Me,B:Se,t:Ae,Q:Re,I:xe,P:Ee,o:ke,z:De,w:Ce,R:Fe,x:Pe,q:function(){},j:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},r:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},p:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>Ie(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=pe.Ma[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},V:function(e,n){e=new Date(1e3*Ue(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},W:function(e,n){e=new Date(1e3*Ue(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},X:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),u=new Date(n.getFullYear(),0,1),i=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=u.getTimezoneOffset(),s=Math.min(o,i);return 0>t?r()[e+32>>2>>>0]=Number(i!=o&&s==a):0<t!=(s==a)&&(i=Math.max(o,i),n.setTime(n.getTime()+6e4*((0<t?s:i)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-u.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Ye,H:We,Y:function e(n,t,r){e.kb||(e.kb=!0,Ne(n,t,r))},d:function(){re(\"\")},n:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";ge||(ge={}),ge[e]||(ge[e]=1,v&&(e=\"warning: \"+e),x(e))}},v:function(){return 4294901760},f:_e,O:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},g:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){qe.length=n,t>>=3;for(var r=0;r<n;r++)qe[r]=u()[t+r>>>0];return(0>e?ie[-e-1]:an[e]).apply(null,qe)},u:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var u=Math;a=Math.max(e,a),u=u.min.call(u,4294901760,a+(65536-a%65536)%65536);e:{try{k.grow(u-C.byteLength+65535>>>16),G(k.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\"unwind\"},M:Be,N:Ke,C:le,h:Qe,l:Ve,s:Xe,k:$e,a:k||i.wasmMemory,A:rn,e:function(e,n,t,r){return rn(e,n,t,r)}};!function(){function e(e,n){i.asm=e.exports,pe.ab.push(i.asm.wa),B=i.asm.ya,Q.unshift(i.asm.Z),D=n,w||(ee--,i.monitorRunDependencies&&i.monitorRunDependencies(ee),0==ee&&(null!==ne&&(clearInterval(ne),ne=null),te&&(e=te,te=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!A&&(y||b)){if(\"function\"==typeof fetch&&!$.startsWith(\"file://\"))return fetch($,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+$+\"'\";return e.arrayBuffer()})).catch((function(){return ue()}));if(c)return new Promise((function(e,n){c($,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return ue()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),re(e)}))}var r={a:un};if(w||(ee++,i.monitorRunDependencies&&i.monitorRunDependencies(ee)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(A||\"function\"!=typeof WebAssembly.instantiateStreaming||ae()||$.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch($,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.Z).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm._).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.$).apply(null,arguments)},i._OrtAppendExecutionProvider=function(){return(i._OrtAppendExecutionProvider=i.asm.aa).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ba).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.ca).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.da).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.ea).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.fa).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ga).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ha).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ia).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ja).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.ka).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.la).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.ma).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.na).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.oa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.pa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.qa).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.ra).apply(null,arguments)};var on=i._pthread_self=function(){return(on=i._pthread_self=i.asm.sa).apply(null,arguments)},sn=i._malloc=function(){return(sn=i._malloc=i.asm.ta).apply(null,arguments)};i._free=function(){return(i._free=i.asm.ua).apply(null,arguments)};var fn=i._fflush=function(){return(fn=i._fflush=i.asm.va).apply(null,arguments)};i.__emscripten_tls_init=function(){return(i.__emscripten_tls_init=i.asm.wa).apply(null,arguments)};var cn=i.___funcs_on_exit=function(){return(cn=i.___funcs_on_exit=i.asm.xa).apply(null,arguments)},ln=i.__emscripten_thread_init=function(){return(ln=i.__emscripten_thread_init=i.asm.za).apply(null,arguments)};i.__emscripten_thread_crashed=function(){return(i.__emscripten_thread_crashed=i.asm.Aa).apply(null,arguments)};var pn,mn=i._emscripten_run_in_main_runtime_thread_js=function(){return(mn=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ba).apply(null,arguments)},dn=i.__emscripten_proxy_execute_task_queue=function(){return(dn=i.__emscripten_proxy_execute_task_queue=i.asm.Ca).apply(null,arguments)},hn=i.__emscripten_thread_free_data=function(){return(hn=i.__emscripten_thread_free_data=i.asm.Da).apply(null,arguments)},gn=i.__emscripten_thread_exit=function(){return(gn=i.__emscripten_thread_exit=i.asm.Ea).apply(null,arguments)},_n=i._emscripten_stack_set_limits=function(){return(_n=i._emscripten_stack_set_limits=i.asm.Fa).apply(null,arguments)},yn=i.stackSave=function(){return(yn=i.stackSave=i.asm.Ga).apply(null,arguments)},bn=i.stackRestore=function(){return(bn=i.stackRestore=i.asm.Ha).apply(null,arguments)},vn=i.stackAlloc=function(){return(vn=i.stackAlloc=i.asm.Ia).apply(null,arguments)};function wn(){function e(){if(!pn&&(pn=!0,i.calledRun=!0,!W)&&(w||me(Q),o(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!w)){if(i.postRun)for(\"function\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();X.unshift(e)}me(X)}}if(!(0<ee))if(w)o(i),w||me(Q),postMessage({cmd:\"loaded\"});else{if(i.preRun)for(\"function\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)J();me(K),0<ee||(i.setStatus?(i.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){i.setStatus(\"\")}),1),e()}),1)):e())}}if(i.___cxa_is_pointer_type=function(){return(i.___cxa_is_pointer_type=i.asm.Ja).apply(null,arguments)},i.UTF8ToString=j,i.stringToUTF8=function(e,n,r){return L(e,t(),n,r)},i.lengthBytesUTF8=q,i.keepRuntimeAlive=Z,i.wasmMemory=k,i.stackSave=yn,i.stackRestore=bn,i.stackAlloc=vn,i.ExitStatus=oe,i.PThread=pe,te=function e(){pn||wn(),pn||(te=e)},i.preInit)for(\"function\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return wn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,k;b.ready=new Promise(function(a,c){aa=a;k=c});var ba=Object.assign({},b),p=\"./this.program\",ca=\"object\"==typeof window,t=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,x=\"\",y,A,B,fs,C,D;\r\nif(u)x=t?require(\"path\").dirname(x)+\"/\":__dirname+\"/\",D=()=>{C||(fs=require(\"fs\"),C=require(\"path\"))},y=function(a,c){D();a=C.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},B=a=>{a=y(a,!0);a.buffer||(a=new Uint8Array(a));return a},A=(a,c,e)=>{D();a=C.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\r\n}),b.inspect=function(){return\"[Emscripten Module object]\"};else if(ca||t)t?x=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):x=\"\",y=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},t&&(B=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),\r\nA=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var da=b.print||console.log.bind(console),E=b.printErr||console.warn.bind(console);Object.assign(b,ba);ba=null;b.thisProgram&&(p=b.thisProgram);var F;b.wasmBinary&&(F=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");\r\nvar H,ea=!1,fa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ha(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&fa)return fa.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function I(a,c){return(a>>>=0)?ha(J,a,c):\"\"}\r\nfunction K(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var q=a.charCodeAt(++h);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\r\nfunction L(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ia,M,J,N,O;function ja(){var a=H.buffer;ia=a;b.HEAP8=M=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=N=new Int32Array(a);b.HEAPU8=J=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=O=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ka=[],la=[],ma=[];function na(){var a=b.preRun.shift();ka.unshift(a)}\r\nvar P=0,Q=null,R=null;function G(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);ea=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");k(a);throw a;}function oa(){return S.startsWith(\"data:application/octet-stream;base64,\")}var S;S=\"ort-wasm.wasm\";if(!oa()){var pa=S;S=b.locateFile?b.locateFile(pa,x):x+pa}function qa(){var a=S;try{if(a==S&&F)return new Uint8Array(F);if(B)return B(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){G(c)}}\r\nfunction ra(){if(!F&&(ca||t)){if(\"function\"==typeof fetch&&!S.startsWith(\"file://\"))return fetch(S,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+S+\"'\";return a.arrayBuffer()}).catch(function(){return qa()});if(A)return new Promise(function(a,c){A(S,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return qa()})}function T(a){for(;0<a.length;)a.shift()(b)}\r\nfunction sa(a){this.ra=a-24;this.Ga=function(c){O[this.ra+4>>2>>>0]=c};this.za=function(c){O[this.ra+8>>2>>>0]=c};this.Aa=function(){N[this.ra>>2>>>0]=0};this.ya=function(){M[this.ra+12>>0>>>0]=0};this.Fa=function(){M[this.ra+13>>0>>>0]=0};this.wa=function(c,e){this.xa();this.Ga(c);this.za(e);this.Aa();this.ya();this.Fa()};this.xa=function(){O[this.ra+16>>2>>>0]=0}}var ta=0;function xa(a){var c=L(a)+1,e=U(c);e&&K(a,M,e,c);return e}\r\nfunction ya(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var q=l.getTimezoneOffset();N[a>>2>>>0]=60*Math.max(g,q);N[c>>2>>>0]=Number(g!=q);a=f(h);c=f(l);a=xa(a);c=xa(c);q<g?(O[e>>2>>>0]=a,O[e+4>>2>>>0]=c):(O[e>>2>>>0]=c,O[e+4>>2>>>0]=a)}function V(a,c,e){V.va||(V.va=!0,ya(a,c,e))}var W={};\r\nfunction za(){if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:p||\"./this.program\"},c;for(c in W)void 0===W[c]?delete a[c]:a[c]=W[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);X=e}return X}var X,Aa=[null,[],[]];function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var Ba=[31,29,31,30,31,30,31,31,30,31,30,31],Ca=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Da(a){var c=Array(L(a)+1);K(a,c,0,c.length);return c}\r\nfunction Ea(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var z;0===(z=n(d.getFullYear()-m.getFullYear()))&&0===(z=n(d.getMonth()-m.getMonth()))&&(z=n(d.getDate()-m.getDate()));return z}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.pa;for(d=new Date((new Date(d.qa+1900,0,1)).getTime());0<m;){var n=d.getMonth(),z=(Y(d.getFullYear())?Ba:Ca)[n];if(m>z-d.getDate())m-=z-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=q(new Date(d.getFullYear(),\r\n0,4));n=q(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=N[f+40>>2>>>0];f={Da:N[f>>2>>>0],Ca:N[f+4>>2>>>0],sa:N[f+8>>2>>>0],ua:N[f+12>>2>>>0],ta:N[f+16>>2>>>0],qa:N[f+20>>2>>>0],ka:N[f+24>>2>>>0],pa:N[f+28>>2>>>0],Ha:N[f+32>>2>>>0],Ba:N[f+36>>2>>>0],Ea:v?I(v):\"\"};e=I(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in v)e=e.replace(new RegExp(r,\"g\"),v[r]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return va[d.ka].substring(0,3)},\"%A\":function(d){return va[d.ka]},\"%b\":function(d){return wa[d.ta].substring(0,\r\n3)},\"%B\":function(d){return wa[d.ta]},\"%C\":function(d){return h((d.qa+1900)/100|0,2)},\"%d\":function(d){return h(d.ua,2)},\"%e\":function(d){return g(d.ua,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.sa,2)},\"%I\":function(d){d=d.sa;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.ta-1;m+=(Y(d.qa+1900)?Ba:Ca)[n++]);return h(d.ua+m,3)},\"%m\":function(d){return h(d.ta+1,2)},\"%M\":function(d){return h(d.Ca,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.sa&&12>d.sa?\"AM\":\"PM\"},\"%S\":function(d){return h(d.Da,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ka||7},\"%U\":function(d){return h(Math.floor((d.pa+7-d.ka)/7),2)},\"%V\":function(d){var m=Math.floor((d.pa+7-(d.ka+6)%7)/7);2>=(d.ka+371-d.pa-2)%7&&m++;if(m)53==m&&(n=(d.ka+371-d.pa)%7,4==n||3==n&&Y(d.qa)||(m=1));else{m=52;var n=(d.ka+7-d.pa-1)%7;(4==n||5==n&&Y(d.qa%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.ka},\"%W\":function(d){return h(Math.floor((d.pa+\r\n7-(d.ka+6)%7)/7),2)},\"%y\":function(d){return(d.qa+1900).toString().substring(2)},\"%Y\":function(d){return d.qa+1900},\"%z\":function(d){d=d.Ba;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ea},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(r in v)e.includes(r)&&(e=e.replace(new RegExp(r,\"g\"),v[r](f)));e=e.replace(/\\0\\0/g,\"%\");r=Da(e);if(r.length>c)return 0;M.set(r,a>>>0);return r.length-1}\r\nvar Fa={a:function(a){return U(a+24)+24},b:function(a,c,e){(new sa(a)).wa(c,e);ta++;throw a;},g:function(){return 0},J:function(){},w:function(){},z:function(){},s:function(){return 0},H:function(){},C:function(){},G:function(){},k:function(){},y:function(){},u:function(){},I:function(){},v:function(){},o:function(){},q:function(){G(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},p:function(){G(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nl:function(){return Date.now()},K:function(){return!0},L:function(a,c){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[c>>2>>>0]=a.getUTCSeconds();N[c+4>>2>>>0]=a.getUTCMinutes();N[c+8>>2>>>0]=a.getUTCHours();N[c+12>>2>>>0]=a.getUTCDate();N[c+16>>2>>>0]=a.getUTCMonth();N[c+20>>2>>>0]=a.getUTCFullYear()-1900;N[c+24>>2>>>0]=a.getUTCDay();N[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},M:function(a,c){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[c>>2>>>0]=a.getSeconds();\r\nN[c+4>>2>>>0]=a.getMinutes();N[c+8>>2>>>0]=a.getHours();N[c+12>>2>>>0]=a.getDate();N[c+16>>2>>>0]=a.getMonth();N[c+20>>2>>>0]=a.getFullYear()-1900;N[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;N[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();N[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},m:function(a){var c=new Date(N[a+20>>2>>>0]+1900,N[a+16>>\r\n2>>>0],N[a+12>>2>>>0],N[a+8>>2>>>0],N[a+4>>2>>>0],N[a>>2>>>0],0),e=N[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),q=Math.min(l,h);0>e?N[a+32>>2>>>0]=Number(h!=l&&q==f):0<e!=(q==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?q:h)-f)));N[a+24>>2>>>0]=c.getDay();N[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;N[a>>2>>>0]=c.getSeconds();N[a+4>>2>>>0]=c.getMinutes();N[a+8>>2>>>0]=c.getHours();N[a+\r\n12>>2>>>0]=c.getDate();N[a+16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},A:function(){return-52},B:function(){},n:V,d:function(){G(\"\")},t:function(){return 4294901760},h:u?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),F:function(a,c,e){J.copyWithin(a>>>0,c>>>0,c+e>>>0)},f:function(a){var c=J.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%\r\n65536);a:{try{H.grow(g-ia.byteLength+65535>>>16);ja();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},D:function(a,c){var e=0;za().forEach(function(f,g){var h=c+e;g=O[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)M[g++>>0>>>0]=f.charCodeAt(h);M[g>>0>>>0]=0;e+=f.length+1});return 0},E:function(a,c){var e=za();O[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});O[c>>2>>>0]=f;return 0},e:function(){return 52},j:function(){return 52},r:function(){return 70},i:function(a,c,e,f){for(var g=\r\n0,h=0;h<e;h++){var l=O[c>>2>>>0],q=O[c+4>>2>>>0];c+=8;for(var w=0;w<q;w++){var v=J[l+w>>>0],r=Aa[a];0===v||10===v?((1===a?da:E)(ha(r,0)),r.length=0):r.push(v)}g+=q}O[f>>2>>>0]=g;return 0},x:Ea,c:function(a,c,e,f){return Ea(a,c,e,f)}};\r\n(function(){function a(g){b.asm=g.exports;H=b.asm.N;ja();la.unshift(b.asm.O);P--;b.monitorRunDependencies&&b.monitorRunDependencies(P);0==P&&(null!==Q&&(clearInterval(Q),Q=null),R&&(g=R,R=null,g()))}function c(g){a(g.instance)}function e(g){return ra().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){E(\"failed to asynchronously prepare wasm: \"+h);G(h)})}var f={a:Fa};P++;b.monitorRunDependencies&&b.monitorRunDependencies(P);if(b.instantiateWasm)try{return b.instantiateWasm(f,\r\na)}catch(g){return E(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return F||\"function\"!=typeof WebAssembly.instantiateStreaming||oa()||S.startsWith(\"file://\")||u||\"function\"!=typeof fetch?e(c):fetch(S,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){E(\"wasm streaming compile failed: \"+h);E(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(k);return{}})();\r\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.O).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.P).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.Q).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.R).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.S).apply(null,arguments)};\r\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.T).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.U).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.V).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.W).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.X).apply(null,arguments)};\r\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm.Y).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.Z).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm._).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.$).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm.aa).apply(null,arguments)};\r\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.ba).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.ca).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.da).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ea).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.fa).apply(null,arguments)};\r\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ga).apply(null,arguments)};var U=b._malloc=function(){return(U=b._malloc=b.asm.ha).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ia).apply(null,arguments)};b._fflush=function(){return(b._fflush=b.asm.ja).apply(null,arguments)};\r\nvar Ga=b.stackSave=function(){return(Ga=b.stackSave=b.asm.la).apply(null,arguments)},Ha=b.stackRestore=function(){return(Ha=b.stackRestore=b.asm.ma).apply(null,arguments)},Ia=b.stackAlloc=function(){return(Ia=b.stackAlloc=b.asm.na).apply(null,arguments)};b.___cxa_is_pointer_type=function(){return(b.___cxa_is_pointer_type=b.asm.oa).apply(null,arguments)};b.UTF8ToString=I;b.stringToUTF8=function(a,c,e){return K(a,J,c,e)};b.lengthBytesUTF8=L;b.stackSave=Ga;b.stackRestore=Ha;b.stackAlloc=Ia;var Z;\r\nR=function Ja(){Z||Ka();Z||(R=Ja)};\r\nfunction Ka(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!ea)){T(la);aa(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();ma.unshift(c)}T(ma)}}if(!(0<P)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)na();T(ka);0<P||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\r\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ka();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    roiInputIdx = 1;\n    scalesInputIdx = 2;\n    sizesInputIdx = 3;\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n      const modelDataOffset = wasm._malloc(model.byteLength);\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        wasm.HEAPU8.set(model, modelDataOffset);\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelDataOffset);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.13.1\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||__filename,function(e){function t(){return C.buffer!=D&&G(C.buffer),F}function r(){return C.buffer!=D&&G(C.buffer),U}function a(){return C.buffer!=D&&G(C.buffer),I}function o(){return C.buffer!=D&&G(C.buffer),L}function i(){return C.buffer!=D&&G(C.buffer),W}var s,u,c;e=e||{},s||(s=void 0!==e?e:{}),s.ready=new Promise((function(e,t){u=e,c=t}));var l,f,p,d,m,g,h=Object.assign({},s),y=\\\"./this.program\\\",_=(e,t)=>{throw t},v=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=s.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function A(e){return s.locateFile?s.locateFile(e,S):S+e}if(w){let t;S=b?n(622).dirname(S)+\\\"/\\\":__dirname+\\\"/\\\",g=()=>{m||(d=n(747),m=n(622))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof ue))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),_=(e,t)=>{if(Z())throw process.exitCode=e,t;t instanceof ue||x(\\\"exiting due to exception: \\\"+t),process.exit(e)},s.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(13)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(v||b)&&(b?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(global.performance=n(630).performance);var T=console.log.bind(console),E=console.warn.bind(console);w&&(g(),T=e=>d.writeSync(1,e+\\\"\\\\n\\\"),E=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,R=s.print||T,x=s.printErr||E;Object.assign(s,h),h=null,s.thisProgram&&(y=s.thisProgram),s.quit&&(_=s.quit),s.wasmBinary&&(M=s.wasmBinary);var k=s.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&ae(\\\"no native wasm support detected\\\");var C,P,D,F,U,I,L,W,H=!1,j=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&j)return j.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\\\"\\\"}function N(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function B(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,s.HEAP8=F=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=I=new Int32Array(e),s.HEAPU8=U=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=L=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=W=new Float64Array(e)}O&&(D=s.buffer);var q=s.INITIAL_MEMORY||16777216;if(O)C=s.wasmMemory,D=s.buffer;else if(s.wasmMemory)C=s.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");C&&(D=C.buffer),q=D.byteLength,G(D);var $,V=[],Q=[],X=[],K=[];function Z(){return k||!1}function J(){var e=s.preRun.shift();V.unshift(e)}var ee,te=0,ne=null,re=null;function ae(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):s.onAbort&&s.onAbort(e),x(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function oe(){return ee.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ie(){var e=ee;try{if(e==ee&&M)return new Uint8Array(M);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ae(e)}}ee=\\\"ort-wasm-threaded.wasm\\\",oe()||(ee=A(ee));var se={};function ue(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ce(e){(e=de.Ma[e])||ae(),de.Xa(e)}function le(e){var t=de.mb();if(!t)return 6;de.Sa.push(t),de.Ma[e.La]=t,t.La=e.La;var n={cmd:\\\"run\\\",start_routine:e.qb,arg:e.jb,pthread_ptr:e.La};return t.Ra=()=>{n.time=performance.now(),t.postMessage(n,e.vb)},t.loaded&&(t.Ra(),delete t.Ra),0}function fe(e){if(O)return ze(1,1,e);Z()||(de.Za(),s.onExit&&s.onExit(e),H=!0),_(e,new ue(e))}function pe(e,t){if(!t&&O)throw he(e),\\\"unwind\\\";Z()||O||(lt(),me(X),ct(0),Ze[1].length&&Je(1,10),Ze[2].length&&Je(2,10),de.Za()),fe(e)}var de={Pa:[],Sa:[],ab:[],Ma:{},Va:function(){O&&de.nb()},xb:function(){},nb:function(){de.receiveObjectTransfer=de.pb,de.threadInitTLS=de.$a,de.setExitStatus=de.Ya,k=!1},Ya:function(){},Za:function(){for(var e of Object.values(de.Ma))de.Xa(e);for(e of de.Pa)e.terminate();de.Pa=[]},Xa:function(e){var t=e.La;delete de.Ma[t],de.Pa.push(e),de.Sa.splice(de.Sa.indexOf(e),1),e.La=0,gt(t)},pb:function(){},$a:function(){de.ab.forEach((e=>e()))},ob:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.La&&(de.lb=e.La),n.targetThread&&n.targetThread!=st()){var a=de.Ma[n.yb];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?Ie(n.queue):\\\"spawnThread\\\"===r?le(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=de.Ma[n],delete de.Ma[n],r.terminate(),gt(n),de.Sa.splice(de.Sa.indexOf(r),1),r.La=0):\\\"cancelThread\\\"===r?de.Ma[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Ra&&(e.Ra(),delete e.Ra)):\\\"print\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?s.onAbort&&s.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);de.lb=void 0},e.onerror=e=>{throw x(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:P})},ib:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");de.Pa.push(new Worker(e))},mb:function(){return 0==de.Pa.length&&(de.ib(),de.ob(de.Pa[0])),de.Pa.pop()}};function me(e){for(;0<e.length;)e.shift()(s)}function ge(e){var t=_t();return e=e(),vt(t),e}function he(e){if(O)return ze(2,0,e);try{pe(e)}catch(e){e instanceof ue||\\\"unwind\\\"==e||_(1,e)}}s.PThread=de,s.establishStackSpace=function(){var e=st(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],yt(t,t-e),vt(t)};var ye,_e,ve=[];function be(e){this.Qa=e-24,this.hb=function(e){o()[this.Qa+4>>2>>>0]=e},this.eb=function(e){o()[this.Qa+8>>2>>>0]=e},this.fb=function(){a()[this.Qa>>2>>>0]=0},this.cb=function(){t()[this.Qa+12>>0>>>0]=0},this.gb=function(){t()[this.Qa+13>>0>>>0]=0},this.Va=function(e,t){this.bb(),this.hb(e),this.eb(t),this.fb(),this.cb(),this.gb()},this.bb=function(){o()[this.Qa+16>>2>>>0]=0}}function we(e,t,n,r){return O?ze(3,1,e,t,n,r):Oe(e,t,n,r)}function Oe(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?we(e,t,n,r):(e={qb:n,La:e,jb:r,vb:a},O?(e.wb=\\\"spawnThread\\\",postMessage(e,a),0):le(e))}function Se(e,t,n){return O?ze(4,1,e,t,n):0}function Ae(e,t){if(O)return ze(5,1,e,t)}function Te(e,t){if(O)return ze(6,1,e,t)}function Ee(e,t,n){if(O)return ze(7,1,e,t,n)}function Me(e,t,n){return O?ze(8,1,e,t,n):0}function Re(e,t){if(O)return ze(9,1,e,t)}function xe(e,t,n){if(O)return ze(10,1,e,t,n)}function ke(e,t,n,r){if(O)return ze(11,1,e,t,n,r)}function Ce(e,t,n,r){if(O)return ze(12,1,e,t,n,r)}function Pe(e,t,n,r){if(O)return ze(13,1,e,t,n,r)}function De(e){if(O)return ze(14,1,e)}function Fe(e,t){if(O)return ze(15,1,e,t)}function Ue(e,t,n){if(O)return ze(16,1,e,t,n)}function Ie(e){Atomics.store(a(),e>>2,1),st()&&mt(e),Atomics.compareExchange(a(),e>>2,1,0)}function Le(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function We(e,t,n,r,a,o){return O?ze(17,1,e,t,n,r,a,o):-52}function He(e,t,n,r,a,o){if(O)return ze(18,1,e,t,n,r,a,o)}function je(e){var n=B(e)+1,r=ut(n);return r&&N(e,t(),r,n),r}function Ye(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return ze(19,1,e,t,n);var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(s),t=r(u),e=je(e),t=je(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function ze(e,t){var n=arguments.length-2,r=arguments;return ge((()=>{for(var a=bt(8*n),o=a>>3,s=0;s<n;s++){var u=r[2+s];i()[o+s>>>0]=u}return dt(e,n,a,t)}))}s.invokeEntryPoint=function(e,t){var n=ve[e];n||(e>=ve.length&&(ve.length=e+1),ve[e]=n=$.get(e)),e=n(t),Z()?de.Ya(e):ht(e)},s.executeNotifiedProxyingQueue=Ie,_e=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-s.__performance_now_clock_drift:()=>performance.now();var Ne,Be=[],Ge={};function qe(){if(!Ne){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Ge)void 0===Ge[e]?delete t[e]:t[e]=Ge[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Ne=n}return Ne}function $e(e,n){if(O)return ze(20,1,e,n);var r=0;return qe().forEach((function(a,i){var s=n+r;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Ve(e,t){if(O)return ze(21,1,e,t);var n=qe();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function Qe(e){return O?ze(22,1,e):52}function Xe(e,t,n,r){return O?ze(23,1,e,t,n,r):52}function Ke(e,t,n,r,a){return O?ze(24,1,e,t,n,r,a):70}var Ze=[null,[],[]];function Je(e,t){var n=Ze[e];0===t||10===t?((1===e?R:x)(Y(n,0)),n.length=0):n.push(t)}function et(e,t,n,a){if(O)return ze(25,1,e,t,n,a);for(var i=0,s=0;s<n;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++)Je(e,r()[u+l>>>0]);i+=c}return o()[a>>2>>>0]=i,0}function tt(e){return 0==e%4&&(0!=e%100||0==e%400)}var nt=[31,29,31,30,31,30,31,31,30,31,30,31],rt=[31,28,31,30,31,30,31,31,30,31,30,31];function at(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(tt(e.getFullYear())?nt:rt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={tb:a()[o>>2>>>0],sb:a()[o+4>>2>>>0],Ta:a()[o+8>>2>>>0],Wa:a()[o+12>>2>>>0],Ua:a()[o+16>>2>>>0],Oa:a()[o+20>>2>>>0],Ka:a()[o+24>>2>>>0],Na:a()[o+28>>2>>>0],zb:a()[o+32>>2>>>0],rb:a()[o+36>>2>>>0],ub:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ka].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ka]},\\\"%b\\\":function(e){return m[e.Ua].substring(0,3)},\\\"%B\\\":function(e){return m[e.Ua]},\\\"%C\\\":function(e){return s((e.Oa+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Wa,2)},\\\"%e\\\":function(e){return i(e.Wa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return s(e.Ta,2)},\\\"%I\\\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Ua-1;t+=(tt(e.Oa+1900)?nt:rt)[n++]);return s(e.Wa+t,3)},\\\"%m\\\":function(e){return s(e.Ua+1,2)},\\\"%M\\\":function(e){return s(e.sb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ta&&12>e.Ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.tb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ka||7},\\\"%U\\\":function(e){return s(Math.floor((e.Na+7-e.Ka)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Na+7-(e.Ka+6)%7)/7);if(2>=(e.Ka+371-e.Na-2)%7&&t++,t)53==t&&(4==(n=(e.Ka+371-e.Na)%7)||3==n&&tt(e.Oa)||(t=1));else{t=52;var n=(e.Ka+7-e.Na-1)%7;(4==n||5==n&&tt(e.Oa%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.Ka},\\\"%W\\\":function(e){return s(Math.floor((e.Na+7-(e.Ka+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Oa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.rb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.ub},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(B(e)+1);return N(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}de.Va();var ot=[null,fe,he,we,Se,Ae,Te,Ee,Me,Re,xe,ke,Ce,Pe,De,Fe,Ue,We,He,Ye,$e,Ve,Qe,Xe,Ke,et],it={b:function(e){return ut(e+24)+24},c:function(e,t,n){throw new be(e).Va(t,n),e},L:function(e){ft(e,!b,1,!v),de.$a()},m:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},D:Oe,i:Se,S:Ae,y:Te,B:Ee,t:Me,Q:Re,I:xe,P:ke,o:Ce,z:Pe,w:De,R:Fe,x:Ue,q:function(){},j:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},r:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},p:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>Ie(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=de.Ma[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},V:function(e,t){e=new Date(1e3*Le(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},W:function(e,t){e=new Date(1e3*Le(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},X:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=s&&u==r):0<n!=(u==r)&&(i=Math.max(s,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:We,H:He,Y:function e(t,n,r){e.kb||(e.kb=!0,Ye(t,n,r))},d:function(){ae(\\\"\\\")},n:function(){if(!w&&!b){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";ye||(ye={}),ye[e]||(ye[e]=1,w&&(e=\\\"warning: \\\"+e),x(e))}},v:function(){return 4294901760},f:_e,O:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},g:function(){return w?n(87).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Be.length=t,n>>=3;for(var r=0;r<t;r++)Be[r]=i()[n+r>>>0];return(0>e?se[-e-1]:ot[e]).apply(null,Be)},u:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{C.grow(o-D.byteLength+65535>>>16),G(C.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\\\"unwind\\\"},M:$e,N:Ve,C:pe,h:Qe,l:Xe,s:Ke,k:et,a:C||s.wasmMemory,A:at,e:function(e,t,n,r){return at(e,t,n,r)}};!function(){function e(e,t){s.asm=e.exports,de.ab.push(s.asm.wa),$=s.asm.ya,Q.unshift(s.asm.Z),P=t,O||(te--,s.monitorRunDependencies&&s.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),re&&(e=re,re=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(v||b)){if(\\\"function\\\"==typeof fetch&&!ee.startsWith(\\\"file://\\\"))return fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+ee+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ie()}));if(f)return new Promise((function(e,t){f(ee,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ie()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),ae(e)}))}var r={a:it};if(O||(te++,s.monitorRunDependencies&&s.monitorRunDependencies(te)),s.instantiateWasm)try{return s.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||oe()||ee.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?n(t):fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm.Z).apply(null,arguments)},s._OrtInit=function(){return(s._OrtInit=s.asm._).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.$).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.aa).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ba).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.ca).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.da).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.ea).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.fa).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ga).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.ha).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ia).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ja).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.ka).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.la).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.ma).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.na).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.oa).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.pa).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.qa).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.ra).apply(null,arguments)};var st=s._pthread_self=function(){return(st=s._pthread_self=s.asm.sa).apply(null,arguments)},ut=s._malloc=function(){return(ut=s._malloc=s.asm.ta).apply(null,arguments)};s._free=function(){return(s._free=s.asm.ua).apply(null,arguments)};var ct=s._fflush=function(){return(ct=s._fflush=s.asm.va).apply(null,arguments)};s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.wa).apply(null,arguments)};var lt=s.___funcs_on_exit=function(){return(lt=s.___funcs_on_exit=s.asm.xa).apply(null,arguments)},ft=s.__emscripten_thread_init=function(){return(ft=s.__emscripten_thread_init=s.asm.za).apply(null,arguments)};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.Aa).apply(null,arguments)};var pt,dt=s._emscripten_run_in_main_runtime_thread_js=function(){return(dt=s._emscripten_run_in_main_runtime_thread_js=s.asm.Ba).apply(null,arguments)},mt=s.__emscripten_proxy_execute_task_queue=function(){return(mt=s.__emscripten_proxy_execute_task_queue=s.asm.Ca).apply(null,arguments)},gt=s.__emscripten_thread_free_data=function(){return(gt=s.__emscripten_thread_free_data=s.asm.Da).apply(null,arguments)},ht=s.__emscripten_thread_exit=function(){return(ht=s.__emscripten_thread_exit=s.asm.Ea).apply(null,arguments)},yt=s._emscripten_stack_set_limits=function(){return(yt=s._emscripten_stack_set_limits=s.asm.Fa).apply(null,arguments)},_t=s.stackSave=function(){return(_t=s.stackSave=s.asm.Ga).apply(null,arguments)},vt=s.stackRestore=function(){return(vt=s.stackRestore=s.asm.Ha).apply(null,arguments)},bt=s.stackAlloc=function(){return(bt=s.stackAlloc=s.asm.Ia).apply(null,arguments)};function wt(){function e(){if(!pt&&(pt=!0,s.calledRun=!0,!H)&&(O||me(Q),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!O)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();K.unshift(e)}me(K)}}if(!(0<te))if(O)u(s),O||me(Q),postMessage({cmd:\\\"loaded\\\"});else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)J();me(V),0<te||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.___cxa_is_pointer_type=function(){return(s.___cxa_is_pointer_type=s.asm.Ja).apply(null,arguments)},s.UTF8ToString=z,s.stringToUTF8=function(e,t,n){return N(e,r(),t,n)},s.lengthBytesUTF8=B,s.keepRuntimeAlive=Z,s.wasmMemory=C,s.stackSave=_t,s.stackRestore=vt,s.stackAlloc=bt,s.ExitStatus=ue,s.PThread=de,re=function e(){pt||wt(),pt||(re=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return wt(),e.ready});e.exports=r},118:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||__filename,function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,s,u,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,m=\\\"function\\\"==typeof importScripts,g=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";g?(h=m?n(622).dirname(h)+\\\"/\\\":__dirname+\\\"/\\\",l=()=>{c||(u=n(747),c=n(622))},o=function(e,t){return l(),e=c.normalize(e),u.readFileSync(e,t?void 0:\\\"utf8\\\")},s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),u.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||m)&&(m?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},m&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,_=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(y=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var b,w,O,S,A,T,E=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function x(e,t){return(e>>>=0)?R(S,e,t):\\\"\\\"}function k(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function C(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function P(){var e=b.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=T=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var D=[],F=[],U=[];function I(){var e=t.preRun.shift();D.unshift(e)}var L,W=0,H=null,j=null;function Y(e){throw t.onAbort&&t.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function z(){return L.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(L=\\\"ort-wasm.wasm\\\",!z()){var N=L;L=t.locateFile?t.locateFile(N,h):h+N}function B(){var e=L;try{if(e==L&&y)return new Uint8Array(y);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){Y(e)}}function G(e){for(;0<e.length;)e.shift()(t)}function q(e){this.ra=e-24,this.Ga=function(e){T[this.ra+4>>2>>>0]=e},this.za=function(e){T[this.ra+8>>2>>>0]=e},this.Aa=function(){A[this.ra>>2>>>0]=0},this.ya=function(){O[this.ra+12>>0>>>0]=0},this.Fa=function(){O[this.ra+13>>0>>>0]=0},this.wa=function(e,t){this.xa(),this.Ga(e),this.za(t),this.Aa(),this.ya(),this.Fa()},this.xa=function(){T[this.ra+16>>2>>>0]=0}}function $(e){var t=C(e)+1,n=re(t);return n&&k(e,O,n,t),n}var V={};function Q(){if(!X){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in V)void 0===V[e]?delete t[e]:t[e]=V[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);X=n}return X}var X,K=[null,[],[]];function Z(e){return 0==e%4&&(0!=e%100||0==e%400)}var J=[31,29,31,30,31,30,31,31,30,31,30,31],ee=[31,28,31,30,31,30,31,31,30,31,30,31];function te(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.pa;for(e=new Date(new Date(e.qa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Z(e.getFullYear())?J:ee)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[r+40>>2>>>0];for(var l in r={Da:A[r>>2>>>0],Ca:A[r+4>>2>>>0],sa:A[r+8>>2>>>0],ua:A[r+12>>2>>>0],ta:A[r+16>>2>>>0],qa:A[r+20>>2>>>0],ka:A[r+24>>2>>>0],pa:A[r+28>>2>>>0],Ha:A[r+32>>2>>>0],Ba:A[r+36>>2>>>0],Ea:c?x(c):\\\"\\\"},n=x(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ka].substring(0,3)},\\\"%A\\\":function(e){return f[e.ka]},\\\"%b\\\":function(e){return p[e.ta].substring(0,3)},\\\"%B\\\":function(e){return p[e.ta]},\\\"%C\\\":function(e){return o((e.qa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.ua,2)},\\\"%e\\\":function(e){return a(e.ua,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.sa,2)},\\\"%I\\\":function(e){return 0==(e=e.sa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.ta-1;t+=(Z(e.qa+1900)?J:ee)[n++]);return o(e.ua+t,3)},\\\"%m\\\":function(e){return o(e.ta+1,2)},\\\"%M\\\":function(e){return o(e.Ca,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.sa&&12>e.sa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Da,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ka||7},\\\"%U\\\":function(e){return o(Math.floor((e.pa+7-e.ka)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.pa+7-(e.ka+6)%7)/7);if(2>=(e.ka+371-e.pa-2)%7&&t++,t)53==t&&(4==(n=(e.ka+371-e.pa)%7)||3==n&&Z(e.qa)||(t=1));else{t=52;var n=(e.ka+7-e.pa-1)%7;(4==n||5==n&&Z(e.qa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ka},\\\"%W\\\":function(e){return o(Math.floor((e.pa+7-(e.ka+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.qa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.qa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ba);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ea},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(C(e)+1);return k(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(O.set(l,e>>>0),l.length-1)}var ne={a:function(e){return re(e+24)+24},b:function(e,t,n){throw new q(e).wa(t,n),e},g:function(){return 0},J:function(){},w:function(){},z:function(){},s:function(){return 0},H:function(){},C:function(){},G:function(){},k:function(){},y:function(){},u:function(){},I:function(){},v:function(){},o:function(){},q:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},p:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},K:function(){return!0},L:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},M:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);A[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},m:function(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),s=Math.min(i,o);return 0>n?A[e+32>>2>>>0]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},A:function(){return-52},B:function(){},n:function e(t,n,r){e.va||(e.va=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();A[e>>2>>>0]=60*Math.max(a,s),A[t>>2>>>0]=Number(a!=s),e=r(o),t=r(i),e=$(e),t=$(t),s<a?(T[n>>2>>>0]=e,T[n+4>>2>>>0]=t):(T[n>>2>>>0]=t,T[n+4>>2>>>0]=e)}(t,n,r))},d:function(){Y(\\\"\\\")},t:function(){return 4294901760},h:g?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),F:function(e,t,n){S.copyWithin(e>>>0,t>>>0,t+n>>>0)},f:function(e){var t=S.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{b.grow(a-w.byteLength+65535>>>16),P();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){var n=0;return Q().forEach((function(r,a){var o=t+n;for(a=T[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)O[a++>>0>>>0]=r.charCodeAt(o);O[a>>0>>>0]=0,n+=r.length+1})),0},E:function(e,t){var n=Q();T[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),T[t>>2>>>0]=r,0},e:function(){return 52},j:function(){return 52},r:function(){return 70},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=T[t>>2>>>0],s=T[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=S[i+u>>>0],l=K[e];0===c||10===c?((1===e?_:v)(R(l,0)),l.length=0):l.push(c)}a+=s}return T[r>>2>>>0]=a,0},x:te,c:function(e,t,n,r){return te(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,b=t.asm.N,P(),F.unshift(t.asm.O),W--,t.monitorRunDependencies&&t.monitorRunDependencies(W),0==W&&(null!==H&&(clearInterval(H),H=null),j&&(e=j,j=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!y&&(d||m)){if(\\\"function\\\"==typeof fetch&&!L.startsWith(\\\"file://\\\"))return fetch(L,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+L+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return B()}));if(i)return new Promise((function(e,t){i(L,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return B()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){v(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var o={a:ne};if(W++,t.monitorRunDependencies&&t.monitorRunDependencies(W),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z()||L.startsWith(\\\"file://\\\")||g||\\\"function\\\"!=typeof fetch?r(n):fetch(L,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return v(\\\"wasm streaming compile failed: \\\"+e),v(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.O).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.P).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.Q).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.R).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.S).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.T).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.U).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.V).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.W).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.X).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.Y).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.Z).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm._).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.$).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.aa).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.ba).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ca).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.da).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ea).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.fa).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ga).apply(null,arguments)};var re=t._malloc=function(){return(re=t._malloc=t.asm.ha).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ia).apply(null,arguments)},t._fflush=function(){return(t._fflush=t.asm.ja).apply(null,arguments)};var ae,oe=t.stackSave=function(){return(oe=t.stackSave=t.asm.la).apply(null,arguments)},ie=t.stackRestore=function(){return(ie=t.stackRestore=t.asm.ma).apply(null,arguments)},se=t.stackAlloc=function(){return(se=t.stackAlloc=t.asm.na).apply(null,arguments)};function ue(){function e(){if(!ae&&(ae=!0,t.calledRun=!0,!E)){if(G(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();U.unshift(e)}G(U)}}if(!(0<W)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)I();G(D),0<W||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.___cxa_is_pointer_type=function(){return(t.___cxa_is_pointer_type=t.asm.oa).apply(null,arguments)},t.UTF8ToString=x,t.stringToUTF8=function(e,t,n){return k(e,S,t,n)},t.lengthBytesUTF8=C,t.stackSave=oe,t.stackRestore=ie,t.stackAlloc=se,j=function e(){ae||ue(),ae||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return ue(),e.ready});e.exports=r},967:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)t.iterateExtraOptions(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},586:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setRunOptions=e=>{const t=o.getInstance();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=a.allocWasmString(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=a.allocWasmString(e,i),s=a.allocWasmString(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setSessionOptions=e=>{const t=o.getInstance();let n=0;const i=[],s=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")})(s);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(s.graphOptimizationLevel=\\\"all\\\");const u=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(s.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(s.executionMode=\\\"sequential\\\");const c=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(s.executionMode);let l=0;if(void 0!==(null==e?void 0:e.logId)&&(l=a.allocWasmString(e.logId,i)),void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);if(void 0===(null==e?void 0:e.enableProfiling)&&(s.enableProfiling=!1),n=t._OrtCreateSessionOptions(u,!!s.enableCpuMemArena,!!s.enableMemPattern,c,!!s.enableProfiling,0,l,s.logSeverityLevel,s.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return(null==e?void 0:e.executionProviders)&&((e,t,n)=>{for(const r of t){let t=\\\"string\\\"==typeof r?r:r.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=a.allocWasmString(t,n);if(0!==o.getInstance()._OrtAppendExecutionProvider(e,i))throw new Error(`Can't append execution provider: ${t}`)}})(n,e.executionProviders,i),void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=a.allocWasmString(e,i),s=a.allocWasmString(r,i);if(0!==t._OrtAddSessionConfigEntry(n,o,s))throw new Error(`Can't set a session config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),i.forEach(t._free),e}}},983:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(361);t.allocWasmString=(e,t)=>{const n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;const r=n(586),a=n(919),o=n(983),i=n(361);t.initOrt=(e,t)=>{const n=i.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const s=new Map;t.createSession=(e,t)=>{const n=i.getInstance(),r=n._malloc(e.byteLength);let o=0,u=0,c=[];try{if([u,c]=a.setSessionOptions(t),n.HEAPU8.set(e,r),o=n._OrtCreateSession(r,e.byteLength,u),0===o)throw new Error(\\\"Can't create a session\\\")}finally{n._free(r),n._OrtReleaseSessionOptions(u),c.forEach(n._free)}const l=n._OrtGetInputCount(o),f=n._OrtGetOutputCount(o),p=[],d=[],m=[],g=[];for(let e=0;e<l;e++){const t=n._OrtGetInputName(o,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");d.push(t),p.push(n.UTF8ToString(t))}for(let e=0;e<f;e++){const t=n._OrtGetOutputName(o,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");g.push(t),m.push(n.UTF8ToString(t))}return s.set(o,[o,d,g]),[o,p,m]},t.releaseSession=e=>{const t=i.getInstance(),n=s.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),s.delete(e)};const u=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},c=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},l=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}};t.run=(e,t,n,a,f)=>{const p=i.getInstance(),d=s.get(e);if(!d)throw new Error(\\\"invalid session id\\\");const m=d[0],g=d[1],h=d[2],y=t.length,_=a.length;let v=0,b=[];const w=[],O=[];try{[v,b]=r.setRunOptions(f);for(let e=0;e<y;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let i,s;if(Array.isArray(a)){s=4*a.length,i=p._malloc(s),O.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);p.HEAPU32[e++]=o.allocWasmString(a[t],O)}}else s=a.byteLength,i=p._malloc(s),O.push(i),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,s),i);const c=p.stackSave(),l=p.stackAlloc(4*r.length);try{let e=l/4;r.forEach((t=>p.HEAP32[e++]=t));const n=p._OrtCreateTensor(u(t),i,s,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");w.push(n)}finally{p.stackRestore(c)}}const e=p.stackSave(),i=p.stackAlloc(4*y),s=p.stackAlloc(4*y),d=p.stackAlloc(4*_),S=p.stackAlloc(4*_);try{let n=i/4,r=s/4,o=d/4,u=S/4;for(let e=0;e<y;e++)p.HEAPU32[n++]=w[e],p.HEAPU32[r++]=g[t[e]];for(let e=0;e<_;e++)p.HEAPU32[o++]=0,p.HEAPU32[u++]=h[a[e]];let f=p._OrtRun(m,s,i,y,S,_,d,v);const b=[];if(0===f)for(let e=0;e<_;e++){const t=p.HEAPU32[d/4+e],n=p.stackSave(),r=p.stackAlloc(16);let a,o=0;try{if(f=p._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't access output tensor data. error code = ${f}`);let e=r/4;const i=p.HEAPU32[e++];o=p.HEAPU32[e++];const s=p.HEAPU32[e++],u=p.HEAPU32[e++],d=[];for(let e=0;e<u;e++)d.push(p.HEAPU32[s/4+e]);p._OrtFree(s);const m=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=c(i),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<m;n++){const r=p.HEAPU32[t++],a=n===m-1?void 0:p.HEAPU32[t]-r;e.push(p.UTF8ToString(r,a))}b.push([a,d,e])}else{const e=new(l(a))(m);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(p.HEAPU8.subarray(o,o+e.byteLength)),b.push([a,d,e])}}finally{p.stackRestore(n),\\\"string\\\"===a&&o&&p._free(o),p._OrtReleaseTensor(t)}}if(0===f)return b;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(e)}}finally{w.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),b.forEach(p._free)}},t.endProfiling=e=>{const t=i.getInstance(),n=s.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(n(622)),u=i(n(932)),c=n(474);let l,f=!1,p=!1,d=!1;const m=(e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";t.initializeWebAssembly=async e=>{if(f)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,h=m(!1,o),y=m(i,o),_=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[y]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const r=o?c:u.default,a={locateFile:(e,t)=>{if(o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob)return URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"}));if(e===h){const e=null!=g?g:t;return null!=_?_:e+y}return t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{p=!1,f=!0,l=t,e()}),(e=>{p=!1,d=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!f||p||d||(p=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,p=!1,f=!1,d=!0)}},747:e=>{\\\"use strict\\\";e.exports=require(\\\"fs\\\")},87:e=>{\\\"use strict\\\";e.exports=require(\\\"os\\\")},622:e=>{\\\"use strict\\\";e.exports=require(\\\"path\\\")},630:e=>{\\\"use strict\\\";e.exports=require(\\\"perf_hooks\\\")},13:e=>{\\\"use strict\\\";e.exports=require(\\\"worker_threads\\\")}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(()=>{\\\"use strict\\\";const e=n(349),t=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:r}=n.data.in;e.initOrt(t,r),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=e.createSession(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;e.releaseSession(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in,s=e.run(t,r,a,o,i);postMessage({type:\\\"run\\\",out:s},e.extractTransferableBuffers(s))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;e.endProfiling(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","module.exports = require(\"perf_hooks\");;","module.exports = require(\"util\");;","module.exports = require(\"worker_threads\");;","module.exports = require(\"onnxruntime-common\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}