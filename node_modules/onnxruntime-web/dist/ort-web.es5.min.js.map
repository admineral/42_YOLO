{"version":3,"sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/./node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/external {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/global","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__2174__","_scriptDir","e","document","currentScript","src","n","k","buffer","C","G","F","t","P","r","I","U","u","Y","o","s","ready","Promise","f","c","l","p","m","d","h","Object","assign","g","_","y","window","b","importScripts","v","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","O","T","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","oe","Z","exitCode","x","exit","inspect","console","error","Worker","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","M","log","bind","S","warn","writeSync","A","R","print","printErr","thisProgram","quit","wasmBinary","E","noExitRuntime","WebAssembly","re","D","W","H","TextDecoder","N","decode","SharedArrayBuffer","subarray","String","fromCharCode","j","L","charCodeAt","q","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","z","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","B","K","Q","V","X","J","preRun","shift","unshift","$","ee","ne","te","postMessage","cmd","arg","onAbort","RuntimeError","ae","startsWith","ue","ie","this","name","message","se","pe","Ma","Xa","fe","mb","Sa","push","La","start_routine","qb","jb","pthread_ptr","Ra","time","now","vb","loaded","ce","je","Za","onExit","le","he","cn","me","fn","Ze","Je","Pa","ab","Va","nb","xb","receiveObjectTransfer","pb","threadInitTLS","$a","setExitStatus","Ya","values","terminate","splice","hn","forEach","ob","onmessage","data","lb","targetThread","yb","transferList","Ie","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","ib","pop","de","yn","bn","PThread","establishStackSpace","_n","ge","_e","ye","be","Qa","hb","eb","fb","cb","gb","bb","ve","we","wb","Oe","Te","Me","Se","Ae","Re","xe","Ee","ke","De","Ce","Fe","Pe","Atomics","store","dn","compareExchange","Ue","Ye","We","He","sn","Ne","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","Number","arguments","vn","mn","invokeEntryPoint","get","gn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Le","qe","Ge","ze","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Be","Ke","Qe","Ve","Xe","$e","en","nn","tn","rn","toString","getMonth","getDate","getDay","Na","Oa","getTime","setDate","setMonth","setFullYear","tb","sb","Ta","Wa","Ua","Ka","zb","rb","ub","RegExp","split","substring","floor","abs","includes","Array","set","an","un","ln","setTimeout","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","kb","copyWithin","hardwareConcurrency","apply","call","grow","asm","wa","ya","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","_OrtCreateSessionOptions","_OrtAppendExecutionProvider","aa","_OrtAddSessionConfigEntry","ba","_OrtReleaseSessionOptions","ca","_OrtCreateSession","da","_OrtReleaseSession","ea","_OrtGetInputCount","fa","_OrtGetOutputCount","ga","_OrtGetInputName","ha","_OrtGetOutputName","ia","_OrtFree","ja","_OrtCreateTensor","ka","_OrtGetTensorData","la","_OrtReleaseTensor","ma","_OrtCreateRunOptions","na","_OrtAddRunConfigEntry","oa","_OrtReleaseRunOptions","pa","_OrtRun","qa","_OrtEndProfiling","ra","_pthread_self","sa","_malloc","ta","_free","ua","_fflush","va","__emscripten_tls_init","___funcs_on_exit","xa","__emscripten_thread_init","za","__emscripten_thread_crashed","Aa","pn","_emscripten_run_in_main_runtime_thread_js","Ba","__emscripten_proxy_execute_task_queue","Ca","__emscripten_thread_free_data","Da","__emscripten_thread_exit","Ea","_emscripten_stack_set_limits","Fa","stackSave","Ga","stackRestore","Ha","stackAlloc","Ia","wn","calledRun","onRuntimeInitialized","postRun","setStatus","___cxa_is_pointer_type","Ja","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","undefined","fs","ctx","params","offset","index","pending","reject","err","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","value","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","wasm","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","init","createSessionHandler","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","promisify","handler","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","Map","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","ArrayBuffer","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","OffscreenCanvas","createElement","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","Shape","getSizePrefixedRootAsShape","startShape","builder","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","initialized","aborted","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","executionProviders","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI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","file":"ort-web.es5.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__2174__) {\nreturn ","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return k.buffer!=C&&G(k.buffer),F}function t(){return k.buffer!=C&&G(k.buffer),P}function r(){return k.buffer!=C&&G(k.buffer),I}function a(){return k.buffer!=C&&G(k.buffer),U}function u(){return k.buffer!=C&&G(k.buffer),Y}var i,o,s;e=e||{},i||(i=void 0!==e?e:{}),i.ready=new Promise((function(e,n){o=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},i),g=\"./this.program\",_=(e,n)=>{throw n},y=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=i.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return i.locateFile?i.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof oe))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),_=(e,n)=>{if(Z())throw process.exitCode=e,n;n instanceof oe||x(\"exiting due to exception: \"+n),process.exit(e)},i.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(y||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),S=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),S=e=>p.writeSync(2,e+\"\\n\"));var A,R=i.print||M,x=i.printErr||S;Object.assign(i,h),h=null,i.thisProgram&&(g=i.thisProgram),i.quit&&(_=i.quit),i.wasmBinary&&(A=i.wasmBinary);var E=i.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&re(\"no native wasm support detected\");var k,D,C,F,P,I,U,Y,W=!1,H=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function N(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&H)return H.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var u=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|u);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|u<<6|i:(7&a)<<18|u<<12|i<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(e,n){return(e>>>=0)?N(t(),e,n):\"\"}function L(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var u=0;u<e.length;++u){var i=e.charCodeAt(u);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++u)),127>=i){if(t>=r)break;n[t++>>>0]=i}else{if(2047>=i){if(t+1>=r)break;n[t++>>>0]=192|i>>6}else{if(65535>=i){if(t+2>=r)break;n[t++>>>0]=224|i>>12}else{if(t+3>=r)break;n[t++>>>0]=240|i>>18,n[t++>>>0]=128|i>>12&63}n[t++>>>0]=128|i>>6&63}n[t++>>>0]=128|63&i}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function G(e){C=e,i.HEAP8=F=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=I=new Int32Array(e),i.HEAPU8=P=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=U=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=Y=new Float64Array(e)}w&&(C=i.buffer);var z=i.INITIAL_MEMORY||16777216;if(w)k=i.wasmMemory,C=i.buffer;else if(i.wasmMemory)k=i.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:z/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");k&&(C=k.buffer),z=C.byteLength,G(C);var B,K=[],Q=[],V=[],X=[];function Z(){return E||!1}function J(){var e=i.preRun.shift();K.unshift(e)}var $,ee=0,ne=null,te=null;function re(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):i.onAbort&&i.onAbort(e),x(e=\"Aborted(\"+e+\")\"),W=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function ae(){return $.startsWith(\"data:application/octet-stream;base64,\")}function ue(){var e=$;try{if(e==$&&A)return new Uint8Array(A);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){re(e)}}$=\"ort-wasm-threaded.wasm\",ae()||($=T($));var ie={};function oe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){(e=pe.Ma[e])||re(),pe.Xa(e)}function fe(e){var n=pe.mb();if(!n)return 6;pe.Sa.push(n),pe.Ma[e.La]=n,n.La=e.La;var t={cmd:\"run\",start_routine:e.qb,arg:e.jb,pthread_ptr:e.La};return n.Ra=()=>{t.time=performance.now(),n.postMessage(t,e.vb)},n.loaded&&(n.Ra(),delete n.Ra),0}function ce(e){if(w)return je(1,1,e);Z()||(pe.Za(),i.onExit&&i.onExit(e),W=!0),_(e,new oe(e))}function le(e,n){if(!n&&w)throw he(e),\"unwind\";Z()||w||(cn(),me(V),fn(0),Ze[1].length&&Je(1,10),Ze[2].length&&Je(2,10),pe.Za()),ce(e)}var pe={Pa:[],Sa:[],ab:[],Ma:{},Va:function(){w&&pe.nb()},xb:function(){},nb:function(){pe.receiveObjectTransfer=pe.pb,pe.threadInitTLS=pe.$a,pe.setExitStatus=pe.Ya,E=!1},Ya:function(){},Za:function(){for(var e of Object.values(pe.Ma))pe.Xa(e);for(e of pe.Pa)e.terminate();pe.Pa=[]},Xa:function(e){var n=e.La;delete pe.Ma[n],pe.Pa.push(e),pe.Sa.splice(pe.Sa.indexOf(e),1),e.La=0,hn(n)},pb:function(){},$a:function(){pe.ab.forEach((e=>e()))},ob:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.La&&(pe.lb=e.La),t.targetThread&&t.targetThread!=on()){var a=pe.Ma[t.yb];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ie(t.queue):\"spawnThread\"===r?fe(t):\"cleanupThread\"===r?se(t.thread):\"killThread\"===r?(t=t.thread,r=pe.Ma[t],delete pe.Ma[t],r.terminate(),hn(t),pe.Sa.splice(pe.Sa.indexOf(r),1),r.La=0):\"cancelThread\"===r?pe.Ma[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.Ra&&(e.Ra(),delete e.Ra)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?i.onAbort&&i.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);pe.lb=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:D})},ib:function(){var e=T(\"ort-wasm-threaded.worker.js\");pe.Pa.push(new Worker(e))},mb:function(){return 0==pe.Pa.length&&(pe.ib(),pe.ob(pe.Pa[0])),pe.Pa.pop()}};function me(e){for(;0<e.length;)e.shift()(i)}function de(e){var n=yn();return e=e(),bn(n),e}function he(e){if(w)return je(2,0,e);try{le(e)}catch(e){e instanceof oe||\"unwind\"==e||_(1,e)}}i.PThread=pe,i.establishStackSpace=function(){var e=on(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],_n(n,n-e),bn(n)};var ge,_e,ye=[];function be(e){this.Qa=e-24,this.hb=function(e){a()[this.Qa+4>>2>>>0]=e},this.eb=function(e){a()[this.Qa+8>>2>>>0]=e},this.fb=function(){r()[this.Qa>>2>>>0]=0},this.cb=function(){n()[this.Qa+12>>0>>>0]=0},this.gb=function(){n()[this.Qa+13>>0>>>0]=0},this.Va=function(e,n){this.bb(),this.hb(e),this.eb(n),this.fb(),this.cb(),this.gb()},this.bb=function(){a()[this.Qa+16>>2>>>0]=0}}function ve(e,n,t,r){return w?je(3,1,e,n,t,r):we(e,n,t,r)}function we(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?ve(e,n,t,r):(e={qb:t,La:e,jb:r,vb:a},w?(e.wb=\"spawnThread\",postMessage(e,a),0):fe(e))}function Oe(e,n,t){return w?je(4,1,e,n,t):0}function Te(e,n){if(w)return je(5,1,e,n)}function Me(e,n){if(w)return je(6,1,e,n)}function Se(e,n,t){if(w)return je(7,1,e,n,t)}function Ae(e,n,t){return w?je(8,1,e,n,t):0}function Re(e,n){if(w)return je(9,1,e,n)}function xe(e,n,t){if(w)return je(10,1,e,n,t)}function Ee(e,n,t,r){if(w)return je(11,1,e,n,t,r)}function ke(e,n,t,r){if(w)return je(12,1,e,n,t,r)}function De(e,n,t,r){if(w)return je(13,1,e,n,t,r)}function Ce(e){if(w)return je(14,1,e)}function Fe(e,n){if(w)return je(15,1,e,n)}function Pe(e,n,t){if(w)return je(16,1,e,n,t)}function Ie(e){Atomics.store(r(),e>>2,1),on()&&dn(e),Atomics.compareExchange(r(),e>>2,1,0)}function Ue(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Ye(e,n,t,r,a,u){return w?je(17,1,e,n,t,r,a,u):-52}function We(e,n,t,r,a,u){if(w)return je(18,1,e,n,t,r,a,u)}function He(e){var t=q(e)+1,r=sn(t);return r&&L(e,n(),r,t),r}function Ne(e,n,t){function u(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return je(19,1,e,n,t);var i=(new Date).getFullYear(),o=new Date(i,0,1),s=new Date(i,6,1);i=o.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(i!=f),e=u(o),n=u(s),e=He(e),n=He(n),f<i?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function je(e,n){var t=arguments.length-2,r=arguments;return de((()=>{for(var a=vn(8*t),i=a>>3,o=0;o<t;o++){var s=r[2+o];u()[i+o>>>0]=s}return mn(e,t,a,n)}))}i.invokeEntryPoint=function(e,n){var t=ye[e];t||(e>=ye.length&&(ye.length=e+1),ye[e]=t=B.get(e)),e=t(n),Z()?pe.Ya(e):gn(e)},i.executeNotifiedProxyingQueue=Ie,_e=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var Le,qe=[],Ge={};function ze(){if(!Le){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Ge)void 0===Ge[e]?delete n[e]:n[e]=Ge[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Le=t}return Le}function Be(e,t){if(w)return je(20,1,e,t);var r=0;return ze().forEach((function(u,i){var o=t+r;for(i=a()[e+4*i>>2>>>0]=o,o=0;o<u.length;++o)n()[i++>>0>>>0]=u.charCodeAt(o);n()[i>>0>>>0]=0,r+=u.length+1})),0}function Ke(e,n){if(w)return je(21,1,e,n);var t=ze();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Qe(e){return w?je(22,1,e):52}function Ve(e,n,t,r){return w?je(23,1,e,n,t,r):52}function Xe(e,n,t,r,a){return w?je(24,1,e,n,t,r,a):70}var Ze=[null,[],[]];function Je(e,n){var t=Ze[e];0===n||10===n?((1===e?R:x)(N(t,0)),t.length=0):t.push(n)}function $e(e,n,r,u){if(w)return je(25,1,e,n,r,u);for(var i=0,o=0;o<r;o++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++)Je(e,t()[s+c>>>0]);i+=f}return a()[u>>2>>>0]=i,0}function en(e){return 0==e%4&&(0!=e%100||0==e%400)}var nn=[31,29,31,30,31,30,31,31,30,31,30,31],tn=[31,28,31,30,31,30,31,31,30,31,30,31];function rn(e,t,a,u){function i(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function o(e,n){return i(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(en(e.getFullYear())?nn:tn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[u+40>>2>>>0];for(var p in u={tb:r()[u>>2>>>0],sb:r()[u+4>>2>>>0],Ta:r()[u+8>>2>>>0],Wa:r()[u+12>>2>>>0],Ua:r()[u+16>>2>>>0],Oa:r()[u+20>>2>>>0],Ka:r()[u+24>>2>>>0],Na:r()[u+28>>2>>>0],zb:r()[u+32>>2>>>0],rb:r()[u+36>>2>>>0],ub:l?j(l):\"\"},a=j(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ka].substring(0,3)},\"%A\":function(e){return m[e.Ka]},\"%b\":function(e){return d[e.Ua].substring(0,3)},\"%B\":function(e){return d[e.Ua]},\"%C\":function(e){return o((e.Oa+1900)/100|0,2)},\"%d\":function(e){return o(e.Wa,2)},\"%e\":function(e){return i(e.Wa,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return o(e.Ta,2)},\"%I\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),o(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Ua-1;n+=(en(e.Oa+1900)?nn:tn)[t++]);return o(e.Wa+n,3)},\"%m\":function(e){return o(e.Ua+1,2)},\"%M\":function(e){return o(e.sb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Ta&&12>e.Ta?\"AM\":\"PM\"},\"%S\":function(e){return o(e.tb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ka||7},\"%U\":function(e){return o(Math.floor((e.Na+7-e.Ka)/7),2)},\"%V\":function(e){var n=Math.floor((e.Na+7-(e.Ka+6)%7)/7);if(2>=(e.Ka+371-e.Na-2)%7&&n++,n)53==n&&(4==(t=(e.Ka+371-e.Na)%7)||3==t&&en(e.Oa)||(n=1));else{n=52;var t=(e.Ka+7-e.Na-1)%7;(4==t||5==t&&en(e.Oa%400-1))&&n++}return o(n,2)},\"%w\":function(e){return e.Ka},\"%W\":function(e){return o(Math.floor((e.Na+7-(e.Ka+6)%7)/7),2)},\"%y\":function(e){return(e.Oa+1900).toString().substring(2)},\"%Y\":function(e){return e.Oa+1900},\"%z\":function(e){var n=0<=(e=e.rb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.ub},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](u)));return p=function(e){var n=Array(q(e)+1);return L(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}pe.Va();var an=[null,ce,he,ve,Oe,Te,Me,Se,Ae,Re,xe,Ee,ke,De,Ce,Fe,Pe,Ye,We,Ne,Be,Ke,Qe,Ve,Xe,$e],un={b:function(e){return sn(e+24)+24},c:function(e,n,t){throw new be(e).Va(n,t),e},L:function(e){ln(e,!b,1,!y),pe.$a()},m:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):se(e)},D:we,i:Oe,S:Te,y:Me,B:Se,t:Ae,Q:Re,I:xe,P:Ee,o:ke,z:De,w:Ce,R:Fe,x:Pe,q:function(){},j:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},r:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},p:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>Ie(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=pe.Ma[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},V:function(e,n){e=new Date(1e3*Ue(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},W:function(e,n){e=new Date(1e3*Ue(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},X:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),u=new Date(n.getFullYear(),0,1),i=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=u.getTimezoneOffset(),s=Math.min(o,i);return 0>t?r()[e+32>>2>>>0]=Number(i!=o&&s==a):0<t!=(s==a)&&(i=Math.max(o,i),n.setTime(n.getTime()+6e4*((0<t?s:i)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-u.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Ye,H:We,Y:function e(n,t,r){e.kb||(e.kb=!0,Ne(n,t,r))},d:function(){re(\"\")},n:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";ge||(ge={}),ge[e]||(ge[e]=1,v&&(e=\"warning: \"+e),x(e))}},v:function(){return 4294901760},f:_e,O:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},g:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){qe.length=n,t>>=3;for(var r=0;r<n;r++)qe[r]=u()[t+r>>>0];return(0>e?ie[-e-1]:an[e]).apply(null,qe)},u:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var u=Math;a=Math.max(e,a),u=u.min.call(u,4294901760,a+(65536-a%65536)%65536);e:{try{k.grow(u-C.byteLength+65535>>>16),G(k.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\"unwind\"},M:Be,N:Ke,C:le,h:Qe,l:Ve,s:Xe,k:$e,a:k||i.wasmMemory,A:rn,e:function(e,n,t,r){return rn(e,n,t,r)}};!function(){function e(e,n){i.asm=e.exports,pe.ab.push(i.asm.wa),B=i.asm.ya,Q.unshift(i.asm.Z),D=n,w||(ee--,i.monitorRunDependencies&&i.monitorRunDependencies(ee),0==ee&&(null!==ne&&(clearInterval(ne),ne=null),te&&(e=te,te=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!A&&(y||b)){if(\"function\"==typeof fetch&&!$.startsWith(\"file://\"))return fetch($,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+$+\"'\";return e.arrayBuffer()})).catch((function(){return ue()}));if(c)return new Promise((function(e,n){c($,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return ue()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),re(e)}))}var r={a:un};if(w||(ee++,i.monitorRunDependencies&&i.monitorRunDependencies(ee)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(A||\"function\"!=typeof WebAssembly.instantiateStreaming||ae()||$.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch($,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.Z).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm._).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.$).apply(null,arguments)},i._OrtAppendExecutionProvider=function(){return(i._OrtAppendExecutionProvider=i.asm.aa).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ba).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.ca).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.da).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.ea).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.fa).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ga).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ha).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ia).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ja).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.ka).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.la).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.ma).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.na).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.oa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.pa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.qa).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.ra).apply(null,arguments)};var on=i._pthread_self=function(){return(on=i._pthread_self=i.asm.sa).apply(null,arguments)},sn=i._malloc=function(){return(sn=i._malloc=i.asm.ta).apply(null,arguments)};i._free=function(){return(i._free=i.asm.ua).apply(null,arguments)};var fn=i._fflush=function(){return(fn=i._fflush=i.asm.va).apply(null,arguments)};i.__emscripten_tls_init=function(){return(i.__emscripten_tls_init=i.asm.wa).apply(null,arguments)};var cn=i.___funcs_on_exit=function(){return(cn=i.___funcs_on_exit=i.asm.xa).apply(null,arguments)},ln=i.__emscripten_thread_init=function(){return(ln=i.__emscripten_thread_init=i.asm.za).apply(null,arguments)};i.__emscripten_thread_crashed=function(){return(i.__emscripten_thread_crashed=i.asm.Aa).apply(null,arguments)};var pn,mn=i._emscripten_run_in_main_runtime_thread_js=function(){return(mn=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ba).apply(null,arguments)},dn=i.__emscripten_proxy_execute_task_queue=function(){return(dn=i.__emscripten_proxy_execute_task_queue=i.asm.Ca).apply(null,arguments)},hn=i.__emscripten_thread_free_data=function(){return(hn=i.__emscripten_thread_free_data=i.asm.Da).apply(null,arguments)},gn=i.__emscripten_thread_exit=function(){return(gn=i.__emscripten_thread_exit=i.asm.Ea).apply(null,arguments)},_n=i._emscripten_stack_set_limits=function(){return(_n=i._emscripten_stack_set_limits=i.asm.Fa).apply(null,arguments)},yn=i.stackSave=function(){return(yn=i.stackSave=i.asm.Ga).apply(null,arguments)},bn=i.stackRestore=function(){return(bn=i.stackRestore=i.asm.Ha).apply(null,arguments)},vn=i.stackAlloc=function(){return(vn=i.stackAlloc=i.asm.Ia).apply(null,arguments)};function wn(){function e(){if(!pn&&(pn=!0,i.calledRun=!0,!W)&&(w||me(Q),o(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!w)){if(i.postRun)for(\"function\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();X.unshift(e)}me(X)}}if(!(0<ee))if(w)o(i),w||me(Q),postMessage({cmd:\"loaded\"});else{if(i.preRun)for(\"function\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)J();me(K),0<ee||(i.setStatus?(i.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){i.setStatus(\"\")}),1),e()}),1)):e())}}if(i.___cxa_is_pointer_type=function(){return(i.___cxa_is_pointer_type=i.asm.Ja).apply(null,arguments)},i.UTF8ToString=j,i.stringToUTF8=function(e,n,r){return L(e,t(),n,r)},i.lengthBytesUTF8=q,i.keepRuntimeAlive=Z,i.wasmMemory=k,i.stackSave=yn,i.stackRestore=bn,i.stackAlloc=vn,i.ExitStatus=oe,i.PThread=pe,te=function e(){pn||wn(),pn||(te=e)},i.preInit)for(\"function\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return wn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,k;b.ready=new Promise(function(a,c){aa=a;k=c});var ba=Object.assign({},b),p=\"./this.program\",ca=\"object\"==typeof window,t=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,x=\"\",y,A,B,fs,C,D;\r\nif(u)x=t?require(\"path\").dirname(x)+\"/\":__dirname+\"/\",D=()=>{C||(fs=require(\"fs\"),C=require(\"path\"))},y=function(a,c){D();a=C.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},B=a=>{a=y(a,!0);a.buffer||(a=new Uint8Array(a));return a},A=(a,c,e)=>{D();a=C.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\r\n}),b.inspect=function(){return\"[Emscripten Module object]\"};else if(ca||t)t?x=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):x=\"\",y=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},t&&(B=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),\r\nA=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var da=b.print||console.log.bind(console),E=b.printErr||console.warn.bind(console);Object.assign(b,ba);ba=null;b.thisProgram&&(p=b.thisProgram);var F;b.wasmBinary&&(F=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");\r\nvar H,ea=!1,fa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ha(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&fa)return fa.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function I(a,c){return(a>>>=0)?ha(J,a,c):\"\"}\r\nfunction K(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var q=a.charCodeAt(++h);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\r\nfunction L(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ia,M,J,N,O;function ja(){var a=H.buffer;ia=a;b.HEAP8=M=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=N=new Int32Array(a);b.HEAPU8=J=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=O=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ka=[],la=[],ma=[];function na(){var a=b.preRun.shift();ka.unshift(a)}\r\nvar P=0,Q=null,R=null;function G(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);ea=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");k(a);throw a;}function oa(){return S.startsWith(\"data:application/octet-stream;base64,\")}var S;S=\"ort-wasm.wasm\";if(!oa()){var pa=S;S=b.locateFile?b.locateFile(pa,x):x+pa}function qa(){var a=S;try{if(a==S&&F)return new Uint8Array(F);if(B)return B(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){G(c)}}\r\nfunction ra(){if(!F&&(ca||t)){if(\"function\"==typeof fetch&&!S.startsWith(\"file://\"))return fetch(S,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+S+\"'\";return a.arrayBuffer()}).catch(function(){return qa()});if(A)return new Promise(function(a,c){A(S,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return qa()})}function T(a){for(;0<a.length;)a.shift()(b)}\r\nfunction sa(a){this.ra=a-24;this.Ga=function(c){O[this.ra+4>>2>>>0]=c};this.za=function(c){O[this.ra+8>>2>>>0]=c};this.Aa=function(){N[this.ra>>2>>>0]=0};this.ya=function(){M[this.ra+12>>0>>>0]=0};this.Fa=function(){M[this.ra+13>>0>>>0]=0};this.wa=function(c,e){this.xa();this.Ga(c);this.za(e);this.Aa();this.ya();this.Fa()};this.xa=function(){O[this.ra+16>>2>>>0]=0}}var ta=0;function xa(a){var c=L(a)+1,e=U(c);e&&K(a,M,e,c);return e}\r\nfunction ya(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var q=l.getTimezoneOffset();N[a>>2>>>0]=60*Math.max(g,q);N[c>>2>>>0]=Number(g!=q);a=f(h);c=f(l);a=xa(a);c=xa(c);q<g?(O[e>>2>>>0]=a,O[e+4>>2>>>0]=c):(O[e>>2>>>0]=c,O[e+4>>2>>>0]=a)}function V(a,c,e){V.va||(V.va=!0,ya(a,c,e))}var W={};\r\nfunction za(){if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:p||\"./this.program\"},c;for(c in W)void 0===W[c]?delete a[c]:a[c]=W[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);X=e}return X}var X,Aa=[null,[],[]];function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var Ba=[31,29,31,30,31,30,31,31,30,31,30,31],Ca=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Da(a){var c=Array(L(a)+1);K(a,c,0,c.length);return c}\r\nfunction Ea(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var z;0===(z=n(d.getFullYear()-m.getFullYear()))&&0===(z=n(d.getMonth()-m.getMonth()))&&(z=n(d.getDate()-m.getDate()));return z}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.pa;for(d=new Date((new Date(d.qa+1900,0,1)).getTime());0<m;){var n=d.getMonth(),z=(Y(d.getFullYear())?Ba:Ca)[n];if(m>z-d.getDate())m-=z-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=q(new Date(d.getFullYear(),\r\n0,4));n=q(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=N[f+40>>2>>>0];f={Da:N[f>>2>>>0],Ca:N[f+4>>2>>>0],sa:N[f+8>>2>>>0],ua:N[f+12>>2>>>0],ta:N[f+16>>2>>>0],qa:N[f+20>>2>>>0],ka:N[f+24>>2>>>0],pa:N[f+28>>2>>>0],Ha:N[f+32>>2>>>0],Ba:N[f+36>>2>>>0],Ea:v?I(v):\"\"};e=I(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in v)e=e.replace(new RegExp(r,\"g\"),v[r]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return va[d.ka].substring(0,3)},\"%A\":function(d){return va[d.ka]},\"%b\":function(d){return wa[d.ta].substring(0,\r\n3)},\"%B\":function(d){return wa[d.ta]},\"%C\":function(d){return h((d.qa+1900)/100|0,2)},\"%d\":function(d){return h(d.ua,2)},\"%e\":function(d){return g(d.ua,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.sa,2)},\"%I\":function(d){d=d.sa;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.ta-1;m+=(Y(d.qa+1900)?Ba:Ca)[n++]);return h(d.ua+m,3)},\"%m\":function(d){return h(d.ta+1,2)},\"%M\":function(d){return h(d.Ca,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.sa&&12>d.sa?\"AM\":\"PM\"},\"%S\":function(d){return h(d.Da,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ka||7},\"%U\":function(d){return h(Math.floor((d.pa+7-d.ka)/7),2)},\"%V\":function(d){var m=Math.floor((d.pa+7-(d.ka+6)%7)/7);2>=(d.ka+371-d.pa-2)%7&&m++;if(m)53==m&&(n=(d.ka+371-d.pa)%7,4==n||3==n&&Y(d.qa)||(m=1));else{m=52;var n=(d.ka+7-d.pa-1)%7;(4==n||5==n&&Y(d.qa%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.ka},\"%W\":function(d){return h(Math.floor((d.pa+\r\n7-(d.ka+6)%7)/7),2)},\"%y\":function(d){return(d.qa+1900).toString().substring(2)},\"%Y\":function(d){return d.qa+1900},\"%z\":function(d){d=d.Ba;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ea},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(r in v)e.includes(r)&&(e=e.replace(new RegExp(r,\"g\"),v[r](f)));e=e.replace(/\\0\\0/g,\"%\");r=Da(e);if(r.length>c)return 0;M.set(r,a>>>0);return r.length-1}\r\nvar Fa={a:function(a){return U(a+24)+24},b:function(a,c,e){(new sa(a)).wa(c,e);ta++;throw a;},g:function(){return 0},J:function(){},w:function(){},z:function(){},s:function(){return 0},H:function(){},C:function(){},G:function(){},k:function(){},y:function(){},u:function(){},I:function(){},v:function(){},o:function(){},q:function(){G(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},p:function(){G(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nl:function(){return Date.now()},K:function(){return!0},L:function(a,c){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[c>>2>>>0]=a.getUTCSeconds();N[c+4>>2>>>0]=a.getUTCMinutes();N[c+8>>2>>>0]=a.getUTCHours();N[c+12>>2>>>0]=a.getUTCDate();N[c+16>>2>>>0]=a.getUTCMonth();N[c+20>>2>>>0]=a.getUTCFullYear()-1900;N[c+24>>2>>>0]=a.getUTCDay();N[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},M:function(a,c){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[c>>2>>>0]=a.getSeconds();\r\nN[c+4>>2>>>0]=a.getMinutes();N[c+8>>2>>>0]=a.getHours();N[c+12>>2>>>0]=a.getDate();N[c+16>>2>>>0]=a.getMonth();N[c+20>>2>>>0]=a.getFullYear()-1900;N[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;N[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();N[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},m:function(a){var c=new Date(N[a+20>>2>>>0]+1900,N[a+16>>\r\n2>>>0],N[a+12>>2>>>0],N[a+8>>2>>>0],N[a+4>>2>>>0],N[a>>2>>>0],0),e=N[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),q=Math.min(l,h);0>e?N[a+32>>2>>>0]=Number(h!=l&&q==f):0<e!=(q==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?q:h)-f)));N[a+24>>2>>>0]=c.getDay();N[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;N[a>>2>>>0]=c.getSeconds();N[a+4>>2>>>0]=c.getMinutes();N[a+8>>2>>>0]=c.getHours();N[a+\r\n12>>2>>>0]=c.getDate();N[a+16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},A:function(){return-52},B:function(){},n:V,d:function(){G(\"\")},t:function(){return 4294901760},h:u?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),F:function(a,c,e){J.copyWithin(a>>>0,c>>>0,c+e>>>0)},f:function(a){var c=J.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%\r\n65536);a:{try{H.grow(g-ia.byteLength+65535>>>16);ja();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},D:function(a,c){var e=0;za().forEach(function(f,g){var h=c+e;g=O[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)M[g++>>0>>>0]=f.charCodeAt(h);M[g>>0>>>0]=0;e+=f.length+1});return 0},E:function(a,c){var e=za();O[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});O[c>>2>>>0]=f;return 0},e:function(){return 52},j:function(){return 52},r:function(){return 70},i:function(a,c,e,f){for(var g=\r\n0,h=0;h<e;h++){var l=O[c>>2>>>0],q=O[c+4>>2>>>0];c+=8;for(var w=0;w<q;w++){var v=J[l+w>>>0],r=Aa[a];0===v||10===v?((1===a?da:E)(ha(r,0)),r.length=0):r.push(v)}g+=q}O[f>>2>>>0]=g;return 0},x:Ea,c:function(a,c,e,f){return Ea(a,c,e,f)}};\r\n(function(){function a(g){b.asm=g.exports;H=b.asm.N;ja();la.unshift(b.asm.O);P--;b.monitorRunDependencies&&b.monitorRunDependencies(P);0==P&&(null!==Q&&(clearInterval(Q),Q=null),R&&(g=R,R=null,g()))}function c(g){a(g.instance)}function e(g){return ra().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){E(\"failed to asynchronously prepare wasm: \"+h);G(h)})}var f={a:Fa};P++;b.monitorRunDependencies&&b.monitorRunDependencies(P);if(b.instantiateWasm)try{return b.instantiateWasm(f,\r\na)}catch(g){return E(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return F||\"function\"!=typeof WebAssembly.instantiateStreaming||oa()||S.startsWith(\"file://\")||u||\"function\"!=typeof fetch?e(c):fetch(S,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){E(\"wasm streaming compile failed: \"+h);E(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(k);return{}})();\r\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.O).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.P).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.Q).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.R).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.S).apply(null,arguments)};\r\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.T).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.U).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.V).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.W).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.X).apply(null,arguments)};\r\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm.Y).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.Z).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm._).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.$).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm.aa).apply(null,arguments)};\r\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.ba).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.ca).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.da).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ea).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.fa).apply(null,arguments)};\r\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ga).apply(null,arguments)};var U=b._malloc=function(){return(U=b._malloc=b.asm.ha).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ia).apply(null,arguments)};b._fflush=function(){return(b._fflush=b.asm.ja).apply(null,arguments)};\r\nvar Ga=b.stackSave=function(){return(Ga=b.stackSave=b.asm.la).apply(null,arguments)},Ha=b.stackRestore=function(){return(Ha=b.stackRestore=b.asm.ma).apply(null,arguments)},Ia=b.stackAlloc=function(){return(Ia=b.stackAlloc=b.asm.na).apply(null,arguments)};b.___cxa_is_pointer_type=function(){return(b.___cxa_is_pointer_type=b.asm.oa).apply(null,arguments)};b.UTF8ToString=I;b.stringToUTF8=function(a,c,e){return K(a,J,c,e)};b.lengthBytesUTF8=L;b.stackSave=Ga;b.stackRestore=Ha;b.stackAlloc=Ia;var Z;\r\nR=function Ja(){Z||Ka();Z||(R=Ja)};\r\nfunction Ka(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!ea)){T(la);aa(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();ma.unshift(c)}T(ma)}}if(!(0<P)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)na();T(ka);0<P||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\r\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ka();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    roiInputIdx = 1;\n    scalesInputIdx = 2;\n    sizesInputIdx = 3;\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n      const modelDataOffset = wasm._malloc(model.byteLength);\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        wasm.HEAPU8.set(model, modelDataOffset);\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelDataOffset);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.13.1\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={474:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return C.buffer!=D&&G(C.buffer),F}function r(){return C.buffer!=D&&G(C.buffer),U}function a(){return C.buffer!=D&&G(C.buffer),I}function o(){return C.buffer!=D&&G(C.buffer),L}function i(){return C.buffer!=D&&G(C.buffer),W}var u,s,c;e=e||{},u||(u=void 0!==e?e:{}),u.ready=new Promise((function(e,t){s=e,c=t}));var l,f,p,d,h,m,g=Object.assign({},u),y=\\\"./this.program\\\",v=(e,t)=>{throw t},b=\\\"object\\\"==typeof window,_=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function A(e){return u.locateFile?u.locateFile(e,S):S+e}if(w){let t;S=_?n(908).dirname(S)+\\\"/\\\":\\\"//\\\",m=()=>{h||(d=n(384),h=n(908))},l=function(e,t){return m(),e=h.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{m(),e=h.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof se))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(J())throw process.exitCode=e,t;t instanceof se||R(\\\"exiting due to exception: \\\"+t),process.exit(e)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(b||_)&&(_?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},_&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);w&&(m(),T=e=>d.writeSync(1,e+\\\"\\\\n\\\"),E=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,x=u.print||T,R=u.printErr||E;Object.assign(u,g),g=null,u.thisProgram&&(y=u.thisProgram),u.quit&&(v=u.quit),u.wasmBinary&&(M=u.wasmBinary);var k=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&ae(\\\"no native wasm support detected\\\");var C,P,D,F,U,I,L,W,H=!1,j=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&j)return j.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\\\"\\\"}function N(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function B(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,u.HEAP8=F=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=I=new Int32Array(e),u.HEAPU8=U=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=L=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=W=new Float64Array(e)}O&&(D=u.buffer);var q=u.INITIAL_MEMORY||16777216;if(O)C=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)C=u.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");C&&(D=C.buffer),q=D.byteLength,G(D);var V,Q=[],X=[],K=[],Z=[];function J(){return k||!1}function $(){var e=u.preRun.shift();Q.unshift(e)}var ee,te=0,ne=null,re=null;function ae(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):u.onAbort&&u.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function oe(){return ee.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ie(){var e=ee;try{if(e==ee&&M)return new Uint8Array(M);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ae(e)}}ee=\\\"ort-wasm-threaded.wasm\\\",oe()||(ee=A(ee));var ue={};function se(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ce(e){(e=de.Ma[e])||ae(),de.Xa(e)}function le(e){var t=de.mb();if(!t)return 6;de.Sa.push(t),de.Ma[e.La]=t,t.La=e.La;var n={cmd:\\\"run\\\",start_routine:e.qb,arg:e.jb,pthread_ptr:e.La};return t.Ra=()=>{n.time=performance.now(),t.postMessage(n,e.vb)},t.loaded&&(t.Ra(),delete t.Ra),0}function fe(e){if(O)return ze(1,1,e);J()||(de.Za(),u.onExit&&u.onExit(e),H=!0),v(e,new se(e))}function pe(e,t){if(!t&&O)throw ge(e),\\\"unwind\\\";J()||O||(lt(),he(K),ct(0),Je[1].length&&$e(1,10),Je[2].length&&$e(2,10),de.Za()),fe(e)}var de={Pa:[],Sa:[],ab:[],Ma:{},Va:function(){O&&de.nb()},xb:function(){},nb:function(){de.receiveObjectTransfer=de.pb,de.threadInitTLS=de.$a,de.setExitStatus=de.Ya,k=!1},Ya:function(){},Za:function(){for(var e of Object.values(de.Ma))de.Xa(e);for(e of de.Pa)e.terminate();de.Pa=[]},Xa:function(e){var t=e.La;delete de.Ma[t],de.Pa.push(e),de.Sa.splice(de.Sa.indexOf(e),1),e.La=0,mt(t)},pb:function(){},$a:function(){de.ab.forEach((e=>e()))},ob:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.La&&(de.lb=e.La),n.targetThread&&n.targetThread!=ut()){var a=de.Ma[n.yb];a?a.postMessage(n,n.transferList):R('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?Ie(n.queue):\\\"spawnThread\\\"===r?le(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=de.Ma[n],delete de.Ma[n],r.terminate(),mt(n),de.Sa.splice(de.Sa.indexOf(r),1),r.La=0):\\\"cancelThread\\\"===r?de.Ma[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Ra&&(e.Ra(),delete e.Ra)):\\\"print\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?u.onAbort&&u.onAbort(n.arg):r&&R(\\\"worker sent an unknown command \\\"+r);de.lb=void 0},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:P})},ib:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");de.Pa.push(new Worker(e))},mb:function(){return 0==de.Pa.length&&(de.ib(),de.ob(de.Pa[0])),de.Pa.pop()}};function he(e){for(;0<e.length;)e.shift()(u)}function me(e){var t=vt();return e=e(),bt(t),e}function ge(e){if(O)return ze(2,0,e);try{pe(e)}catch(e){e instanceof se||\\\"unwind\\\"==e||v(1,e)}}u.PThread=de,u.establishStackSpace=function(){var e=ut(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],yt(t,t-e),bt(t)};var ye,ve,be=[];function _e(e){this.Qa=e-24,this.hb=function(e){o()[this.Qa+4>>2>>>0]=e},this.eb=function(e){o()[this.Qa+8>>2>>>0]=e},this.fb=function(){a()[this.Qa>>2>>>0]=0},this.cb=function(){t()[this.Qa+12>>0>>>0]=0},this.gb=function(){t()[this.Qa+13>>0>>>0]=0},this.Va=function(e,t){this.bb(),this.hb(e),this.eb(t),this.fb(),this.cb(),this.gb()},this.bb=function(){o()[this.Qa+16>>2>>>0]=0}}function we(e,t,n,r){return O?ze(3,1,e,t,n,r):Oe(e,t,n,r)}function Oe(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?we(e,t,n,r):(e={qb:n,La:e,jb:r,vb:a},O?(e.wb=\\\"spawnThread\\\",postMessage(e,a),0):le(e))}function Se(e,t,n){return O?ze(4,1,e,t,n):0}function Ae(e,t){if(O)return ze(5,1,e,t)}function Te(e,t){if(O)return ze(6,1,e,t)}function Ee(e,t,n){if(O)return ze(7,1,e,t,n)}function Me(e,t,n){return O?ze(8,1,e,t,n):0}function xe(e,t){if(O)return ze(9,1,e,t)}function Re(e,t,n){if(O)return ze(10,1,e,t,n)}function ke(e,t,n,r){if(O)return ze(11,1,e,t,n,r)}function Ce(e,t,n,r){if(O)return ze(12,1,e,t,n,r)}function Pe(e,t,n,r){if(O)return ze(13,1,e,t,n,r)}function De(e){if(O)return ze(14,1,e)}function Fe(e,t){if(O)return ze(15,1,e,t)}function Ue(e,t,n){if(O)return ze(16,1,e,t,n)}function Ie(e){Atomics.store(a(),e>>2,1),ut()&&ht(e),Atomics.compareExchange(a(),e>>2,1,0)}function Le(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function We(e,t,n,r,a,o){return O?ze(17,1,e,t,n,r,a,o):-52}function He(e,t,n,r,a,o){if(O)return ze(18,1,e,t,n,r,a,o)}function je(e){var n=B(e)+1,r=st(n);return r&&N(e,t(),r,n),r}function Ye(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return ze(19,1,e,t,n);var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var c=s.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(u),t=r(s),e=je(e),t=je(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function ze(e,t){var n=arguments.length-2,r=arguments;return me((()=>{for(var a=_t(8*n),o=a>>3,u=0;u<n;u++){var s=r[2+u];i()[o+u>>>0]=s}return dt(e,n,a,t)}))}u.invokeEntryPoint=function(e,t){var n=be[e];n||(e>=be.length&&(be.length=e+1),be[e]=n=V.get(e)),e=n(t),J()?de.Ya(e):gt(e)},u.executeNotifiedProxyingQueue=Ie,ve=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var Ne,Be=[],Ge={};function qe(){if(!Ne){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Ge)void 0===Ge[e]?delete t[e]:t[e]=Ge[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Ne=n}return Ne}function Ve(e,n){if(O)return ze(20,1,e,n);var r=0;return qe().forEach((function(a,i){var u=n+r;for(i=o()[e+4*i>>2>>>0]=u,u=0;u<a.length;++u)t()[i++>>0>>>0]=a.charCodeAt(u);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Qe(e,t){if(O)return ze(21,1,e,t);var n=qe();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function Xe(e){return O?ze(22,1,e):52}function Ke(e,t,n,r){return O?ze(23,1,e,t,n,r):52}function Ze(e,t,n,r,a){return O?ze(24,1,e,t,n,r,a):70}var Je=[null,[],[]];function $e(e,t){var n=Je[e];0===t||10===t?((1===e?x:R)(Y(n,0)),n.length=0):n.push(t)}function et(e,t,n,a){if(O)return ze(25,1,e,t,n,a);for(var i=0,u=0;u<n;u++){var s=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++)$e(e,r()[s+l>>>0]);i+=c}return o()[a>>2>>>0]=i,0}function tt(e){return 0==e%4&&(0!=e%100||0==e%400)}var nt=[31,29,31,30,31,30,31,31,30,31,30,31],rt=[31,28,31,30,31,30,31,31,30,31,30,31];function at(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function u(e,t){return i(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(tt(e.getFullYear())?nt:rt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={tb:a()[o>>2>>>0],sb:a()[o+4>>2>>>0],Ta:a()[o+8>>2>>>0],Wa:a()[o+12>>2>>>0],Ua:a()[o+16>>2>>>0],Oa:a()[o+20>>2>>>0],Ka:a()[o+24>>2>>>0],Na:a()[o+28>>2>>>0],zb:a()[o+32>>2>>>0],rb:a()[o+36>>2>>>0],ub:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),h=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ka].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ka]},\\\"%b\\\":function(e){return h[e.Ua].substring(0,3)},\\\"%B\\\":function(e){return h[e.Ua]},\\\"%C\\\":function(e){return u((e.Oa+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.Wa,2)},\\\"%e\\\":function(e){return i(e.Wa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return u(e.Ta,2)},\\\"%I\\\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Ua-1;t+=(tt(e.Oa+1900)?nt:rt)[n++]);return u(e.Wa+t,3)},\\\"%m\\\":function(e){return u(e.Ua+1,2)},\\\"%M\\\":function(e){return u(e.sb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ta&&12>e.Ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.tb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ka||7},\\\"%U\\\":function(e){return u(Math.floor((e.Na+7-e.Ka)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Na+7-(e.Ka+6)%7)/7);if(2>=(e.Ka+371-e.Na-2)%7&&t++,t)53==t&&(4==(n=(e.Ka+371-e.Na)%7)||3==n&&tt(e.Oa)||(t=1));else{t=52;var n=(e.Ka+7-e.Na-1)%7;(4==n||5==n&&tt(e.Oa%400-1))&&t++}return u(t,2)},\\\"%w\\\":function(e){return e.Ka},\\\"%W\\\":function(e){return u(Math.floor((e.Na+7-(e.Ka+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Oa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.rb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.ub},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(B(e)+1);return N(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}de.Va();var ot=[null,fe,ge,we,Se,Ae,Te,Ee,Me,xe,Re,ke,Ce,Pe,De,Fe,Ue,We,He,Ye,Ve,Qe,Xe,Ke,Ze,et],it={b:function(e){return st(e+24)+24},c:function(e,t,n){throw new _e(e).Va(t,n),e},L:function(e){ft(e,!_,1,!b),de.$a()},m:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},D:Oe,i:Se,S:Ae,y:Te,B:Ee,t:Me,Q:xe,I:Re,P:ke,o:Ce,z:Pe,w:De,R:Fe,x:Ue,q:function(){},j:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},r:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},p:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>Ie(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=de.Ma[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},V:function(e,t){e=new Date(1e3*Le(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},W:function(e,t){e=new Date(1e3*Le(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},X:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=u&&s==r):0<n!=(s==r)&&(i=Math.max(u,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:We,H:He,Y:function e(t,n,r){e.kb||(e.kb=!0,Ye(t,n,r))},d:function(){ae(\\\"\\\")},n:function(){if(!w&&!_){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";ye||(ye={}),ye[e]||(ye[e]=1,w&&(e=\\\"warning: \\\"+e),R(e))}},v:function(){return 4294901760},f:ve,O:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},g:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Be.length=t,n>>=3;for(var r=0;r<t;r++)Be[r]=i()[n+r>>>0];return(0>e?ue[-e-1]:ot[e]).apply(null,Be)},u:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{C.grow(o-D.byteLength+65535>>>16),G(C.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\\\"unwind\\\"},M:Ve,N:Qe,C:pe,h:Xe,l:Ke,s:Ze,k:et,a:C||u.wasmMemory,A:at,e:function(e,t,n,r){return at(e,t,n,r)}};!function(){function e(e,t){u.asm=e.exports,de.ab.push(u.asm.wa),V=u.asm.ya,X.unshift(u.asm.Z),P=t,O||(te--,u.monitorRunDependencies&&u.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),re&&(e=re,re=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(b||_)){if(\\\"function\\\"==typeof fetch&&!ee.startsWith(\\\"file://\\\"))return fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+ee+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ie()}));if(f)return new Promise((function(e,t){f(ee,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ie()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){R(\\\"failed to asynchronously prepare wasm: \\\"+e),ae(e)}))}var r={a:it};if(O||(te++,u.monitorRunDependencies&&u.monitorRunDependencies(te)),u.instantiateWasm)try{return u.instantiateWasm(r,e)}catch(e){return R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||oe()||ee.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?n(t):fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return R(\\\"wasm streaming compile failed: \\\"+e),R(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Z).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm._).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.$).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.aa).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.ba).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.ca).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.da).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ea).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.fa).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.ga).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.ha).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.ia).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ja).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.ka).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.la).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ma).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.na).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.oa).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.pa).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.qa).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.ra).apply(null,arguments)};var ut=u._pthread_self=function(){return(ut=u._pthread_self=u.asm.sa).apply(null,arguments)},st=u._malloc=function(){return(st=u._malloc=u.asm.ta).apply(null,arguments)};u._free=function(){return(u._free=u.asm.ua).apply(null,arguments)};var ct=u._fflush=function(){return(ct=u._fflush=u.asm.va).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.wa).apply(null,arguments)};var lt=u.___funcs_on_exit=function(){return(lt=u.___funcs_on_exit=u.asm.xa).apply(null,arguments)},ft=u.__emscripten_thread_init=function(){return(ft=u.__emscripten_thread_init=u.asm.za).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.Aa).apply(null,arguments)};var pt,dt=u._emscripten_run_in_main_runtime_thread_js=function(){return(dt=u._emscripten_run_in_main_runtime_thread_js=u.asm.Ba).apply(null,arguments)},ht=u.__emscripten_proxy_execute_task_queue=function(){return(ht=u.__emscripten_proxy_execute_task_queue=u.asm.Ca).apply(null,arguments)},mt=u.__emscripten_thread_free_data=function(){return(mt=u.__emscripten_thread_free_data=u.asm.Da).apply(null,arguments)},gt=u.__emscripten_thread_exit=function(){return(gt=u.__emscripten_thread_exit=u.asm.Ea).apply(null,arguments)},yt=u._emscripten_stack_set_limits=function(){return(yt=u._emscripten_stack_set_limits=u.asm.Fa).apply(null,arguments)},vt=u.stackSave=function(){return(vt=u.stackSave=u.asm.Ga).apply(null,arguments)},bt=u.stackRestore=function(){return(bt=u.stackRestore=u.asm.Ha).apply(null,arguments)},_t=u.stackAlloc=function(){return(_t=u.stackAlloc=u.asm.Ia).apply(null,arguments)};function wt(){function e(){if(!pt&&(pt=!0,u.calledRun=!0,!H)&&(O||he(X),s(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();Z.unshift(e)}he(Z)}}if(!(0<te))if(O)s(u),O||he(X),postMessage({cmd:\\\"loaded\\\"});else{if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)$();he(Q),0<te||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(u.___cxa_is_pointer_type=function(){return(u.___cxa_is_pointer_type=u.asm.Ja).apply(null,arguments)},u.UTF8ToString=z,u.stringToUTF8=function(e,t,n){return N(e,r(),t,n)},u.lengthBytesUTF8=B,u.keepRuntimeAlive=J,u.wasmMemory=C,u.stackSave=vt,u.stackRestore=bt,u.stackAlloc=_t,u.ExitStatus=se,u.PThread=de,re=function e(){pt||wt(),pt||(re=e)},u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return wt(),e.ready});e.exports=r},118:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},932:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,u,s,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,h=\\\"function\\\"==typeof importScripts,m=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,g=\\\"\\\";m?(g=h?n(908).dirname(g)+\\\"/\\\":\\\"//\\\",l=()=>{c||(s=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),s.readFileSync(e,t?void 0:\\\"utf8\\\")},u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),s.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||h)&&(h?g=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(g=document.currentScript.src),_scriptDir&&(g=_scriptDir),g=0!==g.indexOf(\\\"blob:\\\")?g.substr(0,g.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},h&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,v=t.print||console.log.bind(console),b=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(y=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var _,w,O,S,A,T,E=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function x(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function R(e,t){return(e>>>=0)?x(S,e,t):\\\"\\\"}function k(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function C(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function P(){var e=_.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=T=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var D=[],F=[],U=[];function I(){var e=t.preRun.shift();D.unshift(e)}var L,W=0,H=null,j=null;function Y(e){throw t.onAbort&&t.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function z(){return L.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(L=\\\"ort-wasm.wasm\\\",!z()){var N=L;L=t.locateFile?t.locateFile(N,g):g+N}function B(){var e=L;try{if(e==L&&y)return new Uint8Array(y);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){Y(e)}}function G(e){for(;0<e.length;)e.shift()(t)}function q(e){this.ra=e-24,this.Ga=function(e){T[this.ra+4>>2>>>0]=e},this.za=function(e){T[this.ra+8>>2>>>0]=e},this.Aa=function(){A[this.ra>>2>>>0]=0},this.ya=function(){O[this.ra+12>>0>>>0]=0},this.Fa=function(){O[this.ra+13>>0>>>0]=0},this.wa=function(e,t){this.xa(),this.Ga(e),this.za(t),this.Aa(),this.ya(),this.Fa()},this.xa=function(){T[this.ra+16>>2>>>0]=0}}function V(e){var t=C(e)+1,n=re(t);return n&&k(e,O,n,t),n}var Q={};function X(){if(!K){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in Q)void 0===Q[e]?delete t[e]:t[e]=Q[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);K=n}return K}var K,Z=[null,[],[]];function J(e){return 0==e%4&&(0!=e%100||0==e%400)}var $=[31,29,31,30,31,30,31,31,30,31,30,31],ee=[31,28,31,30,31,30,31,31,30,31,30,31];function te(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.pa;for(e=new Date(new Date(e.qa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(J(e.getFullYear())?$:ee)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[r+40>>2>>>0];for(var l in r={Da:A[r>>2>>>0],Ca:A[r+4>>2>>>0],sa:A[r+8>>2>>>0],ua:A[r+12>>2>>>0],ta:A[r+16>>2>>>0],qa:A[r+20>>2>>>0],ka:A[r+24>>2>>>0],pa:A[r+28>>2>>>0],Ha:A[r+32>>2>>>0],Ba:A[r+36>>2>>>0],Ea:c?R(c):\\\"\\\"},n=R(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ka].substring(0,3)},\\\"%A\\\":function(e){return f[e.ka]},\\\"%b\\\":function(e){return p[e.ta].substring(0,3)},\\\"%B\\\":function(e){return p[e.ta]},\\\"%C\\\":function(e){return o((e.qa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.ua,2)},\\\"%e\\\":function(e){return a(e.ua,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.sa,2)},\\\"%I\\\":function(e){return 0==(e=e.sa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.ta-1;t+=(J(e.qa+1900)?$:ee)[n++]);return o(e.ua+t,3)},\\\"%m\\\":function(e){return o(e.ta+1,2)},\\\"%M\\\":function(e){return o(e.Ca,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.sa&&12>e.sa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Da,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ka||7},\\\"%U\\\":function(e){return o(Math.floor((e.pa+7-e.ka)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.pa+7-(e.ka+6)%7)/7);if(2>=(e.ka+371-e.pa-2)%7&&t++,t)53==t&&(4==(n=(e.ka+371-e.pa)%7)||3==n&&J(e.qa)||(t=1));else{t=52;var n=(e.ka+7-e.pa-1)%7;(4==n||5==n&&J(e.qa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ka},\\\"%W\\\":function(e){return o(Math.floor((e.pa+7-(e.ka+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.qa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.qa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ba);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ea},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(C(e)+1);return k(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(O.set(l,e>>>0),l.length-1)}var ne={a:function(e){return re(e+24)+24},b:function(e,t,n){throw new q(e).wa(t,n),e},g:function(){return 0},J:function(){},w:function(){},z:function(){},s:function(){return 0},H:function(){},C:function(){},G:function(){},k:function(){},y:function(){},u:function(){},I:function(){},v:function(){},o:function(){},q:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},p:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},K:function(){return!0},L:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},M:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);A[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},m:function(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),u=Math.min(i,o);return 0>n?A[e+32>>2>>>0]=Number(o!=i&&u==r):0<n!=(u==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?u:o)-r))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},A:function(){return-52},B:function(){},n:function e(t,n,r){e.va||(e.va=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();A[e>>2>>>0]=60*Math.max(a,u),A[t>>2>>>0]=Number(a!=u),e=r(o),t=r(i),e=V(e),t=V(t),u<a?(T[n>>2>>>0]=e,T[n+4>>2>>>0]=t):(T[n>>2>>>0]=t,T[n+4>>2>>>0]=e)}(t,n,r))},d:function(){Y(\\\"\\\")},t:function(){return 4294901760},h:m?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),F:function(e,t,n){S.copyWithin(e>>>0,t>>>0,t+n>>>0)},f:function(e){var t=S.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{_.grow(a-w.byteLength+65535>>>16),P();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){var n=0;return X().forEach((function(r,a){var o=t+n;for(a=T[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)O[a++>>0>>>0]=r.charCodeAt(o);O[a>>0>>>0]=0,n+=r.length+1})),0},E:function(e,t){var n=X();T[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),T[t>>2>>>0]=r,0},e:function(){return 52},j:function(){return 52},r:function(){return 70},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=T[t>>2>>>0],u=T[t+4>>2>>>0];t+=8;for(var s=0;s<u;s++){var c=S[i+s>>>0],l=Z[e];0===c||10===c?((1===e?v:b)(x(l,0)),l.length=0):l.push(c)}a+=u}return T[r>>2>>>0]=a,0},x:te,c:function(e,t,n,r){return te(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,_=t.asm.N,P(),F.unshift(t.asm.O),W--,t.monitorRunDependencies&&t.monitorRunDependencies(W),0==W&&(null!==H&&(clearInterval(H),H=null),j&&(e=j,j=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!y&&(d||h)){if(\\\"function\\\"==typeof fetch&&!L.startsWith(\\\"file://\\\"))return fetch(L,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+L+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return B()}));if(i)return new Promise((function(e,t){i(L,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return B()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){b(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var o={a:ne};if(W++,t.monitorRunDependencies&&t.monitorRunDependencies(W),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z()||L.startsWith(\\\"file://\\\")||m||\\\"function\\\"!=typeof fetch?r(n):fetch(L,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return b(\\\"wasm streaming compile failed: \\\"+e),b(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.O).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.P).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.Q).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.R).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.S).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.T).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.U).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.V).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.W).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.X).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.Y).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.Z).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm._).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.$).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.aa).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.ba).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ca).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.da).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ea).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.fa).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ga).apply(null,arguments)};var re=t._malloc=function(){return(re=t._malloc=t.asm.ha).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ia).apply(null,arguments)},t._fflush=function(){return(t._fflush=t.asm.ja).apply(null,arguments)};var ae,oe=t.stackSave=function(){return(oe=t.stackSave=t.asm.la).apply(null,arguments)},ie=t.stackRestore=function(){return(ie=t.stackRestore=t.asm.ma).apply(null,arguments)},ue=t.stackAlloc=function(){return(ue=t.stackAlloc=t.asm.na).apply(null,arguments)};function se(){function e(){if(!ae&&(ae=!0,t.calledRun=!0,!E)){if(G(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();U.unshift(e)}G(U)}}if(!(0<W)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)I();G(D),0<W||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.___cxa_is_pointer_type=function(){return(t.___cxa_is_pointer_type=t.asm.oa).apply(null,arguments)},t.UTF8ToString=R,t.stringToUTF8=function(e,t,n){return k(e,S,t,n)},t.lengthBytesUTF8=C,t.stackSave=oe,t.stackRestore=ie,t.stackAlloc=ue,j=function e(){ae||se(),ae||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return se(),e.ready});e.exports=r},967:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=function(e,r,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=n(e,2),u=i[0],s=i[1],c=r?r+u:u;if(\\\"object\\\"==typeof s)t.iterateExtraOptions(s,c+\\\".\\\",a,o);else if(\\\"string\\\"==typeof s||\\\"number\\\"==typeof s)o(c,s.toString());else{if(\\\"boolean\\\"!=typeof s)throw new Error(\\\"Can't handle extra config type: \\\"+typeof s);o(c,s?\\\"1\\\":\\\"0\\\")}}))}},586:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(967),a=n(983),o=n(361);t.setRunOptions=function(e){var t=o.getInstance(),n=0,i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);var s=0;if(void 0!==(null==e?void 0:e.tag)&&(s=a.allocWasmString(e.tag,i)),0===(n=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,s)))throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var o=a.allocWasmString(e,i),u=a.allocWasmString(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,u))throw new Error(\\\"Can't set a run config entry: \\\"+e+\\\" - \\\"+r)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var a=n(967),o=n(983),i=n(361);t.setSessionOptions=function(e){var t=i.getInstance(),n=0,u=[],s=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")}(s);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(s.graphOptimizationLevel=\\\"all\\\");var c=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\"+e)}}(s.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(s.executionMode=\\\"sequential\\\");var l=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\"+e)}}(s.executionMode),f=0;if(void 0!==(null==e?void 0:e.logId)&&(f=o.allocWasmString(e.logId,u)),void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);if(void 0===(null==e?void 0:e.enableProfiling)&&(s.enableProfiling=!1),0===(n=t._OrtCreateSessionOptions(c,!!s.enableCpuMemArena,!!s.enableMemPattern,l,!!s.enableProfiling,0,f,s.logSeverityLevel,s.logVerbosityLevel)))throw new Error(\\\"Can't create session options\\\");return(null==e?void 0:e.executionProviders)&&function(e,t,n){var a,u;try{for(var s=r(t),c=s.next();!c.done;c=s.next()){var l=c.value,f=\\\"string\\\"==typeof l?l:l.name;switch(f){case\\\"xnnpack\\\":f=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported EP: \\\"+f)}var p=o.allocWasmString(f,n);if(0!==i.getInstance()._OrtAppendExecutionProvider(e,p))throw new Error(\\\"Can't append execution provider: \\\"+f)}}catch(e){a={error:e}}finally{try{c&&!c.done&&(u=s.return)&&u.call(s)}finally{if(a)throw a.error}}}(n,e.executionProviders,u),void 0!==(null==e?void 0:e.extra)&&a.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var a=o.allocWasmString(e,u),i=o.allocWasmString(r,u);if(0!==t._OrtAddSessionConfigEntry(n,a,i))throw new Error(\\\"Can't set a session config entry: \\\"+e+\\\" - \\\"+r)})),[n,u]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),u.forEach(t._free),e}}},983:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;var r=n(361);t.allocWasmString=function(e,t){var n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;var o=n(586),i=n(919),u=n(983),s=n(361);t.initOrt=function(e,t){var n=s.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(\\\"Can't initialize onnxruntime. error code = \\\"+n)};var c=new Map;t.createSession=function(e,t){var n,a=s.getInstance(),o=a._malloc(e.byteLength),u=0,l=0,f=[];try{if(l=(n=r(i.setSessionOptions(t),2))[0],f=n[1],a.HEAPU8.set(e,o),0===(u=a._OrtCreateSession(o,e.byteLength,l)))throw new Error(\\\"Can't create a session\\\")}finally{a._free(o),a._OrtReleaseSessionOptions(l),f.forEach(a._free)}for(var p=a._OrtGetInputCount(u),d=a._OrtGetOutputCount(u),h=[],m=[],g=[],y=[],v=0;v<p;v++){var b=a._OrtGetInputName(u,v);if(0===b)throw new Error(\\\"Can't get an input name\\\");m.push(b),h.push(a.UTF8ToString(b))}for(v=0;v<d;v++){var _=a._OrtGetOutputName(u,v);if(0===_)throw new Error(\\\"Can't get an output name\\\");y.push(_),g.push(a.UTF8ToString(_))}return c.set(u,[u,m,y]),[u,h,g]},t.releaseSession=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),c.delete(e)};var l=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\"+e)}},f=function(e){switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\"+e)}};t.run=function(e,t,n,a,i){var p,d=s.getInstance(),h=c.get(e);if(!h)throw new Error(\\\"invalid session id\\\");var m=h[0],g=h[1],y=h[2],v=t.length,b=a.length,_=0,w=[],O=[],S=[];try{_=(p=r(o.setRunOptions(i),2))[0],w=p[1];for(var A=function(e){var t=n[e][0],r=n[e][1],a=n[e][2],o=void 0,i=void 0;if(Array.isArray(a)){i=4*a.length,o=d._malloc(i),S.push(o);for(var s=o/4,c=0;c<a.length;c++){if(\\\"string\\\"!=typeof a[c])throw new TypeError(\\\"tensor data at index \\\"+c+\\\" is not a string\\\");d.HEAPU32[s++]=u.allocWasmString(a[c],S)}}else i=a.byteLength,o=d._malloc(i),S.push(o),d.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,i),o);var l=d.stackSave(),f=d.stackAlloc(4*r.length);try{var p=f/4;r.forEach((function(e){return d.HEAP32[p++]=e}));var h=d._OrtCreateTensor(function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\"+e)}}(t),o,i,f,r.length);if(0===h)throw new Error(\\\"Can't create a tensor\\\");O.push(h)}finally{d.stackRestore(l)}},T=0;T<v;T++)A(T);var E=d.stackSave(),M=d.stackAlloc(4*v),x=d.stackAlloc(4*v),R=d.stackAlloc(4*b),k=d.stackAlloc(4*b);try{var C=M/4,P=x/4,D=R/4,F=k/4;for(T=0;T<v;T++)d.HEAPU32[C++]=O[T],d.HEAPU32[P++]=g[t[T]];for(T=0;T<b;T++)d.HEAPU32[D++]=0,d.HEAPU32[F++]=y[a[T]];var U=d._OrtRun(m,x,M,v,k,b,R,_),I=[];if(0===U)for(T=0;T<b;T++){var L=d.HEAPU32[R/4+T],W=d.stackSave(),H=d.stackAlloc(16),j=void 0,Y=0;try{if(0!==(U=d._OrtGetTensorData(L,H,H+4,H+8,H+12)))throw new Error(\\\"Can't access output tensor data. error code = \\\"+U);var z=H/4,N=d.HEAPU32[z++];Y=d.HEAPU32[z++];for(var B=d.HEAPU32[z++],G=d.HEAPU32[z++],q=[],V=0;V<G;V++)q.push(d.HEAPU32[B/4+V]);d._OrtFree(B);var Q=0===q.length?1:q.reduce((function(e,t){return e*t}));if(\\\"string\\\"===(j=l(N))){for(var X=[],K=Y/4,Z=0;Z<Q;Z++){var J=d.HEAPU32[K++],$=Z===Q-1?void 0:d.HEAPU32[K]-J;X.push(d.UTF8ToString(J,$))}I.push([j,q,X])}else{var ee=new(f(j))(Q);new Uint8Array(ee.buffer,ee.byteOffset,ee.byteLength).set(d.HEAPU8.subarray(Y,Y+ee.byteLength)),I.push([j,q,ee])}}finally{d.stackRestore(W),\\\"string\\\"===j&&Y&&d._free(Y),d._OrtReleaseTensor(L)}}if(0===U)return I;throw new Error(\\\"failed to call OrtRun(). error code = \\\"+U+\\\".\\\")}finally{d.stackRestore(E)}}finally{O.forEach(d._OrtReleaseTensor),S.forEach(d._free),d._OrtReleaseRunOptions(_),w.forEach(d._free)}},t.endProfiling=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var o=a(e),i=o.next();!i.done;i=o.next()){var u=i.value[2];!Array.isArray(u)&&u.buffer&&r.push(u.buffer)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return r}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}))},u=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var c,l=o(n(449)),f=s(n(932)),p=n(474),d=!1,h=!1,m=!1,g=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"};t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,s,y,v,b,_,w;return u(this,(function(u){switch(u.label){case 0:if(d)return[2,Promise.resolve()];if(h)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(m)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return h=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,y=g(!1,o),v=g(i,o),b=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[v]:void 0,_=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){_=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?p:f.default,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"})):e===y?null!=b?b:(null!=s?s:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=l.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\"+r.toString()+\\\"})();\\\";a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){h=!1,d=!0,c=t,e()}),(function(e){h=!1,m=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(u.sent(),_)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\"+t+\\\"ms\\\");return[2]}}))}))},t.getInstance=function(){if(d&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!d||h||m||(h=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,h=!1,d=!1,m=!0)}},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),function(){\\\"use strict\\\";var e=n(349),t=n(361);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}));break;case\\\"init-ort\\\":try{var r=n.data.in,a=r.numThreads,o=r.loggingLevel;e.initOrt(a,o),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{var i=n.data.in,u=i.model,s=i.options,c=e.createSession(u,s);postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var l=n.data.in;e.releaseSession(l),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var f=n.data.in,p=f.sessionId,d=f.inputIndices,h=f.inputs,m=f.outputIndices,g=(s=f.options,e.run(p,d,h,m,s));postMessage({type:\\\"run\\\",out:g},e.extractTransferableBuffers(g))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{l=n.data.in,e.endProfiling(l),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__2174__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}